ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0plus
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ADC.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADC_InitConfig,"ax",%progbits
  20              		.align	2
  21              		.global	ADC_InitConfig
  22              		.code	16
  23              		.thumb_func
  24              		.type	ADC_InitConfig, %function
  25              	ADC_InitConfig:
  26              	.LFB188:
  27              		.file 1 "Generated_Source\\PSoC6\\ADC.c"
   1:Generated_Source\PSoC6/ADC.c **** /***************************************************************************//**
   2:Generated_Source\PSoC6/ADC.c **** * \file     ADC.c
   3:Generated_Source\PSoC6/ADC.c **** * \version  3.10
   4:Generated_Source\PSoC6/ADC.c **** *
   5:Generated_Source\PSoC6/ADC.c **** * \brief
   6:Generated_Source\PSoC6/ADC.c **** * Provides the source code to the API for the ADC Component.
   7:Generated_Source\PSoC6/ADC.c **** *
   8:Generated_Source\PSoC6/ADC.c **** ********************************************************************************
   9:Generated_Source\PSoC6/ADC.c **** * \copyright
  10:Generated_Source\PSoC6/ADC.c **** * (c) 2017-2018, Cypress Semiconductor Corporation. All rights reserved.
  11:Generated_Source\PSoC6/ADC.c **** * This software, including source code, documentation and related
  12:Generated_Source\PSoC6/ADC.c **** * materials ("Software"), is owned by Cypress Semiconductor
  13:Generated_Source\PSoC6/ADC.c **** * Corporation ("Cypress") and is protected by and subject to worldwide
  14:Generated_Source\PSoC6/ADC.c **** * patent protection (United States and foreign), United States copyright
  15:Generated_Source\PSoC6/ADC.c **** * laws and international treaty provisions. Therefore, you may use this
  16:Generated_Source\PSoC6/ADC.c **** * Software only as provided in the license agreement accompanying the
  17:Generated_Source\PSoC6/ADC.c **** * software package from which you obtained this Software ("EULA").
  18:Generated_Source\PSoC6/ADC.c **** * If no EULA applies, Cypress hereby grants you a personal, nonexclusive,
  19:Generated_Source\PSoC6/ADC.c **** * non-transferable license to copy, modify, and compile the
  20:Generated_Source\PSoC6/ADC.c **** * Software source code solely for use in connection with Cypress's
  21:Generated_Source\PSoC6/ADC.c **** * integrated circuit products. Any reproduction, modification, translation,
  22:Generated_Source\PSoC6/ADC.c **** * compilation, or representation of this Software except as specified
  23:Generated_Source\PSoC6/ADC.c **** * above is prohibited without the express written permission of Cypress.
  24:Generated_Source\PSoC6/ADC.c **** * Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO
  25:Generated_Source\PSoC6/ADC.c **** * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
  26:Generated_Source\PSoC6/ADC.c **** * BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED
  27:Generated_Source\PSoC6/ADC.c **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  28:Generated_Source\PSoC6/ADC.c **** * PARTICULAR PURPOSE. Cypress reserves the right to make
  29:Generated_Source\PSoC6/ADC.c **** * changes to the Software without notice. Cypress does not assume any
  30:Generated_Source\PSoC6/ADC.c **** * liability arising out of the application or use of the Software or any
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 2


  31:Generated_Source\PSoC6/ADC.c **** * product or circuit described in the Software. Cypress does not
  32:Generated_Source\PSoC6/ADC.c **** * authorize its products for use in any products where a malfunction or
  33:Generated_Source\PSoC6/ADC.c **** * failure of the Cypress product may reasonably be expected to result in
  34:Generated_Source\PSoC6/ADC.c **** * significant property damage, injury or death ("High Risk Product"). By
  35:Generated_Source\PSoC6/ADC.c **** * including Cypress's product in a High Risk Product, the manufacturer
  36:Generated_Source\PSoC6/ADC.c **** * of such system or application assumes all risk of such use and in doing
  37:Generated_Source\PSoC6/ADC.c **** * so agrees to indemnify Cypress against all liability.
  38:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
  39:Generated_Source\PSoC6/ADC.c **** #include "ADC.h"
  40:Generated_Source\PSoC6/ADC.c **** #include <sysint/cy_sysint.h>
  41:Generated_Source\PSoC6/ADC.c **** #include <cyfitter_sysint_cfg.h>
  42:Generated_Source\PSoC6/ADC.c **** 
  43:Generated_Source\PSoC6/ADC.c **** uint8_t ADC_initVar = 0u;
  44:Generated_Source\PSoC6/ADC.c **** uint8_t ADC_selected = 0u; /* 0 if no configuration selected. 1 otherwise. */
  45:Generated_Source\PSoC6/ADC.c **** uint32_t ADC_currentConfig = 0u; /* Currently active configuration */
  46:Generated_Source\PSoC6/ADC.c **** 
  47:Generated_Source\PSoC6/ADC.c **** /*******************************************************************************
  48:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_Start
  49:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//**
  50:Generated_Source\PSoC6/ADC.c **** *
  51:Generated_Source\PSoC6/ADC.c **** * \brief Performs all required initialization for this component and enables the
  52:Generated_Source\PSoC6/ADC.c **** *  power. The power will be set to the appropriate power based on the clock
  53:Generated_Source\PSoC6/ADC.c **** *  frequency.
  54:Generated_Source\PSoC6/ADC.c **** *
  55:Generated_Source\PSoC6/ADC.c **** * \param None
  56:Generated_Source\PSoC6/ADC.c **** *
  57:Generated_Source\PSoC6/ADC.c **** * \return None
  58:Generated_Source\PSoC6/ADC.c **** *
  59:Generated_Source\PSoC6/ADC.c **** * \sideeffect None
  60:Generated_Source\PSoC6/ADC.c **** *
  61:Generated_Source\PSoC6/ADC.c **** * \globalvars
  62:Generated_Source\PSoC6/ADC.c **** *  \ref ADC_initVar (RW)
  63:Generated_Source\PSoC6/ADC.c **** *
  64:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
  65:Generated_Source\PSoC6/ADC.c **** void ADC_Start(void)
  66:Generated_Source\PSoC6/ADC.c **** {
  67:Generated_Source\PSoC6/ADC.c ****     if (ADC_INIT_VAR_INIT_FLAG != (ADC_INIT_VAR_INIT_FLAG & ADC_initVar))
  68:Generated_Source\PSoC6/ADC.c ****     {
  69:Generated_Source\PSoC6/ADC.c ****         ADC_Init();
  70:Generated_Source\PSoC6/ADC.c ****         ADC_initVar |= ADC_INIT_VAR_INIT_FLAG;
  71:Generated_Source\PSoC6/ADC.c ****     }
  72:Generated_Source\PSoC6/ADC.c **** 
  73:Generated_Source\PSoC6/ADC.c ****     ADC_Enable();
  74:Generated_Source\PSoC6/ADC.c **** 
  75:Generated_Source\PSoC6/ADC.c ****     return;
  76:Generated_Source\PSoC6/ADC.c **** }
  77:Generated_Source\PSoC6/ADC.c **** 
  78:Generated_Source\PSoC6/ADC.c **** /*******************************************************************************
  79:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_StartEx
  80:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//**
  81:Generated_Source\PSoC6/ADC.c **** *
  82:Generated_Source\PSoC6/ADC.c **** * \brief This function starts the ADC and sets the Interrupt
  83:Generated_Source\PSoC6/ADC.c **** * Service Routine to the provided address using the
  84:Generated_Source\PSoC6/ADC.c **** * Cy_SysInt_Init() function. Refer to the Interrupt component
  85:Generated_Source\PSoC6/ADC.c **** * datasheet for more information on the Cy_SysInt_Init() function.
  86:Generated_Source\PSoC6/ADC.c **** *
  87:Generated_Source\PSoC6/ADC.c **** * \param address This is the address of a user defined function for the ISR.
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 3


  88:Generated_Source\PSoC6/ADC.c **** *
  89:Generated_Source\PSoC6/ADC.c **** * \return None
  90:Generated_Source\PSoC6/ADC.c **** *
  91:Generated_Source\PSoC6/ADC.c **** * \sideeffect None
  92:Generated_Source\PSoC6/ADC.c **** *
  93:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
  94:Generated_Source\PSoC6/ADC.c **** void ADC_StartEx(cy_israddress userIsr)
  95:Generated_Source\PSoC6/ADC.c **** {
  96:Generated_Source\PSoC6/ADC.c ****     ADC_Start();
  97:Generated_Source\PSoC6/ADC.c **** 
  98:Generated_Source\PSoC6/ADC.c ****     /* Interrupt core assignment will be up to the user. Initialize and enable the interrupt*/
  99:Generated_Source\PSoC6/ADC.c ****     #ifdef ADC_IRQ__INTC_CORTEXM4_ASSIGNED
 100:Generated_Source\PSoC6/ADC.c ****     #if (CY_CPU_CORTEX_M4)
 101:Generated_Source\PSoC6/ADC.c ****         (void)Cy_SysInt_Init(&ADC_IRQ_cfg, userIsr);
 102:Generated_Source\PSoC6/ADC.c ****         NVIC_EnableIRQ(ADC_IRQ_cfg.intrSrc);
 103:Generated_Source\PSoC6/ADC.c ****     #endif
 104:Generated_Source\PSoC6/ADC.c ****     #endif
 105:Generated_Source\PSoC6/ADC.c **** 
 106:Generated_Source\PSoC6/ADC.c ****     #ifdef ADC_IRQ__INTC_CORTEXM0P_ASSIGNED
 107:Generated_Source\PSoC6/ADC.c ****     #if (CY_CPU_CORTEX_M0P)
 108:Generated_Source\PSoC6/ADC.c ****         (void)Cy_SysInt_Init(&ADC_IRQ_cfg, userIsr);
 109:Generated_Source\PSoC6/ADC.c ****         NVIC_EnableIRQ(ADC_IRQ_cfg.intrSrc);
 110:Generated_Source\PSoC6/ADC.c ****     #endif
 111:Generated_Source\PSoC6/ADC.c ****     #endif
 112:Generated_Source\PSoC6/ADC.c **** 
 113:Generated_Source\PSoC6/ADC.c **** }
 114:Generated_Source\PSoC6/ADC.c **** 
 115:Generated_Source\PSoC6/ADC.c **** /* ****************************************************************************
 116:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_InitConfig
 117:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//*
 118:Generated_Source\PSoC6/ADC.c **** *
 119:Generated_Source\PSoC6/ADC.c **** * \brief Configures all of the registers for a given configuration for scanning.
 120:Generated_Source\PSoC6/ADC.c **** *
 121:Generated_Source\PSoC6/ADC.c **** * \param scan Number of scan defined in the ADC.
 122:Generated_Source\PSoC6/ADC.c **** *
 123:Generated_Source\PSoC6/ADC.c **** * \return None
 124:Generated_Source\PSoC6/ADC.c **** *
 125:Generated_Source\PSoC6/ADC.c **** * \sideeffect None
 126:Generated_Source\PSoC6/ADC.c **** *
 127:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 128:Generated_Source\PSoC6/ADC.c **** void ADC_InitConfig(const ADC_CONFIG_STRUCT *config)
 129:Generated_Source\PSoC6/ADC.c **** {
  28              		.loc 1 129 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 4, -16
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 6, -8
  38              		.cfi_offset 14, -4
  39 0002 0400     		movs	r4, r0
  40              	.LVL1:
  41              	.LBB46:
  42              	.LBB47:
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 4


  43              	.LBB48:
  44              		.file 2 "Generated_Source\\PSoC6\\pdl\\drivers/peripheral/sysclk/cy_sysclk.h"
   1:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /***************************************************************************//**
   2:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \file cy_sysclk.h
   3:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \version 2.0
   4:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
   5:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Provides an API declaration of the sysclk driver.
   6:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
   7:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ********************************************************************************
   8:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \copyright
   9:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Copyright 2016-2020, Cypress Semiconductor Corporation. All rights reserved.
  10:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * You may use this file only in accordance with the license, terms, conditions,
  11:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * disclaimers, and limitations in the end user license agreement accompanying
  12:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * the software package with which this file was provided.
  13:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
  14:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
  15:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
  16:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk
  17:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
  18:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The System Clock (SysClk) driver contains the API for configuring system and
  19:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * peripheral clocks. 
  20:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  21:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The functions and other declarations used in this driver are in cy_sysclk.h. 
  22:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * You can include cy_pdl.h (ModusToolbox only) to get access to all functions 
  23:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * and declarations in the PDL. 
  24:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  25:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Firmware uses the API to configure , enable, or disable a clock.
  26:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * 
  27:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The clock system includes a variety of resources that can vary per device, including:
  28:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * - Internal clock sources such as internal oscillators
  29:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * - External clock sources such as crystal oscillators or a signal on an I/O pin
  30:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * - Generated clocks such as an FLL, a PLL, and peripheral clocks
  31:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  32:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Consult the Technical Reference Manual for your device for details of the 
  33:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * clock system.
  34:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  35:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The PDL defines clock system capabilities in:\n
  36:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * devices\<family\>/<series\>/include\<series\>_config.h. (E.g.
  37:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * devices/psoc6/include/psoc6_01_config.h).
  38:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * User-configurable clock speeds are defined in the file system_<series>.h.
  39:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  40:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * As an illustration of the clocking system, the following diagram shows the
  41:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * PSoC 63 series clock tree. The actual tree may vary depending on the device series.
  42:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Consult the Technical Reference Manual for your device for details.
  43:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * ![](sysclk_tree.png)
  44:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  45:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The sysclk driver supports multiple peripheral clocks, as well as the fast 
  46:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * clock, slow clock, backup domain clock, timer clock, and pump clock. The API
  47:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * for any given clock contains the functions to manage that clock. Functions
  48:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * for clock measurement and trimming are also provided.
  49:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  50:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \section group_sysclk_configuration Configuration Considerations
  51:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The availability of clock functions depend on the availability of the chip
  52:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * resources that support those functions. Consult the device TRM before
  53:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * attempting to use these functions.
  54:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  55:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * LPActive and LPSleep power modes limit the maximum clock frequency allowed
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 5


  56:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * on the device. Refer to the SysPm driver and the TRM for details.
  57:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  58:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \section group_sysclk_more_information More Information
  59:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Refer to the technical reference manual (TRM) and the device datasheet.
  60:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  61:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \section group_sysclk_MISRA MISRA-C Compliance
  62:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * <table class="doxtable">
  63:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
  64:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <th>MISRA Rule</th>
  65:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <th>Rule Class (Required/Advisory)</th>
  66:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <th>Rule Description</th>
  67:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <th>Description of Deviation(s)</th>
  68:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
  69:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
  70:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>10.3</td>
  71:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>R</td>
  72:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>A composite expression of the "essentially unsigned" type is being
  73:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         cast to a different type category.</td>
  74:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>The value got from the bitfield physically cannot exceed the enumeration
  75:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         that describes this bitfield. So, the code is safe by design.</td>
  76:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
  77:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
  78:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>10.4</td>
  79:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>R</td>
  80:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>A composite floating point expression is being cast to double, or unsigned.</td>
  81:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Casting a floating-point calculation result to an integer.</td>
  82:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
  83:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
  84:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>13.4</td>
  85:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>R</td>
  86:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>The controlling expression of a for statement shall not contain any objects of floating t
  87:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Scanning through a list of floating point values: only greater_than/less_then checks are 
  88:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         with floating point numbers, the loop counter is integer. </td>
  89:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
  90:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
  91:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>16.7</td>
  92:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>R</td>
  93:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>The object addressed by the pointer parameter is not modified and so the pointer could be
  94:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         type 'pointer to const'.</td>
  95:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>The callback function for system power management (SysPm) must be of generic callback typ
  96:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         contains non-const pointer parameter.</td>
  97:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
  98:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * </table>
  99:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 100:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \section group_sysclk_changelog Changelog
 101:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * <table class="doxtable">
 102:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr><th>Version</th><th>Changes</th><th>Reason for Change</th></tr>
 103:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 104:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>2.0</td>
 105:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Updated the ECO trimming values calculation algorithm in the \ref Cy_SysClk_EcoConfigure 
 106:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         This change may invalidate the already used crystals, in cases: \n
 107:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         * The crystal frequency is less than 16 MHz (the supported crystal frequency range was ch
 108:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         * The maximum amplitude (internal calculation value) is less than 0.65 V. \n
 109:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 110:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         Also the second parameter cSum takes into account both C0 (the crystal itself shunt capac
 111:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         For detail, refer the \ref Cy_SysClk_EcoConfigure documentation and the ECO Trimming sect
 112:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Enhanced the ECO performance for high-noise conditions that result from simultaneous swit
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 6


 113:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 114:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 115:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td rowspan="4">1.20</td>
 116:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Flattened the organization of the driver source code into the single 
 117:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         source directory and the single include directory.
 118:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     </td>
 119:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Driver library directory-structure simplification.</td>
 120:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 121:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 122:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Updated \ref Cy_SysClk_FllLocked function description</td>
 123:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>The SRSS_ver1 HW details clarification</td>
 124:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 125:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 126:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Removed the following functions:
 127:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         - Cy_SysClk_FllLostLock
 128:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         - Cy_SysClk_WcoConfigureCsv
 129:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         - Cy_SysClk_ClkHfConfigureCsv
 130:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     </td>
 131:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>No hardware support for the removed functions.</td>
 132:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 133:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 134:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Added register access layer. Use register access macros instead
 135:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         of direct register access using dereferenced pointers.</td>
 136:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Makes register access device-independent, so that the PDL does 
 137:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         not need to be recompiled for each supported part number.</td>
 138:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 139:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 140:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>1.11</td>
 141:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Updated the following functions. Now they use a semaphore when 
 142:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         try to read the status or configure the SysClk measurement counters:
 143:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         * Cy_SysClk_StartClkMeasurementCounters()
 144:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         * Cy_SysClk_ClkMeasurementCountersGetFreq()
 145:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 146:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         Now Cy_SysClk_ClkMeasurementCountersGetFreq() returns zero value,
 147:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         if during measurement device was in the Deep Sleep or partially
 148:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         blocking flash operation occurred </td>
 149:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Added arbiter mechanism for correct usage of the SysClk measurement 
 150:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         counters</td>
 151:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 152:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 153:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>1.10.1</td>
 154:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Renamed Power Management section to Low Power Callback section</td>
 155:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Documentation update and clarification</td>
 156:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 157:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 158:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td rowspan="5">1.10</td>
 159:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Updated FLL parameter calculation</td>
 160:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Support low frequency sources</td>
 161:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 162:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 163:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Added Cy_SysClk_PiloSetTrim() and Cy_SysclkPiloGetTrim() functions</td>
 164:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Support PILO manual trims</td>
 165:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 166:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 167:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Made Cy_SysClk_FllLostLock() function dependent on SRSS v1</td>
 168:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Feature is not supported in SRSS v1</td>
 169:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 7


 170:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 171:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Updated Cy_SysClk_DeepSleepCallback() to save/restore both FLL and PLL settings</td>
 172:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>The function should return when the lock is established or a timeout has occurred</td>
 173:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 174:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 175:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>General documentation updates</td>
 176:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td></td>
 177:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 178:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 179:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>1.0</td>
 180:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Initial version</td>
 181:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td></td>
 182:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 183:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * </table>
 184:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 185:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_macros           Macros
 186:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 187:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 188:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_enums           General Enumerated Types
 189:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 190:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_returns         Function return values
 191:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 192:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_eco             External Crystal Oscillator (ECO)
 193:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 194:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The External Crystal Oscillator (ECO) is a clock source that consists
 195:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   of an oscillator circuit that drives an external crystal through its
 196:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   dedicated ECO pins. The ECO is a source clock that can be used to
 197:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   source one or more clock paths (Refer to \ref group_sysclk_path_src).
 198:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   These clock paths can then source the processors and peripherals in
 199:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the device.
 200:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 201:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The ECO relies on the presence of an external crystal. The pins
 202:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   connected to this crystal must be configured to operate in analog
 203:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   drive mode with HSIOM connection set to GPIO control (HSIOM_SEL_GPIO).
 204:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 205:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_eco_funcs       Functions
 206:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 207:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_path_src           Clock Path Source
 208:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 209:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Clock paths are a series of multiplexers that allow a source clock
 210:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   to drive multiple clocking resources down the chain. These paths are
 211:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   used for active domain clocks that are not operational during chip 
 212:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   deep-sleep, hibernate and off modes. Illustrated below is a diagram
 213:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   of the clock paths for the PSoC 63 series, showing the first three
 214:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   clock paths. The source clocks for these paths are highlighted in
 215:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the red box.
 216:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 217:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - IMO: 8 MHz Internal Main Oscillator (Default)
 218:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - EXTCLK: External clock (signal brought in through dedicated pins)
 219:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - ECO: External Crystal Oscillator (requires external crystal on dedicated pins)
 220:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - ALTHF: Select on-chip signals (e.g. BLE ECO)
 221:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - Digital Signal (DSI): Digital signal from a UDB source
 222:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 223:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Some clock paths such as path 0 and path 1 have additional resources
 224:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   that can be utilized to provide a higher frequency clock. For example, 
 225:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   path 0 source clock can be used as the reference clock for the FLL and 
 226:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   path 1 source clock can be used as the reference clock for the PLL.
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 8


 227:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 228:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_path_source.png)
 229:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 230:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \note The PDL driver cannot configure a clock path to use Digital Signal
 231:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Interconnect (DSI) outputs as sources. This must be done through DSI
 232:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   configuration tool such as PSoC Creator.
 233:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 234:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_path_src_funcs     Functions
 235:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_path_src_enums     Enumerated Types
 236:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 237:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_fll             Frequency Locked Loop (FLL)
 238:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 239:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The FLL is a clock generation circuit that can be used to produce a
 240:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   higher frequency clock from a reference clock. The output clock exhibits
 241:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   some characteristics of the reference clock such as the accuracy of the
 242:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   source. However other attributes such as the clock phase are not preserved.
 243:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The FLL is similar in purpose to a (Phase locked loop) PLL but they are
 244:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   not equivalent.
 245:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 246:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - They may have different frequency ranges.
 247:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - The FLL starts up (locks) faster and consumes less current than the PLL.
 248:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - The FLL accepts a source clock with lower frequency than PLL, such as the WCO (32 KHz). 
 249:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - The FLL does not lock phase. The hardware consist of a counter with a
 250:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     current-controlled oscillator (CCO). The counter counts the number of output
 251:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     clock edges in a reference clock period and adjusts the CCO until the
 252:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     expected ratio is achieved (locked). After initial lock, the CCO is
 253:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     adjusted dynamically to keep the ratio within tolerance. The lock tolerance
 254:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     is user-adjustable.
 255:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_fll.png)
 256:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 257:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The SysClk driver supports two models for configuring the FLL. The first
 258:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   model is to call the Cy_SysClk_FllConfigure() function, which calculates the 
 259:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   necessary parameters for the FLL at run-time. This may be necessary for dynamic
 260:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   run-time changes to the FLL. However this method is slow as it needs to perform 
 261:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the calculation before configuring the FLL. The other model is to call 
 262:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Cy_SysClk_FllManualConfigure() function with pre-calculated parameter values. 
 263:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   This method is faster but requires prior knowledge of the necessary parameters.
 264:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Consult the device TRM for the FLL calculation equations.
 265:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 266:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_fll_funcs       Functions
 267:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_fll_structs     Data Structures
 268:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_fll_enums       Enumerated Types
 269:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 270:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_pll             Phase Locked Loop (PLL)
 271:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 272:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The PLL is a clock generation circuit that can be used to produce a
 273:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   higher frequency clock from a reference clock. The output clock exhibits
 274:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   characteristics of the reference clock such as the accuracy of the source
 275:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   and its phase. The PLL is similar in purpose to a (Frequency locked loop) FLL
 276:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   but they are not equivalent.
 277:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 278:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - They may have different frequency ranges.
 279:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - The PLL starts up more slowly and consumes more current than the FLL.
 280:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - The PLL requires a higher frequency source clock than PLL. 
 281:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_pll.png)
 282:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 283:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The SysClk driver supports two models for configuring the PLL. The first
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 9


 284:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   model is to call the Cy_SysClk_PllConfigure() function, which calculates the 
 285:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   necessary parameters for the PLL at run-time. This may be necessary for dynamic
 286:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   run-time changes to the PLL. However this method is slow as it needs to perform 
 287:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the calculation before configuring the PLL. The other model is to call 
 288:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Cy_SysClk_PllManualConfigure() function with pre-calculated parameter values. 
 289:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   This method is faster but requires prior knowledge of the necessary parameters.
 290:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Consult the device TRM for the PLL calculation equations.
 291:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 292:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_pll_funcs       Functions
 293:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_pll_structs     Data Structures
 294:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 295:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_ilo             Internal Low-Speed Oscillator (ILO)
 296:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 297:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The ILO operates with no external components and outputs a stable clock at
 298:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   32.768 kHz nominal. The ILO is relatively low power and low accuracy. It is 
 299:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   available in all power modes and can be used as a source for the Backup domain clock.
 300:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_backup.png)
 301:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 302:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   To ensure the ILO remains active in Hibernate mode, and across power-on-reset
 303:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   (POR) or brown out detect (BOD), firmware must call Cy_SysClk_IloHibernateOn(). 
 304:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 305:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Additionally, the ILO clock can be trimmed to +/- 1.5% of nominal frequency using
 306:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   a higher precision clock source. Use the \ref group_sysclk_calclk API to measure 
 307:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the current ILO frequency before trimming.
 308:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 309:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \note The ILO is always the source clock for the \ref group_wdt. Therefore:
 310:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - The WDT must be unlocked when making an ILO function call in the PDL
 311:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - It is recommended to always have the ILO enabled
 312:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 313:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_ilo_funcs       Functions
 314:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 315:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_pilo            Precision Internal Low-Speed Oscillator (PILO)
 316:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 317:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   PILO provides a higher accuracy 32.768 kHz clock than the \ref group_sysclk_ilo "ILO".
 318:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   When periodically calibrated using a high-accuracy clock such as the
 319:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \ref group_sysclk_eco "ECO", the PILO can achieve 250 ppm accuracy of nominal frequency.
 320:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The PILO is capable of operating in device Active, Sleep and Deep-Sleep power modes. 
 321:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   It is not available in Hibernate mode.
 322:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 323:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The PILO can be used as a source for the \ref group_sysclk_clk_lf. However,
 324:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   because PILO is disabled in Hibernate mode, RTC timers cannot operate in this mode
 325:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   when clocked using the PILO. Instead, either the \ref group_sysclk_ilo "ILO" or
 326:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \ref group_sysclk_wco "WCO" should be used when hibernate operation is required. 
 327:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 328:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_backup.png)
 329:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 330:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Periodic calibration to a high-accuracy clock (such as ECO) is required to
 331:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   maintain accuracy. The application should use the functions described in the 
 332:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \ref group_sysclk_calclk API to measure the current PILO frequency before trimming.
 333:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 334:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_pilo_funcs      Functions
 335:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 336:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_calclk          Clock Measurement
 337:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 338:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   These functions measure the frequency of a specified clock relative to a
 339:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   reference clock. They are typically called in the following order:
 340:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 10


 341:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   1. Specify the measured clock, the count, and the reference clock
 342:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   2. Start the counters
 343:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   3. Wait for the measurement counter to finish counting
 344:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   4. Retrieve the measured frequency
 345:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 346:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \note These functions may also be used as part of a clock trimming
 347:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   process. Refer to the \ref group_sysclk_trim "Clock Trim" API.
 348:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 349:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_calclk_funcs    Functions
 350:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_calclk_enums    Enumerated Types
 351:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 352:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_trim            Clock Trim (ILO, PILO)
 353:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 354:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   These functions perform a single trim operation on the ILO or PILO. Each
 355:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   function's parameter is the actual frequency of the clock. To measure the
 356:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   frequency, use the functions described in the \ref group_sysclk_calclk API.
 357:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 358:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   To trim the clock as close as possible to the target frequency, multiple
 359:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   calls to the trim function may be needed. A typical usage example is to:
 360:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   1. Call the clock measurement functions to get the actual frequency of the clock
 361:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   2. Call the trim function, passing in the measured frequency
 362:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   3. Repeat the above until the trim function reports that the clock is trimmed to within limits.
 363:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 364:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_trim_funcs      Functions
 365:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 366:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_pm              Low Power Callback
 367:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 368:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Entering and exiting low power modes require compatible clock configurations
 369:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   to be set before entering low power and restored upon wake-up and exit. The
 370:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   SysClk driver provides a Cy_SysClk_DeepSleepCallback() function to support
 371:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   deep-sleep mode entry. 
 372:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 373:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   This function can be called either by itself before initiating low-power mode
 374:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   entry or it can be used in conjunction with the SysPm driver as a registered 
 375:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   callback. To do so, register this function as a callback before calling 
 376:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Cy_SysPm_DeepSleep(). Specify \ref CY_SYSPM_DEEPSLEEP as the callback type, 
 377:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   and call Cy_SysPm_RegisterCallback().
 378:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   
 379:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \note If the FLL or PLL source is the ECO, this function must be called.
 380:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 381:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_pm_funcs        Functions
 382:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 383:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_wco             Watch Crystal Oscillator (WCO)
 384:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 385:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The WCO is a highly accurate 32.768 kHz clock source capable of operating
 386:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   in all power modes (excluding the Off mode). It is the primary clock source for
 387:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the backup domain clock, which is used by the real-time clock (RTC). The 
 388:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   WCO can also be used as a source for the low-frequency clock to support other
 389:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   low power mode peripherals.
 390:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 391:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_backup.png)
 392:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 393:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The WCO requires the configuration of the dedicated WCO pins (SRSS_WCO_IN_PIN,
 394:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   SRSS_WCO_OUT_PIN). These must be configured as Analog Hi-Z drive modes and the
 395:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   HSIOM selection set to GPIO. The WCO can also be used in bypass mode, where
 396:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   an external 32.768 kHz square wave is brought in directly through the 
 397:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   SRSS_WCO_OUT_PIN pin.
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 11


 398:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 399:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Some devices support a built-in clock supervisor (CSV) in the WCO. The clock
 400:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   supervisor detects if the WCO has been lost; that is, the WCO is no longer 
 401:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   producing clock pulses. The CSV does this by checking to ensure there is at 
 402:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   least one WCO clock pulse within a certain time window. The ILO or PILO can be
 403:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the supervising clock. Firmware can configure the CSV to trigger a fault,
 404:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   a reset, or both after specified cycles of the supervising clock.
 405:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 406:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_wco_funcs       Functions
 407:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_wco_structs     Data Structures
 408:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_wco_enums       Enumerated Types
 409:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 410:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_hf          High-Frequency Clocks
 411:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 412:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Multiple high frequency clocks (CLK_HF) are available in the device. For example,
 413:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   PSoC 63 series has five high-frequency root clocks. Each CLK_HF has a particular
 414:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   connection and chip-specific destination on the device.
 415:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 416:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   |Name     |Description                                             |
 417:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   |:--------|:-------------------------------------------------------|
 418:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   |CLK_HF[0]| Root clock for CPUs, PERI, and AHB infrastructure      |
 419:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   |CLK_HF[1]| Root clock for the PDM/PCM and I2S audio subsystem     |
 420:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   |CLK_HF[2]| Root clock for the Serial Memory Interface subsystem   |
 421:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   |CLK_HF[3]| Root clock for USB communications                      |
 422:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   |CLK_HF[4]| Clock output on clk_ext pin (when used as an output)   |
 423:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 424:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_hf.png)
 425:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 426:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Note this is a particular example. The actual tree may vary depending on the device series.
 427:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Consult the Technical Reference Manual for your device for details.
 428:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   
 429:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   High frequency clocks are sourced by path clocks, which should be configured
 430:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   first. An exception to this rule is CLK_HF[0], which cannot be disabled. 
 431:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   This divided clock drives the core processors and the peripherals in the system.
 432:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   In order to update its clock source, CLK_HF[0] source must be selected without
 433:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   disabling the clock.
 434:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 435:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_hf_dist.png)
 436:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 437:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Some devices support a clock supervisor (CSV) for each root clock. These
 438:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   can detect frequency loss, or monitor that the clock frequency stays within
 439:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   a specified range. The possible supervising clocks are IMO, ECO, or ALTHF. 
 440:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Loss detection and frequency monitoring can be enabled or disabled independently.
 441:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Each has its own programmable action that occurs on detection of an error.
 442:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 443:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_hf_funcs    Functions
 444:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_hf_structs  Data Structures
 445:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_hf_enums    Enumerated Types
 446:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 447:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_fast        Fast Clock
 448:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 449:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The fast clock drives the "fast" processor (e.g. Cortex-M4 processor in PSoC 6).
 450:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   This clock is sourced by CLK_HF[0] (\ref group_sysclk_clk_hf "HF Clocks").
 451:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   A divider value of 1~256 can be used to further divide the CLK_HF[0] to a
 452:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   desired clock speed for the processor.
 453:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 454:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_fast.png)
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 12


 455:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 456:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_fast_funcs  Functions
 457:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 458:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_peri        Peripheral Clock
 459:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 460:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The peripheral clock is a divided clock of CLK_HF0 (\ref group_sysclk_clk_hf "HF Clocks").
 461:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   It is the source clock for the \ref group_sysclk_clk_slow, and most active domain
 462:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   peripheral clocks (\ref group_sysclk_clk_peripheral). A divider value of 1~256 
 463:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   can be used to further divide the CLK_HF[0] to a desired clock speed for the peripherals.
 464:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 465:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_peri.png)
 466:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 467:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_peri_funcs  Functions
 468:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 469:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_peripheral  Peripherals Clock Dividers
 470:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 471:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   There are multiple peripheral clock dividers that, in effect, create 
 472:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   multiple separate peripheral clocks. The available dividers vary per device 
 473:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   series. As an example, for the PSoC 63 series there are 29 dividers:
 474:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 475:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - eight 8-bit dividers
 476:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - sixteen 16-bit dividers
 477:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - four fractional 16.5-bit dividers (16 integer bits, 5 fractional bits)
 478:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - one fractional 24.5-bit divider (24 integer bits, 5 fractional bits)
 479:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 480:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 481:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The 8-bit and 16-bit dividers are integer dividers. A divider value of 1 
 482:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   means the output frequency matches the input frequency (that is, there is
 483:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   no change). Otherwise the frequency is divided by the value of the divider.
 484:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   For example, if the input frequency is 50 MHz, and the divider is value 10,
 485:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the output frequency is 5 MHz.
 486:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 487:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The five fractional bits supports further precision in 1/32nd increments. For
 488:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   example, a divider with an integer value of 3 and a fractional value of
 489:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   4 (4/32) results in a divider of 3.125. Fractional dividers are useful when
 490:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   a high-precision clock is required, for example, for a UART/SPI serial
 491:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   interface.
 492:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 493:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_peri_divs.png)
 494:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 495:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Each peripheral can connect to any one of the programmable dividers. A
 496:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   particular peripheral clock divider can drive multiple peripherals.
 497:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   
 498:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The SysClk driver also supports phase aligning two peripheral clock dividers using
 499:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Cy_SysClk_PeriphEnablePhaseAlignDivider(). Alignment works for both integer
 500:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   and fractional dividers. The divider to which a second divider is aligned
 501:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   must already be enabled.
 502:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 503:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_peripheral_funcs Functions
 504:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_peripheral_enums Enumerated Types
 505:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 506:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_slow        Slow Clock
 507:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 508:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The slow clock is the source clock for the "slow" processor (e.g. Cortex-M0+ in PSoC 6).
 509:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   This clock is a divided version of the \ref group_sysclk_clk_peri, which in turn is 
 510:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   a divided version of CLK_HF[0] (\ref group_sysclk_clk_hf "HF Clocks"). A divider 
 511:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   value of 1~256 can be used to further divide the Peri clock to a desired clock speed
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 13


 512:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   for the processor.
 513:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 514:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_slow.png)
 515:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 516:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_slow_funcs  Functions
 517:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 518:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_lf          Low-Frequency Clock
 519:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 520:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The low-frequency clock is the source clock for the \ref group_mcwdt
 521:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   and can be the source clock for \ref group_sysclk_clk_bak, which drives the
 522:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \ref group_rtc.
 523:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   
 524:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The low-frequency clock has three possible source clocks:
 525:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \ref group_sysclk_ilo "ILO", \ref group_sysclk_pilo "PILO", and
 526:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \ref group_sysclk_wco "WCO".
 527:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 528:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_lf.png)
 529:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 530:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_lf_funcs    Functions
 531:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_lf_enums    Enumerated Types
 532:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 533:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_timer       Timer Clock
 534:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 535:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The timer clock can be a source for the alternative clock driving 
 536:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the \ref group_arm_system_timer. It can also be used as a reference clock 
 537:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   for a counter in the \ref group_energy_profiler "Energy Profiler".
 538:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   
 539:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The timer clock is a divided clock of either the IMO or CLK_HF[0]
 540:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   (\ref group_sysclk_clk_hf "HF Clocks").
 541:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 542:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_timer_funcs Functions
 543:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_timer_enums Enumerated Types
 544:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 545:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_pump        Pump Clock
 546:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 547:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The pump clock is a clock source used to provide analog precision in low voltage
 548:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   applications. Depending on the usage scenario, it may be required to drive the
 549:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   internal voltage pump for the Continuous Time Block mini (CTBm) in the analog 
 550:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   subsystem. The pump clock is a divided clock of one of the clock paths 
 551:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   (\ref group_sysclk_path_src).
 552:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 553:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_pump_funcs  Functions
 554:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_pump_enums  Enumerated Types
 555:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 556:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_bak         Backup Domain Clock
 557:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 558:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The backup domain clock drives the \ref group_rtc.
 559:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   This clock has two possible source clocks: \ref group_sysclk_wco "WCO"
 560:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   or the \ref group_sysclk_clk_lf. In turn the low frequency clock is sourced by
 561:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \ref group_sysclk_ilo "ILO", \ref group_sysclk_pilo "PILO", or
 562:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \ref group_sysclk_wco "WCO". Typically the ILO is not suitable as an RTC source,
 563:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   because of its low accuracy. However the ILO does operate in hibernate mode and
 564:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   may be used as an alternative to the WCO with a tradeoff in precision.
 565:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 566:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_bak_funcs   Functions
 567:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_bak_enums   Enumerated Types
 568:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 14


 569:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 570:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 571:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #if !defined(CY_SYSCLK_H)
 572:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define CY_SYSCLK_H
 573:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 574:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #include <stdbool.h>
 575:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #include "cy_device.h"
 576:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #include "cy_device_headers.h"
 577:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #include "cy_syslib.h"
 578:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #include "cy_syspm.h"
 579:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 580:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 581:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #if defined(__cplusplus)
 582:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** extern "C" {
 583:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #endif /* __cplusplus */
 584:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 585:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 586:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_macros
 587:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 588:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 589:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Driver major version */
 590:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define  CY_SYSCLK_DRV_VERSION_MAJOR   2
 591:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Driver minor version */
 592:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define  CY_SYSCLK_DRV_VERSION_MINOR   0
 593:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Sysclk driver identifier */
 594:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define CY_SYSCLK_ID   CY_PDL_DRV_ID(0x12U)
 595:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 596:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_macros */
 597:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 598:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 599:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_returns
 600:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 601:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 602:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Defines general-purpose function return values. */
 603:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
 604:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 605:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_SUCCESS       = 0u, /**< Command completed with no errors */
 606:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_BAD_PARAM     = (CY_SYSCLK_ID | CY_PDL_STATUS_ERROR | 1U), /**< Invalid function inpu
 607:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_TIMEOUT       = (CY_SYSCLK_ID | CY_PDL_STATUS_ERROR | 2U), /**< Timeout occurred */
 608:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_INVALID_STATE = (CY_SYSCLK_ID | CY_PDL_STATUS_ERROR | 3U)  /**< Clock is in an invali
 609:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_sysclk_status_t;
 610:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_returns */
 611:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 612:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \cond INTERNAL */
 613:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* Calculate a / b with rounding to the nearest integer. a and b must have the same sign. */
 614:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define CY_SYSCLK_DIV_ROUND(a, b) (((a) + ((b) / 2u)) / (b))
 615:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* Calculate a / b with rounding up if remainder != 0. a and b must both be positive. */
 616:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define CY_SYSCLK_DIV_ROUNDUP(a, b) ((((a) - 1U) / (b)) + 1U)
 617:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \endcond */
 618:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 619:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 620:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 621:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ===========================    ECO SECTION    ============================ */
 622:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 623:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 624:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 625:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_macros
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 15


 626:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 627:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 628:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 629:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 630:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_ecostatus ECO status
 631:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 632:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Constants used for expressing ECO status.
 633:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 634:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define CY_SYSCLK_ECOSTAT_AMPLITUDE  0UL /**< \brief ECO does not have sufficient amplitude */
 635:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define CY_SYSCLK_ECOSTAT_INACCURATE 1UL /**< \brief ECO may not be meeting accuracy and duty cycle
 636:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define CY_SYSCLK_ECOSTAT_STABLE     2UL /**< \brief ECO has fully stabilized */
 637:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} */
 638:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 639:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_macros */
 640:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 641:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 642:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 643:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_eco_funcs
 644:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 645:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 646:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_EcoConfigure(uint32_t freq, uint32_t cLoad, uint32_t esr, uint32_t 
 647:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_EcoEnable(uint32_t timeoutus);
 648:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_EcoDisable(void);
 649:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint32_t Cy_SysClk_EcoGetStatus(void);
 650:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 651:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
 652:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_EcoDisable
 653:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
 654:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 655:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Disables the external crystal oscillator (ECO). This function should not be
 656:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * called if the ECO is sourcing clkHf[0].
 657:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 658:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
 659:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_EcoDisable
 660:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 661:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
 662:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_EcoDisable(void)
 663:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 664:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     SRSS_CLK_ECO_CONFIG &= (uint32_t)~_VAL2FLD(SRSS_CLK_ECO_CONFIG_ECO_EN, 1U); /* 0 = disable */
 665:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
 666:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 667:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
 668:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_EcoGetStatus
 669:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
 670:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 671:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports the current status of the external crystal oscillator (ECO).
 672:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 673:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return
 674:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_ECOSTAT_AMPLITUDE = ECO does not have sufficient amplitude<br>
 675:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_ECOSTAT_INACCURATE = ECO has sufficient amplitude but may not be meeting accuracy and d
 676:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_ECOSTAT_STABLE = ECO has fully stabilized
 677:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 678:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
 679:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_EcoGetStatus
 680:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 681:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
 682:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint32_t Cy_SysClk_EcoGetStatus(void)
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 16


 683:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 684:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint32_t retVal = (SRSS_CLK_ECO_STATUS & (SRSS_CLK_ECO_STATUS_ECO_OK_Msk | SRSS_CLK_ECO_STATUS_
 685:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     /* if ECO is not ready, just report the ECO_OK bit. Otherwise report 2 = ECO ready */
 686:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return ((0UL == (retVal & SRSS_CLK_ECO_STATUS_ECO_READY_Msk)) ? retVal : CY_SYSCLK_ECOSTAT_STAB
 687:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
 688:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_eco_funcs */
 689:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 690:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 691:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 692:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ====================    INPUT MULTIPLEXER SECTION    ===================== */
 693:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 694:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 695:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_path_src_enums
 696:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 697:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 698:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 699:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Input multiplexer clock sources
 700:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 701:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
 702:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 703:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_IMO    =     0U, /**< Select the IMO as the output of the path mux */
 704:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_EXT    =     1U, /**< Select the EXT as the output of the path mux */
 705:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_ECO    =     2U, /**< Select the ECO as the output of the path mux */
 706:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_ALTHF  =     3U, /**< Select the ALTHF as the output of the path mux.
 707:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            *   Make sure the ALTHF clock source is available on use
 708:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            */
 709:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_DSIMUX =     4U, /**< Select the DSI MUX output as the output of the path 
 710:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_DSI    = 0x100U, /**< Select a DSI signal (0 - 15) as the output of the DS
 711:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            *   Make sure the DSI clock sources are available on use
 712:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            */
 713:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_ILO    = 0x110U, /**< Select the ILO (16) as the output of the DSI mux and
 714:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_WCO    = 0x111U, /**< Select the WCO (17) as the output of the DSI mux and
 715:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_ALTLF  = 0x112U, /**< Select the ALTLF (18) as the output of the DSI mux a
 716:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            *   Make sure the ALTLF clock sources in available on us
 717:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            */
 718:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_PILO   = 0x113U  /**< Select the PILO (19) as the output of the DSI mux an
 719:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            *   Make sure the PILO clock sources in available on use
 720:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            */
 721:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_clkpath_in_sources_t;
 722:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_path_src_enums */
 723:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 724:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 725:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_path_src_funcs
 726:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 727:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 728:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_ClkPathSetSource(uint32_t clkPath, cy_en_clkpath_in_sources_t sourc
 729:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_clkpath_in_sources_t Cy_SysClk_ClkPathGetSource(uint32_t clkPath);
 730:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_path_src_funcs */
 731:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 732:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 733:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 734:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ===========================    FLL SECTION    ============================ */
 735:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 736:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 737:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_fll_enums
 738:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 739:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 17


 740:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** FLL and PLL output mode.
 741:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * See registers CLK_FLL_CONFIG3 and CLK_PLL_CONFIG0, bits BYPASS_SEL.
 742:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 743:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
 744:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 745:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLLPLL_OUTPUT_AUTO   = 0U, /**< Output FLL/PLL input source when not locked, and FLL/
 746:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLLPLL_OUTPUT_AUTO1  = 1U, /**< Same as AUTO */
 747:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLLPLL_OUTPUT_INPUT  = 2U, /**< Output FLL/PLL input source regardless of lock status
 748:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLLPLL_OUTPUT_OUTPUT = 3U  /**< Output FLL/PLL output regardless of lock status. This
 749:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_fll_pll_output_mode_t;
 750:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 751:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** FLL current-controlled oscillator (CCO) frequency ranges.
 752:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * See register CLK_FLL_CONFIG4, bits CCO_RANGE.
 753:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 754:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
 755:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 756:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLL_CCO_RANGE0, /**< Target frequency is in range  48 -  64 MHz. */
 757:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLL_CCO_RANGE1, /**< Target frequency is in range  64 -  85 MHz. */
 758:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLL_CCO_RANGE2, /**< Target frequency is in range  85 - 113 MHz. */
 759:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLL_CCO_RANGE3, /**< Target frequency is in range 113 - 150 MHz. */
 760:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLL_CCO_RANGE4  /**< Target frequency is in range 150 - 200 MHz. */
 761:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_fll_cco_ranges_t;
 762:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_fll_enums */
 763:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 764:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 765:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_fll_structs
 766:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 767:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 768:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Structure containing information for manual configuration of FLL.
 769:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 770:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef struct
 771:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 772:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint32_t                    fllMult;         /**< CLK_FLL_CONFIG  register, FLL_MULT bits */
 773:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint16_t                    refDiv;          /**< CLK_FLL_CONFIG2 register, FLL_REF_DIV bits */
 774:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_fll_cco_ranges_t      ccoRange;        /**< CLK_FLL_CONFIG4 register, CCO_RANGE bits */
 775:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     bool                        enableOutputDiv; /**< CLK_FLL_CONFIG  register, FLL_OUTPUT_DIV bit 
 776:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint16_t                    lockTolerance;   /**< CLK_FLL_CONFIG2 register, LOCK_TOL bits */
 777:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint8_t                     igain;           /**< CLK_FLL_CONFIG3 register, FLL_LF_IGAIN bits *
 778:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint8_t                     pgain;           /**< CLK_FLL_CONFIG3 register, FLL_LF_PGAIN bits *
 779:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint16_t                    settlingCount;   /**< CLK_FLL_CONFIG3 register, SETTLING_COUNT bits
 780:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_fll_pll_output_mode_t outputMode;      /**< CLK_FLL_CONFIG3 register, BYPASS_SEL bits */
 781:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint16_t                    cco_Freq;        /**< CLK_FLL_CONFIG4 register, CCO_FREQ bits */
 782:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_stc_fll_manual_config_t;
 783:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_fll_structs */
 784:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 785:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 786:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_fll_funcs
 787:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 788:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 789:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_FllConfigure(uint32_t inputFreq, uint32_t outputFreq, cy_en_fll_pll
 790:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_FllManualConfigure(const cy_stc_fll_manual_config_t *config);
 791:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** void Cy_SysClk_FllGetConfiguration(cy_stc_fll_manual_config_t *config);
 792:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_FllEnable(uint32_t timeoutus);
 793:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_FllLocked(void);
 794:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_FllDisable(void);
 795:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 796:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 18


 797:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_FllLocked
 798:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
 799:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 800:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports whether the FLL is locked first time during FLL starting.
 801:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Intended to be used with \ref Cy_SysClk_FllEnable with zero timeout.
 802:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 803:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return 
 804:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * false = not locked<br>
 805:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * true = locked
 806:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 807:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note
 808:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The unlock occurrence may appear during FLL normal operation, so this function 
 809:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * is not recommended to check the FLL normal operation stability.
 810:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 811:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
 812:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_FllLocked
 813:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 814:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
 815:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_FllLocked(void)
 816:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 817:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (_FLD2BOOL(SRSS_CLK_FLL_STATUS_LOCKED, SRSS_CLK_FLL_STATUS));
 818:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
 819:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 820:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 821:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
 822:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_FllDisable
 823:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
 824:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 825:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Disables the FLL and the CCO.
 826:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 827:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_sysclk_status_t
 828:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 829:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
 830:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref SystemCoreClockUpdate after this function calling 
 831:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * if it affects the CLK_HF0 frequency.
 832:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 833:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note
 834:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates after calling this function if
 835:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * the FLL is the source of CLK_HF0 and the CLK_HF0 frequency is decreasing.
 836:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 837:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
 838:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_FllDisable
 839:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 840:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
 841:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_FllDisable(void)
 842:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 843:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_REG32_CLR_SET(SRSS_CLK_FLL_CONFIG3, SRSS_CLK_FLL_CONFIG3_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT
 844:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     SRSS_CLK_FLL_CONFIG  &= ~SRSS_CLK_FLL_CONFIG_FLL_ENABLE_Msk;
 845:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     SRSS_CLK_FLL_CONFIG4 &= ~SRSS_CLK_FLL_CONFIG4_CCO_ENABLE_Msk;
 846:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return CY_SYSCLK_SUCCESS;
 847:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
 848:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_fll_funcs */
 849:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 850:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 851:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 852:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ===========================    PLL SECTION    ============================ */
 853:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 19


 854:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 855:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_pll_structs
 856:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 857:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 858:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Structure containing information for configuration of a PLL.
 859:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 860:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef struct
 861:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 862:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint32_t                    inputFreq;  /**< frequency of PLL source, in Hz */
 863:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint32_t                    outputFreq; /**< frequency of PLL output, in Hz */
 864:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     bool                        lfMode;     /**< CLK_PLL_CONFIG register, PLL_LF_MODE bit */
 865:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_fll_pll_output_mode_t outputMode; /**< CLK_PLL_CONFIG register, BYPASS_SEL bits */
 866:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_stc_pll_config_t;
 867:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 868:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Structure containing information for manual configuration of a PLL.
 869:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 870:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef struct
 871:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 872:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint8_t                     feedbackDiv;  /**< CLK_PLL_CONFIG register, FEEDBACK_DIV (P) bits *
 873:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint8_t                     referenceDiv; /**< CLK_PLL_CONFIG register, REFERENCE_DIV (Q) bits 
 874:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint8_t                     outputDiv;    /**< CLK_PLL_CONFIG register, OUTPUT_DIV bits */
 875:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     bool                        lfMode;       /**< CLK_PLL_CONFIG register, PLL_LF_MODE bit */
 876:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_fll_pll_output_mode_t outputMode;   /**< CLK_PLL_CONFIG register, BYPASS_SEL bits */
 877:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_stc_pll_manual_config_t;
 878:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_pll_structs */
 879:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 880:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 881:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_pll_funcs
 882:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 883:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 884:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_PllConfigure(uint32_t clkPath, const cy_stc_pll_config_t *config);
 885:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_PllManualConfigure(uint32_t clkPath, const cy_stc_pll_manual_config
 886:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_PllGetConfiguration(uint32_t clkPath, cy_stc_pll_manual_config_t *c
 887:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_PllEnable(uint32_t clkPath, uint32_t timeoutus);
 888:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_PllLocked(uint32_t clkPath);
 889:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_PllLostLock(uint32_t clkPath);
 890:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_PllDisable(uint32_t clkPath);
 891:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 892:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
 893:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PllLocked
 894:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
 895:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 896:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports whether or not the selected PLL is locked.
 897:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 898:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkPath Selects which PLL to check. 1 is the first PLL; 0 is invalid.
 899:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 900:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return 
 901:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * false = not locked<br>
 902:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * true = locked
 903:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 904:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
 905:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PllLocked
 906:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 907:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
 908:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_PllLocked(uint32_t clkPath)
 909:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 910:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     clkPath--; /* to correctly access PLL config and status registers structures */
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 20


 911:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_ASSERT_L1(clkPath < CY_SRSS_NUM_PLL);
 912:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (_FLD2BOOL(SRSS_CLK_PLL_STATUS_LOCKED, SRSS_CLK_PLL_STATUS[clkPath]));
 913:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
 914:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 915:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
 916:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PllLostLock
 917:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
 918:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 919:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports whether or not the selected PLL lost its lock since the last time this
 920:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * function was called. Clears the lost lock indicator.
 921:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 922:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkPath Selects which PLL to check. 1 is the first PLL; 0 is invalid.
 923:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 924:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return 
 925:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * false = did not lose lock<br>
 926:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * true = lost lock
 927:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 928:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
 929:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PllLostLock
 930:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 931:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
 932:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_PllLostLock(uint32_t clkPath)
 933:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 934:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     clkPath--; /* to correctly access PLL config and status registers structures */
 935:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_ASSERT_L1(clkPath < CY_SRSS_NUM_PLL);
 936:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     bool retVal = _FLD2BOOL(SRSS_CLK_PLL_STATUS_UNLOCK_OCCURRED, SRSS_CLK_PLL_STATUS[clkPath]);
 937:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     /* write a 1 to clear the unlock occurred bit */
 938:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     SRSS_CLK_PLL_STATUS[clkPath] = SRSS_CLK_PLL_STATUS_UNLOCK_OCCURRED_Msk;
 939:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
 940:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
 941:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 942:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
 943:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PllDisable
 944:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
 945:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 946:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Disables the selected PLL.
 947:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 948:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkPath Selects which PLL to disable. 1 is the first PLL; 0 is invalid.
 949:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 950:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return Error / status code:<br>
 951:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_SUCCESS - PLL successfully disabled<br>
 952:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_BAD_PARAM - invalid clock path number
 953:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 954:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
 955:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref SystemCoreClockUpdate after this function calling 
 956:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * if it affects the CLK_HF0 frequency.
 957:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 958:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note
 959:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates before calling this function if
 960:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * the PLL is the source of CLK_HF0 and the CLK_HF0 frequency is increasing.
 961:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 962:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note
 963:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates after calling this function if
 964:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * the PLL is the source of CLK_HF0 and the CLK_HF0 frequency is decreasing.
 965:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 966:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
 967:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PllDisable
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 21


 968:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 969:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
 970:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_PllDisable(uint32_t clkPath)
 971:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 972:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
 973:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     clkPath--; /* to correctly access PLL config and status registers structures */
 974:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (clkPath < CY_SRSS_NUM_PLL)
 975:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
 976:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         /* First bypass PLL */
 977:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         CY_REG32_CLR_SET(SRSS_CLK_PLL_CONFIG[clkPath], SRSS_CLK_PLL_CONFIG_BYPASS_SEL, CY_SYSCLK_FL
 978:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         /* Wait at least 6 PLL clock cycles */
 979:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         Cy_SysLib_DelayUs(1U);
 980:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         /* And now disable the PLL itself */
 981:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         SRSS_CLK_PLL_CONFIG[clkPath] &= ~SRSS_CLK_PLL_CONFIG_ENABLE_Msk;
 982:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         retVal = CY_SYSCLK_SUCCESS;
 983:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
 984:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
 985:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
 986:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_pll_funcs */
 987:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 988:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 989:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 990:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ===========================    ILO SECTION    ============================ */
 991:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 992:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 993:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_ilo_funcs
 994:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 995:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 996:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_IloEnable(void);
 997:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_IloDisable(void);
 998:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_IloHibernateOn(bool on);
 999:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1000:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1001:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_IloEnable
1002:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1003:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1004:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Enables the ILO.
1005:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1006:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note The watchdog timer (WDT) must be unlocked before calling this function.
1007:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1008:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1009:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_IloEnable
1010:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1011:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1012:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_IloEnable(void)
1013:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1014:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     SRSS_CLK_ILO_CONFIG |= SRSS_CLK_ILO_CONFIG_ENABLE_Msk;
1015:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1016:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1017:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1018:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_IloDisable
1019:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1020:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1021:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Disables the ILO. ILO can't be disabled if WDT is enabled.
1022:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1023:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return Error / status code:<br>
1024:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_SUCCESS - ILO successfully disabled<br>
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 22


1025:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_INVALID_STATE - Cannot disable the ILO if the WDT is enabled.
1026:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1027:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note The watchdog timer (WDT) must be unlocked before calling this function.
1028:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Do not call this function if the WDT is enabled, because the WDT is clocked by
1029:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * the ILO.
1030:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1031:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1032:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_IloDisable
1033:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1034:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1035:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_IloDisable(void)
1036:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1037:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_INVALID_STATE;
1038:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (!_FLD2BOOL(SRSS_WDT_CTL_WDT_EN, SRSS_WDT_CTL)) /* if disabled */
1039:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1040:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         SRSS_CLK_ILO_CONFIG &= ~SRSS_CLK_ILO_CONFIG_ENABLE_Msk;
1041:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         retVal = CY_SYSCLK_SUCCESS;
1042:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1043:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return retVal;
1044:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1045:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1046:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1047:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_IloHibernateOn
1048:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1049:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1050:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Controls whether the ILO stays on during a hibernate, or through an XRES or
1051:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * brown-out detect (BOD) event.
1052:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1053:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param on
1054:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * true = ILO stays on during hibernate or across XRES/BOD.<br> 
1055:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * false = ILO turns off for hibernate or XRES/BOD.
1056:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1057:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note Writes to the register/bit are ignored if the watchdog (WDT) is locked.
1058:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1059:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1060:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_IloHibernateOn
1061:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1062:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1063:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_IloHibernateOn(bool on)
1064:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1065:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_REG32_CLR_SET(SRSS_CLK_ILO_CONFIG, SRSS_CLK_ILO_CONFIG_ILO_BACKUP, (uint32_t)on);
1066:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1067:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_ilo_funcs */
1068:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1069:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1070:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1071:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ===========================    PILO SECTION    =========================== */
1072:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1073:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1074:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_pilo_funcs
1075:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1076:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1077:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_PiloEnable(void);
1078:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_PiloDisable(void);
1079:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_PiloSetTrim(uint32_t trimVal);
1080:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint32_t Cy_SysClk_PiloGetTrim(void);
1081:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 23


1082:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1083:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PiloEnable
1084:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1085:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1086:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Enables the PILO. 
1087:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1088:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note This function blocks for 1 millisecond between enabling the PILO and 
1089:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * releasing the PILO reset.
1090:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1091:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1092:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PiloEnable
1093:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1094:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1095:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_PiloEnable(void)
1096:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1097:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     SRSS_CLK_PILO_CONFIG |= _VAL2FLD(SRSS_CLK_PILO_CONFIG_PILO_EN, 1U); /* 1 = enable */
1098:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     Cy_SysLib_Delay(1U/*msec*/);
1099:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     /* release the reset and enable clock output */
1100:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     SRSS_CLK_PILO_CONFIG |= SRSS_CLK_PILO_CONFIG_PILO_RESET_N_Msk |
1101:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                             SRSS_CLK_PILO_CONFIG_PILO_CLK_EN_Msk;
1102:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1103:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1104:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1105:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PiloDisable
1106:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1107:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1108:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Disables the PILO.
1109:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1110:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1111:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PiloDisable
1112:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1113:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1114:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_PiloDisable(void)
1115:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1116:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     /* Clear PILO_EN, PILO_RESET_N, and PILO_CLK_EN bitfields. This disables the
1117:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****        PILO and holds the PILO in a reset state. */
1118:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     SRSS_CLK_PILO_CONFIG &= (uint32_t)~(SRSS_CLK_PILO_CONFIG_PILO_EN_Msk      |
1119:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                         SRSS_CLK_PILO_CONFIG_PILO_RESET_N_Msk |
1120:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                         SRSS_CLK_PILO_CONFIG_PILO_CLK_EN_Msk);
1121:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1122:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1123:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1124:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PiloSetTrim
1125:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1126:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1127:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Sets the PILO trim bits, which adjusts the PILO frequency. This is typically
1128:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * done after measuring the PILO frequency; see \ref Cy_SysClk_StartClkMeasurementCounters().
1129:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1130:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1131:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PiloSetTrim
1132:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1133:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1134:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_PiloSetTrim(uint32_t trimVal)
1135:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1136:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_REG32_CLR_SET(SRSS_CLK_PILO_CONFIG, SRSS_CLK_PILO_CONFIG_PILO_FFREQ, trimVal);
1137:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1138:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 24


1139:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1140:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PiloGetTrim
1141:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1142:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1143:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports the current PILO trim bits value.
1144:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1145:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1146:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Refer to the Cy_SysClk_PiloSetTrim() function usage.
1147:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1148:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1149:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint32_t Cy_SysClk_PiloGetTrim(void)
1150:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1151:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (_FLD2VAL(SRSS_CLK_PILO_CONFIG_PILO_FFREQ, SRSS_CLK_PILO_CONFIG));
1152:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1153:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_pilo_funcs */
1154:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1155:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1156:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1157:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ====================    CLOCK MEASUREMENT SECTION    ===================== */
1158:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1159:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1160:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_calclk_enums
1161:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1162:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1163:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Defines all possible clock sources. */
1164:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1165:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1166:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_NC =            0U,
1167:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_ILO =           1U,
1168:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_WCO =           2U,
1169:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_BAK =           3U,
1170:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_ALTLF =         4U,
1171:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_LFCLK =         5U,
1172:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_IMO =           6U,
1173:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PILO =          8U,
1174:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_FAST_CLKS =     0x100U,
1175:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_ECO =           0x101U,
1176:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_EXT =           0x102U,
1177:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_ALTHF =         0x103U,
1178:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_TIMERCLK =      0x104U,
1179:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH_CLKS =     0x500U,
1180:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH0 =         0x500U,
1181:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH1 =         0x501U,
1182:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH2 =         0x502U,
1183:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH3 =         0x503U,
1184:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH4 =         0x504U,
1185:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH5 =         0x505U,
1186:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH6 =         0x506U,
1187:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH7 =         0x507U,
1188:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH8 =         0x508U,
1189:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH9 =         0x509U,
1190:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH10 =        0x50AU,
1191:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH11 =        0x50BU,
1192:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH12 =        0x50CU,
1193:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH13 =        0x50DU,
1194:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH14 =        0x50EU,
1195:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH15 =        0x50FU,
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 25


1196:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHFS =        0x600U,
1197:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF0 =        0x600U,
1198:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF1 =        0x601U,
1199:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF2 =        0x602U,
1200:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF3 =        0x603U,
1201:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF4 =        0x604U,
1202:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF5 =        0x605U,
1203:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF6 =        0x606U,
1204:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF7 =        0x607U,
1205:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF8 =        0x608U,
1206:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF9 =        0x609U,
1207:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF10 =       0x60AU,
1208:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF11 =       0x60BU,
1209:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF12 =       0x60CU,
1210:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF13 =       0x60DU,
1211:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF14 =       0x60EU,
1212:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF15 =       0x60FU,
1213:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_LAST_CLK =      0x610U
1214:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_meas_clks_t;
1215:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_calclk_enums */
1216:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1217:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1218:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_calclk_funcs
1219:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1220:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1221:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_StartClkMeasurementCounters(cy_en_meas_clks_t clock1, uint32_t coun
1222:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_ClkMeasurementCountersDone(void);
1223:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** uint32_t Cy_SysClk_ClkMeasurementCountersGetFreq(bool measuredClock, uint32_t refClkFreq);
1224:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1225:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1226:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkMeasurementCountersDone
1227:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1228:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1229:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Checks if clock measurement counting is done, that is, counter1 has counted down
1230:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * to zero. Call \ref Cy_SysClk_StartClkMeasurementCounters() before calling this function.
1231:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1232:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return Status of calibration counters:<br>
1233:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * true = done<br>
1234:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * false = not done
1235:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1236:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1237:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Refer to the Cy_SysClk_StartClkMeasurementCounters() function usage.
1238:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1239:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1240:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_ClkMeasurementCountersDone(void)
1241:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1242:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (_FLD2BOOL(SRSS_CLK_CAL_CNT1_CAL_COUNTER_DONE, SRSS_CLK_CAL_CNT1));
1243:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1244:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_calclk_funcs */
1245:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1246:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1247:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1248:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ==========================    TRIM SECTION    ============================ */
1249:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1250:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1251:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_trim_funcs
1252:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 26


1253:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1254:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** int32_t Cy_SysClk_IloTrim(uint32_t iloFreq);
1255:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** int32_t Cy_SysClk_PiloTrim(uint32_t piloFreq);
1256:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_trim_funcs */
1257:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1258:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1259:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1260:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ======================    POWER MANAGEMENT SECTION    ==================== */
1261:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1262:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1263:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_pm_funcs
1264:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1265:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1266:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_syspm_status_t Cy_SysClk_DeepSleepCallback(cy_stc_syspm_callback_params_t *callbackParams, cy
1267:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_pm_funcs */
1268:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1269:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1270:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1271:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ===========================    WCO SECTION    ============================ */
1272:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1273:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1274:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_wco_enums
1275:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1276:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1277:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** WCO bypass modes */
1278:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1279:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1280:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_WCO_NOT_BYPASSED = 0u, /**< WCO is not bypassed crystal is used */
1281:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_WCO_BYPASSED = 1U      /**< WCO is bypassed external clock must be supplied  on XTAL 
1282:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_wco_bypass_modes_t;
1283:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1284:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** WCO CSV supervisor clock selections */
1285:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1286:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1287:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_WCO_CSV_SUPERVISOR_ILO,   /**< WCO CSV supervisor clock source is the ILO */
1288:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_WCO_CSV_SUPERVISOR_ALTLF, /**< WCO CSV supervisor clock source is the alternate low-f
1289:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_WCO_CSV_SUPERVISOR_PILO   /**< WCO CSV supervisor clock source is the PILO */
1290:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_wco_csv_supervisor_clock_t;
1291:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1292:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1293:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Clock supervisor clock loss window. There must be one clock of the supervised
1294:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * clock within this many clocks of the supervising clock.
1295:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * See registers CLK_CSV_HF_CTL and CLK_CSV_WCO_CTL, bitfield CSV_LOSS_WINDOW.
1296:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1297:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1298:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1299:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_LOSS_4_CYCLES =   0u, /**< 1 clock must be seen within 4 cycles of the supervisin
1300:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_LOSS_8_CYCLES =   1U, /**< 1 clock must be seen within 8 cycles of the supervisin
1301:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_LOSS_16_CYCLES =  2u, /**< 1 clock must be seen within 16 cycles of the supervisi
1302:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_LOSS_32_CYCLES =  3u, /**< 1 clock must be seen within 32 cycles of the supervisi
1303:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_LOSS_64_CYCLES =  4u, /**< 1 clock must be seen within 64 cycles of the supervisi
1304:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_LOSS_128_CYCLES = 5u, /**< 1 clock must be seen within 128 cycles of the supervis
1305:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_LOSS_256_CYCLES = 6u, /**< 1 clock must be seen within 256 cycles of the supervis
1306:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_LOSS_512_CYCLES = 7u  /**< 1 clock must be seen within 512 cycles of the supervis
1307:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_csv_loss_window_t;
1308:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1309:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 27


1310:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Clock supervisor error actions. See register CLK_CSV_HF_CTL[CSV_FREQ_ACTION and CSV_LOSS_ACTION].
1311:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1312:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1313:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1314:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_ERROR_IGNORE = 0u,     /**< Ignore the error reported by the clock supervisor. */
1315:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_ERROR_FAULT = 1U,      /**< Trigger a fault when an error is reported by the cloc
1316:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_ERROR_RESET = 2u,      /**< Trigger a reset when an error is reported by the cloc
1317:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_ERROR_FAULT_RESET = 3u /**< Trigger a fault then reset when an error is reported 
1318:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_csv_error_actions_t;
1319:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_wco_enums */
1320:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1321:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1322:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_wco_structs
1323:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1324:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1325:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1326:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * This structure is used to configure the clock supervisor for the WCO.
1327:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1328:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef struct
1329:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1330:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_wco_csv_supervisor_clock_t supervisorClock; /**< supervisor clock selection */
1331:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     bool enableLossDetection;                         /**< 1= enabled, 0= disabled. Note that if lo
1332:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_csv_loss_window_t lossWindow;               /**< \ref cy_en_csv_loss_window_t */
1333:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_csv_error_actions_t lossAction;             /**< \ref cy_en_csv_error_actions_t */
1334:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_stc_wco_csv_config_t;
1335:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_wco_structs */
1336:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1337:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1338:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_wco_funcs
1339:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1340:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1341:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_WcoEnable(uint32_t timeoutus);
1342:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_WcoOkay(void);
1343:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_WcoDisable(void);
1344:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_WcoBypass(cy_en_wco_bypass_modes_t bypass);
1345:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1346:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1347:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1348:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_WcoEnable
1349:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1350:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1351:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Enables the WCO.
1352:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1353:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param timeoutus amount of time in microseconds to wait for the WCO to be ready.
1354:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * If WCO is not ready, WCO is stopped. To avoid waiting for WCO ready set this to 0,
1355:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * and manually check if WCO is okay using \ref Cy_SysClk_WcoOkay.
1356:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1357:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return Error / status code:<br>
1358:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_SUCCESS - WCO successfully enabled<br>
1359:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_TIMEOUT - Timeout waiting for WCO to stabilize
1360:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1361:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1362:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_WcoEnable
1363:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1364:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1365:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_WcoEnable(uint32_t timeoutus)
1366:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 28


1367:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t rtnval = CY_SYSCLK_TIMEOUT;
1368:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1369:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     /* first set the WCO enable bit */
1370:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     BACKUP_CTL |= BACKUP_CTL_WCO_EN_Msk;
1371:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1372:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     /* now do the timeout wait for STATUS, bit WCO_OK */
1373:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     for (; (Cy_SysClk_WcoOkay() == false) && (0UL != timeoutus); timeoutus--)
1374:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1375:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         Cy_SysLib_DelayUs(1U);
1376:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1377:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (0UL != timeoutus)
1378:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1379:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         rtnval = CY_SYSCLK_SUCCESS;
1380:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1381:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1382:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (rtnval);
1383:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1384:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1385:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1386:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_WcoOkay
1387:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1388:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1389:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports the status of the WCO_OK bit.
1390:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1391:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return 
1392:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * true = okay<br>
1393:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * false = not okay
1394:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1395:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1396:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_WcoOkay
1397:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1398:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1399:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_WcoOkay(void)
1400:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1401:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (_FLD2BOOL(BACKUP_STATUS_WCO_OK, BACKUP_STATUS));
1402:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1403:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1404:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1405:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_WcoDisable
1406:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1407:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1408:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Disables the WCO.
1409:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1410:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1411:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_WcoDisable
1412:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1413:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1414:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_WcoDisable(void)
1415:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1416:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     BACKUP_CTL &= (uint32_t)~BACKUP_CTL_WCO_EN_Msk;
1417:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1418:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1419:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1420:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_WcoBypass
1421:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1422:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1423:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Sets whether the WCO is bypassed or not. If it is bypassed, then a 32-kHz clock
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 29


1424:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * must be provided on the wco_out pin.
1425:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1426:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param bypass \ref cy_en_wco_bypass_modes_t
1427:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1428:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1429:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_WcoBypass
1430:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1431:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1432:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_WcoBypass(cy_en_wco_bypass_modes_t bypass)
1433:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1434:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_REG32_CLR_SET(BACKUP_CTL, BACKUP_CTL_WCO_BYPASS, bypass);
1435:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1436:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_wco_funcs */
1437:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1438:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1439:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1440:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* =========================    clkHf[n] SECTION    ========================= */
1441:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1442:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1443:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_clk_hf_enums
1444:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1445:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1446:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1447:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Selects which clkHf input, or root mux, to configure.
1448:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * See CLK_ROOT_SELECT registers, bits ROOT_MUX.
1449:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Used with functions \ref Cy_SysClk_ClkHfSetSource and \ref Cy_SysClk_ClkHfGetSource.
1450:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1451:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1452:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1453:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH0  = 0U,  /**< clkHf input is Clock Path 0 */
1454:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH1  = 1U,  /**< clkHf input is Clock Path 1 */
1455:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH2  = 2U,  /**< clkHf input is Clock Path 2 */
1456:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH3  = 3U,  /**< clkHf input is Clock Path 3 */
1457:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH4  = 4U,  /**< clkHf input is Clock Path 4 */
1458:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH5  = 5U,  /**< clkHf input is Clock Path 5 */
1459:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH6  = 6U,  /**< clkHf input is Clock Path 6 */
1460:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH7  = 7U,  /**< clkHf input is Clock Path 7 */
1461:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH8  = 8U,  /**< clkHf input is Clock Path 8 */
1462:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH9  = 9U,  /**< clkHf input is Clock Path 9 */
1463:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH10 = 10U, /**< clkHf input is Clock Path 10 */
1464:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH11 = 11U, /**< clkHf input is Clock Path 11 */
1465:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH12 = 12U, /**< clkHf input is Clock Path 12 */
1466:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH13 = 13U, /**< clkHf input is Clock Path 13 */
1467:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH14 = 14U, /**< clkHf input is Clock Path 14 */
1468:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH15 = 15U, /**< clkHf input is Clock Path 15 */
1469:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_clkhf_in_sources_t;
1470:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1471:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1472:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1473:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * clkHf divider values. See CLK_ROOT_SELECT registers, bits ROOT_DIV.
1474:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Used with functions \ref Cy_SysClk_ClkHfSetDivider and \ref Cy_SysClk_ClkHfGetDivider.
1475:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1476:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1477:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1478:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_NO_DIVIDE   = 0U,    /**< don't divide clkHf. */
1479:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_DIVIDE_BY_2 = 1U,    /**< divide clkHf by 2 */
1480:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_DIVIDE_BY_4 = 2U,    /**< divide clkHf by 4 */
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 30


1481:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_DIVIDE_BY_8 = 3U     /**< divide clkHf by 8 */
1482:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_clkhf_dividers_t;
1483:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1484:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1485:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * clkHf clock supervisor input sources. See register CLK_CSV_HF_CTL[CSV_MUX].
1486:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1487:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1488:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1489:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_CSV_SUPERVISOR_IMO   = 0U,  /**< Supervising clock is the IMO. */
1490:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_CSV_SUPERVISOR_EXT   = 1U,  /**< Supervising clock is the external clock */
1491:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_CSV_SUPERVISOR_ALTHF = 2U   /**< Supervising clock is clk_althf */
1492:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_clkhf_csv_supervisor_clock_t;
1493:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_clk_hf_enums */
1494:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1495:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1496:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_clk_hf_structs
1497:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{SupervisingWindow
1498:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1499:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1500:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * This structure is used to configure the clock supervisor for clkHf.
1501:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1502:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef struct
1503:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1504:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_clkhf_csv_supervisor_clock_t supervisorClock; /**< \ref cy_en_clkhf_csv_supervisor_clock_
1505:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint16_t supervisingWindow;                         /**< Number of supervising clock cycles */
1506:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     bool enableFrequencyFaultDetection;                 /**< 1= enabled, 0= disabled */
1507:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint16_t frequencyLowerLimit;                       /**< Lowest frequency in kHz that supervise
1508:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint16_t frequencyUpperLimit;                       /**< Highest frequency in kHz that supervis
1509:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_csv_error_actions_t frequencyAction;          /**< \ref cy_en_csv_error_actions_t */
1510:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     bool enableLossDetection;                           /**< 1= enabled, 0= disabled */
1511:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_csv_loss_window_t lossWindow;                 /**< \ref cy_en_csv_loss_window_t */
1512:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_csv_error_actions_t lossAction;               /**< \ref cy_en_csv_error_actions_t */
1513:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_stc_clkhf_csv_config_t;
1514:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_clk_hf_structs */
1515:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1516:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1517:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_clk_hf_funcs
1518:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1519:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1520:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_ClkHfEnable(uint32_t clkHf);
1521:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_ClkHfDisable(uint32_t clkHf);
1522:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_ClkHfSetSource(uint32_t clkHf, cy_en_clkhf_in_sourc
1523:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_clkhf_in_sources_t Cy_SysClk_ClkHfGetSource(uint32_t clkHf);
1524:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_ClkHfSetDivider(uint32_t clkHf, cy_en_clkhf_divider
1525:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_clkhf_dividers_t Cy_SysClk_ClkHfGetDivider(uint32_t clkHf);
1526:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1527:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1528:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1529:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkHfEnable
1530:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1531:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1532:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Enables the selected clkHf.
1533:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1534:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkHf Selects which clkHf to enable.
1535:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1536:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_sysclk_status_t
1537:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 31


1538:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1539:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkHfEnable
1540:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1541:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1542:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_ClkHfEnable(uint32_t clkHf)
1543:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1544:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
1545:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (clkHf < CY_SRSS_NUM_HFROOT)
1546:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1547:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         SRSS_CLK_ROOT_SELECT[clkHf] |= SRSS_CLK_ROOT_SELECT_ENABLE_Msk;
1548:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         retVal = CY_SYSCLK_SUCCESS;
1549:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1550:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
1551:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1552:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1553:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1554:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkHfDisable
1555:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1556:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1557:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Disables the selected clkHf.
1558:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1559:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkHf Selects which clkHf to enable.
1560:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1561:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_sysclk_status_t
1562:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1563:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note clkHf[0] cannot be disabled.
1564:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1565:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1566:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkHfDisable
1567:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1568:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1569:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_ClkHfDisable(uint32_t clkHf)
1570:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1571:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
1572:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if ((0UL < clkHf) /* prevent CLK_HF0 disabling */
1573:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****            && (clkHf < CY_SRSS_NUM_HFROOT))
1574:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1575:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         SRSS_CLK_ROOT_SELECT[clkHf] &= ~SRSS_CLK_ROOT_SELECT_ENABLE_Msk;
1576:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         retVal = CY_SYSCLK_SUCCESS;
1577:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1578:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
1579:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1580:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1581:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1582:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkHfSetSource
1583:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1584:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1585:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Selects the source of the selected clkHf.
1586:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1587:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkHf selects which clkHf mux to configure.
1588:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1589:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param source \ref cy_en_clkhf_in_sources_t
1590:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1591:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_sysclk_status_t
1592:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1593:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
1594:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref SystemCoreClockUpdate after this function calling 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 32


1595:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * if it affects the CLK_HF0 frequency.
1596:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1597:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
1598:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates before calling this function if
1599:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CLK_HF0 frequency is increasing.
1600:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1601:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note
1602:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates after calling this function if
1603:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CLK_HF0 frequency is decreasing.
1604:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1605:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1606:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkHfSetSource
1607:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1608:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1609:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_ClkHfSetSource(uint32_t clkHf, cy_en_clkhf_in_sourc
1610:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1611:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
1612:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if ((clkHf < CY_SRSS_NUM_HFROOT) && (source <= CY_SYSCLK_CLKHF_IN_CLKPATH15))
1613:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1614:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         CY_REG32_CLR_SET(SRSS_CLK_ROOT_SELECT[clkHf], SRSS_CLK_ROOT_SELECT_ROOT_MUX, source);
1615:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         retVal = CY_SYSCLK_SUCCESS;
1616:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1617:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
1618:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1619:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1620:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1621:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkHfGetSource
1622:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1623:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1624:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports the source of the selected clkHf.
1625:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1626:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkHf selects which clkHf to get the source of.
1627:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1628:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_clkhf_in_sources_t
1629:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1630:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1631:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkHfSetSource
1632:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1633:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1634:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_clkhf_in_sources_t Cy_SysClk_ClkHfGetSource(uint32_t clkHf)
1635:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1636:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_ASSERT_L1(clkHf < CY_SRSS_NUM_HFROOT);
1637:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (cy_en_clkhf_in_sources_t)(_FLD2VAL(SRSS_CLK_ROOT_SELECT_ROOT_MUX, SRSS_CLK_ROOT_SELECT[
1638:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1639:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1640:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1641:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkHfSetDivider
1642:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1643:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1644:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Sets the pre-divider for a clkHf.
1645:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1646:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkHf selects which clkHf divider to configure.
1647:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1648:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param divider \ref cy_en_clkhf_dividers_t
1649:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1650:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_sysclk_status_t
1651:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 33


1652:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note Also call \ref Cy_SysClk_ClkHfSetSource to set the clkHf source.
1653:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1654:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
1655:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref SystemCoreClockUpdate after this function calling 
1656:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * if it affects the CLK_HF0 frequency.
1657:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1658:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
1659:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates before calling this function if
1660:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CLK_HF0 frequency is increasing.
1661:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1662:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note
1663:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates after calling this function if
1664:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CLK_HF0 frequency is decreasing.
1665:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1666:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1667:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkHfSetDivider
1668:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1669:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1670:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_ClkHfSetDivider(uint32_t clkHf, cy_en_clkhf_divider
1671:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1672:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
1673:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if ((clkHf < CY_SRSS_NUM_HFROOT) && (divider <= CY_SYSCLK_CLKHF_DIVIDE_BY_8))
1674:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1675:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         CY_REG32_CLR_SET(SRSS_CLK_ROOT_SELECT[clkHf], SRSS_CLK_ROOT_SELECT_ROOT_DIV, divider);
1676:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         retVal = CY_SYSCLK_SUCCESS;
1677:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1678:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
1679:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1680:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1681:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1682:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkHfGetDivider
1683:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1684:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1685:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports the pre-divider value for a clkHf.
1686:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1687:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkHf selects which clkHf to check divider of.
1688:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1689:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_clkhf_dividers_t
1690:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1691:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1692:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkHfSetDivider
1693:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1694:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1695:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_clkhf_dividers_t Cy_SysClk_ClkHfGetDivider(uint32_t clkHf)
1696:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1697:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_ASSERT_L1(clkHf < CY_SRSS_NUM_HFROOT);
1698:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (cy_en_clkhf_dividers_t)(_FLD2VAL(SRSS_CLK_ROOT_SELECT_ROOT_DIV, SRSS_CLK_ROOT_SELECT[cl
1699:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1700:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_clk_hf_funcs */
1701:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1702:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1703:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1704:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* =========================    clk_fast SECTION    ========================= */
1705:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1706:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1707:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_clk_fast_funcs
1708:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 34


1709:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1710:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_ClkFastSetDivider(uint8_t divider);
1711:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint8_t Cy_SysClk_ClkFastGetDivider(void);
1712:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1713:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1714:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkFastSetDivider
1715:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1716:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1717:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Sets the clock divider for the fast clock, which sources the main processor.
1718:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The source of this divider is clkHf[0].
1719:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1720:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param divider divider value between 0 and 255.
1721:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Causes integer division of (divider value + 1), or division by 1 to 256.
1722:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1723:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
1724:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref SystemCoreClockUpdate after this function calling.
1725:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1726:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
1727:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates before calling this function if
1728:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CLK_FAST frequency is increasing.
1729:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1730:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note
1731:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates after calling this function if
1732:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CLK_FAST frequency is decreasing.
1733:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1734:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1735:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkFastSetDivider
1736:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1737:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1738:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_ClkFastSetDivider(uint8_t divider)
1739:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1740:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_REG32_CLR_SET(CPUSS_CM4_CLOCK_CTL, CPUSS_CM4_CLOCK_CTL_FAST_INT_DIV, divider);
1741:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1742:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1743:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1744:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkFastGetDivider
1745:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1746:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1747:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Returns the clock divider for the fast clock.
1748:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1749:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return The divider value for the fast clock.
1750:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The integer division done is by (divider value + 1), or division by 1 to 256.
1751:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1752:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1753:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkFastSetDivider
1754:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1755:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1756:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint8_t Cy_SysClk_ClkFastGetDivider(void)
1757:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1758:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return ((uint8_t)_FLD2VAL(CPUSS_CM4_CLOCK_CTL_FAST_INT_DIV, CPUSS_CM4_CLOCK_CTL));
1759:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1760:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_clk_fast_funcs */
1761:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1762:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1763:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1764:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================    clk_peri SECTION    ========================== */
1765:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 35


1766:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1767:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_clk_peri_funcs
1768:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1769:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1770:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_ClkPeriSetDivider(uint8_t divider);
1771:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint8_t Cy_SysClk_ClkPeriGetDivider(void);
1772:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1773:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1774:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkPeriSetDivider
1775:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1776:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1777:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Sets the clock divider for the peripheral clock tree. All peripheral clock
1778:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * dividers are sourced from this clock. Also the Cortex M0+ clock divider is
1779:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * sourced from this clock. The source of this divider is clkHf[0]
1780:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1781:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param divider divider value between 0 and 255
1782:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Causes integer division of (divider value + 1), or division by 1 to 256.
1783:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1784:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
1785:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref SystemCoreClockUpdate after this function calling.
1786:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1787:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1788:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkPeriSetDivider
1789:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1790:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1791:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_ClkPeriSetDivider(uint8_t divider)
1792:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1793:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_REG32_CLR_SET(CPUSS_CM0_CLOCK_CTL, CPUSS_CM0_CLOCK_CTL_PERI_INT_DIV, divider);
1794:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1795:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1796:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1797:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkPeriGetDivider
1798:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1799:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1800:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Returns the clock divider of the peripheral (peri) clock.
1801:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1802:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return The divider value.
1803:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The integer division done is by (divider value + 1), or division by 1 to 256.
1804:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1805:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1806:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkPeriSetDivider
1807:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1808:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1809:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint8_t Cy_SysClk_ClkPeriGetDivider(void)
1810:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1811:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return ((uint8_t)_FLD2VAL(CPUSS_CM0_CLOCK_CTL_PERI_INT_DIV, CPUSS_CM0_CLOCK_CTL));
1812:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1813:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_clk_peri_funcs */
1814:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1815:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1816:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1817:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* =====================    clk_peripherals SECTION    ====================== */
1818:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1819:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1820:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_clk_peripheral_enums
1821:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1822:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 36


1823:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Programmable clock divider types */
1824:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1825:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1826:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_DIV_8_BIT    = 0U, /**< Divider Type is an 8 bit divider */
1827:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_DIV_16_BIT   = 1U, /**< Divider Type is a 16 bit divider */
1828:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_DIV_16_5_BIT = 2U, /**< Divider Type is a 16.5 bit fractional divider */
1829:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_DIV_24_5_BIT = 3U  /**< Divider Type is a 24.5 bit fractional divider */
1830:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_divider_types_t;
1831:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_clk_peripheral_enums */
1832:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1833:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1834:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_clk_peripheral_funcs
1835:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1836:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1837:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_PeriphSetDivider(cy_en_divider_types_t dividerType,
1838:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint32_t Cy_SysClk_PeriphGetDivider(cy_en_divider_types_t dividerType, uint32_t div
1839:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_PeriphSetFracDivider(cy_en_divider_types_t dividerT
1840:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_PeriphGetFracDivider(cy_en_divider_types_t dividerType, uint32_t div
1841:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_PeriphAssignDivider(en_clk_dst_t ipBlock, cy_en_div
1842:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint32_t Cy_SysClk_PeriphGetAssignedDivider(en_clk_dst_t ipBlock);
1843:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_PeriphEnableDivider(cy_en_divider_types_t dividerTy
1844:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_PeriphDisableDivider(cy_en_divider_types_t dividerT
1845:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_PeriphEnablePhaseAlignDivider(cy_en_divider_types_t
1846:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_PeriphGetDividerEnabled(cy_en_divider_types_t dividerType, uint32_t 
1847:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** uint32_t Cy_SysClk_PeriphGetFrequency(cy_en_divider_types_t dividerType, uint32_t dividerNum);
1848:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1849:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1850:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PeriphSetDivider
1851:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1852:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1853:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Sets one of the programmable clock dividers. This is only used for integer
1854:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * dividers. Use \ref Cy_SysClk_PeriphSetFracDivider for setting factional dividers.
1855:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1856:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \pre If the specified clock divider is already enabled - it should be disabled
1857:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * prior to use this function by \ref Cy_SysClk_PeriphDisableDivider.
1858:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1859:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerType specifies which type of divider to use; \ref cy_en_divider_types_t
1860:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1861:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerNum the divider number.
1862:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1863:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerValue divider value
1864:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Causes integer division of (divider value + 1), or division by 1 to 256
1865:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * (8-bit divider) or 1 to 65536 (16-bit divider).
1866:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1867:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_sysclk_status_t
1868:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1869:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1870:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PeriphSetDivider
1871:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1872:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1873:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t
1874:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                 Cy_SysClk_PeriphSetDivider(cy_en_divider_types_t dividerType,
1875:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            uint32_t dividerNum, uint32_t dividerValue)
1876:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1877:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
1878:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (dividerType == CY_SYSCLK_DIV_8_BIT)
1879:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 37


1880:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         if ((dividerNum < PERI_DIV_8_NR) &&
1881:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (dividerValue <= (PERI_DIV_8_CTL_INT8_DIV_Msk >> PERI_DIV_8_CTL_INT8_DIV_Pos)))
1882:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         {
1883:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             CY_REG32_CLR_SET(PERI_DIV_8_CTL[dividerNum], PERI_DIV_8_CTL_INT8_DIV, dividerValue);
1884:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             retVal = CY_SYSCLK_SUCCESS;
1885:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         }
1886:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1887:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     else if (dividerType == CY_SYSCLK_DIV_16_BIT)
1888:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1889:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         if ((dividerNum < PERI_DIV_16_NR) &&
1890:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (dividerValue <= (PERI_DIV_16_CTL_INT16_DIV_Msk >> PERI_DIV_16_CTL_INT16_DIV_Pos)))
1891:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         {
1892:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             CY_REG32_CLR_SET(PERI_DIV_16_CTL[dividerNum], PERI_DIV_16_CTL_INT16_DIV, dividerValue);
1893:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             retVal = CY_SYSCLK_SUCCESS;
1894:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         }
1895:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1896:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     else
1897:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     { /* return bad parameter */
1898:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1899:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
1900:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1901:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1902:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1903:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PeriphGetDivider
1904:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1905:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1906:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Returns the integer divider value for the specified divider. One works for
1907:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * integer dividers. Use \ref Cy_SysClk_PeriphGetFracDivider to get the fractional
1908:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * divider value
1909:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1910:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerType specifies which type of divider to use; \ref cy_en_divider_types_t
1911:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1912:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerNum specifies which divider of the selected type to configure
1913:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1914:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return The divider value.
1915:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The integer division done is by (divider value + 1), or division by 1 to 256
1916:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * (8-bit divider) or 1 to 65536 (16-bit divider).
1917:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1918:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1919:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PeriphSetDivider
1920:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1921:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1922:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint32_t Cy_SysClk_PeriphGetDivider(cy_en_divider_types_t dividerType, uint32_t div
1923:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1924:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint32_t retVal;
1925:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1926:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_ASSERT_L1(dividerType <= CY_SYSCLK_DIV_16_BIT);
1927:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1928:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (dividerType == CY_SYSCLK_DIV_8_BIT)
1929:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1930:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         CY_ASSERT_L1(dividerNum < PERI_DIV_8_NR);
1931:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         retVal = _FLD2VAL(PERI_DIV_8_CTL_INT8_DIV, PERI_DIV_8_CTL[dividerNum]);
1932:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1933:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     else
1934:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     { /* 16-bit divider */
1935:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         CY_ASSERT_L1(dividerNum < PERI_DIV_16_NR);
1936:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         retVal = _FLD2VAL(PERI_DIV_16_CTL_INT16_DIV, PERI_DIV_16_CTL[dividerNum]);
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 38


1937:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1938:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
1939:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1940:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1941:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1942:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PeriphSetFracDivider
1943:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1944:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1945:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Sets one of the programmable clock dividers. This function should only be used
1946:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * for fractional clock dividers.
1947:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1948:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \pre If the specified clock divider is already enabled - it should be disabled
1949:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * prior to use this function by \ref Cy_SysClk_PeriphDisableDivider.
1950:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1951:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerType specifies which type of divider to use; \ref cy_en_divider_types_t
1952:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1953:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerNum specifies which divider of the selected type to configure
1954:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1955:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerIntValue the integer divider value
1956:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The source of the divider is peri_clk, which is a divided version of hf_clk[0].
1957:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The divider value causes integer division of (divider value + 1), or division
1958:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * by 1 to 65536 (16-bit divider) or 1 to 16777216 (24-bit divider).
1959:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1960:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerFracValue the fraction part of the divider
1961:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The fractional divider can be 1-32, thus it divides the clock by 1/32 for each
1962:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * count. To divide the clock by 11/32nds set this value to 11.
1963:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1964:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_sysclk_status_t
1965:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1966:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1967:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PeriphSetFracDivider
1968:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1969:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1970:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t
1971:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                 Cy_SysClk_PeriphSetFracDivider(cy_en_divider_types_t dividerType, uint32_t dividerN
1972:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                                uint32_t dividerIntValue, uint32_t dividerFracValue)
1973:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1974:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
1975:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (dividerType == CY_SYSCLK_DIV_16_5_BIT)
1976:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1977:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         if ((dividerNum < PERI_DIV_16_5_NR) &&
1978:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (dividerIntValue <= (PERI_DIV_16_5_CTL_INT16_DIV_Msk >> PERI_DIV_16_5_CTL_INT16_DIV_Pos
1979:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (dividerFracValue <= (PERI_DIV_16_5_CTL_FRAC5_DIV_Msk >> PERI_DIV_16_5_CTL_FRAC5_DIV_Po
1980:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         {
1981:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             CY_REG32_CLR_SET(PERI_DIV_16_5_CTL[dividerNum], PERI_DIV_16_5_CTL_INT16_DIV, dividerInt
1982:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             CY_REG32_CLR_SET(PERI_DIV_16_5_CTL[dividerNum], PERI_DIV_16_5_CTL_FRAC5_DIV, dividerFra
1983:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             retVal = CY_SYSCLK_SUCCESS;
1984:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         }
1985:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1986:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     else if (dividerType == CY_SYSCLK_DIV_24_5_BIT)
1987:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1988:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         if ((dividerNum < PERI_DIV_24_5_NR) &&
1989:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (dividerIntValue <= (PERI_DIV_24_5_CTL_INT24_DIV_Msk >> PERI_DIV_24_5_CTL_INT24_DIV_Pos
1990:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (dividerFracValue <= (PERI_DIV_24_5_CTL_FRAC5_DIV_Msk >> PERI_DIV_24_5_CTL_FRAC5_DIV_Po
1991:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         {
1992:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             CY_REG32_CLR_SET(PERI_DIV_24_5_CTL[dividerNum], PERI_DIV_24_5_CTL_INT24_DIV, dividerInt
1993:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             CY_REG32_CLR_SET(PERI_DIV_24_5_CTL[dividerNum], PERI_DIV_24_5_CTL_FRAC5_DIV, dividerFra
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 39


1994:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             retVal = CY_SYSCLK_SUCCESS;
1995:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         }
1996:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1997:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     else
1998:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     { /* return bad parameter */
1999:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
2000:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
2001:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
2002:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
2003:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
2004:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PeriphGetFracDivider
2005:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
2006:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2007:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports the integer and fractional parts of the divider
2008:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2009:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerType specifies which type of divider to use; \ref cy_en_divider_types_t
2010:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2011:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerNum specifies which divider of the selected type to configure
2012:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2013:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param *dividerIntValue pointer to return integer divider value
2014:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2015:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param *dividerFracValue pointer to return fractional divider value
2016:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2017:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return None. Loads pointed-to variables.
2018:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2019:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
2020:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PeriphSetFracDivider
2021:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2022:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
2023:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_PeriphGetFracDivider(cy_en_divider_types_t dividerType, uint32_t div
2024:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                                     uint32_t *dividerIntValue, uint32_t *dividerFra
2025:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
2026:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_ASSERT_L1(((dividerType == CY_SYSCLK_DIV_16_5_BIT) || (dividerType == CY_SYSCLK_DIV_24_5_BIT
2027:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                  (dividerIntValue != NULL) && (dividerFracValue != NULL));
2028:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
2029:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (dividerType == CY_SYSCLK_DIV_16_5_BIT)
2030:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
2031:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         CY_ASSERT_L1(dividerNum < PERI_DIV_16_5_NR);
2032:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         *dividerIntValue  = _FLD2VAL(PERI_DIV_16_5_CTL_INT16_DIV, PERI_DIV_16_5_CTL[dividerNum]);
2033:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         *dividerFracValue = _FLD2VAL(PERI_DIV_16_5_CTL_FRAC5_DIV, PERI_DIV_16_5_CTL[dividerNum]);
2034:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
2035:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     else
2036:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     { /* 24.5-bit divider */
2037:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         CY_ASSERT_L1(dividerNum < PERI_DIV_24_5_NR);
2038:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         *dividerIntValue  = _FLD2VAL(PERI_DIV_24_5_CTL_INT24_DIV, PERI_DIV_24_5_CTL[dividerNum]);
2039:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         *dividerFracValue = _FLD2VAL(PERI_DIV_24_5_CTL_FRAC5_DIV, PERI_DIV_24_5_CTL[dividerNum]);
2040:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
2041:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
2042:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
2043:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
2044:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PeriphAssignDivider
2045:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
2046:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2047:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Assigns a programmable divider to a selected IP block, such as a TCPWM or SCB.
2048:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2049:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param ipBlock specifies ip block to connect the clock divider to.
2050:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 40


2051:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerType specifies which type of divider to use; \ref cy_en_divider_types_t
2052:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2053:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerNum specifies which divider of the selected type to configure
2054:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2055:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_sysclk_status_t
2056:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2057:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
2058:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PeriphAssignDivider
2059:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2060:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
2061:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t
2062:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                 Cy_SysClk_PeriphAssignDivider(en_clk_dst_t ipBlock,
2063:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                               cy_en_divider_types_t dividerType, uint32_t dividerNu
2064:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
2065:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
2066:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if ((CY_PERI_CLOCK_NR > (uint32_t)ipBlock) && (CY_SYSCLK_DIV_24_5_BIT >= dividerType))
2067:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
2068:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         if (((dividerType == CY_SYSCLK_DIV_8_BIT)    && (dividerNum < PERI_DIV_8_NR))    ||
2069:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_16_BIT)   && (dividerNum < PERI_DIV_16_NR))   ||
2070:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_16_5_BIT) && (dividerNum < PERI_DIV_16_5_NR)) ||
2071:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_24_5_BIT) && (dividerNum < PERI_DIV_24_5_NR)))
2072:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         {
2073:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             PERI_CLOCK_CTL[ipBlock] = _VAL2FLD(CY_PERI_CLOCK_CTL_TYPE_SEL, dividerType) |
2074:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                       _VAL2FLD(CY_PERI_CLOCK_CTL_DIV_SEL, dividerNum);
2075:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             retVal = CY_SYSCLK_SUCCESS;
2076:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         }
2077:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
2078:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
2079:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
2080:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
2081:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
2082:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PeriphGetAssignedDivider
2083:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
2084:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2085:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports which clock divider is assigned to a selected IP block.
2086:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2087:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param ipBlock specifies ip block to connect the clock divider to.
2088:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2089:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return The divider type and number, where bits [7:6] = type, bits[5:0] = divider
2090:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * number within that type
2091:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2092:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
2093:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PeriphAssignDivider
2094:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2095:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
2096:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint32_t Cy_SysClk_PeriphGetAssignedDivider(en_clk_dst_t ipBlock)
2097:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
2098:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_ASSERT_L1(CY_PERI_CLOCK_NR > (uint32_t)ipBlock);
2099:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (PERI_CLOCK_CTL[ipBlock] & (CY_PERI_CLOCK_CTL_DIV_SEL_Msk | CY_PERI_CLOCK_CTL_TYPE_SEL_M
2100:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
2101:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
2102:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
2103:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PeriphEnableDivider
2104:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
2105:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2106:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Enables the selected divider.
2107:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 41


2108:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerType specifies which type of divider to use; \ref cy_en_divider_types_t
2109:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2110:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerNum specifies which divider of the selected type to configure
2111:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2112:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note This function also sets the phase alignment bits such that the enabled
2113:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * divider is aligned to clk_peri. See \ref Cy_SysClk_PeriphDisableDivider()
2114:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * for information on how to phase-align a divider after it is enabled.
2115:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2116:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
2117:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PeriphEnableDivider
2118:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2119:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
2120:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t
2121:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                 Cy_SysClk_PeriphEnableDivider(cy_en_divider_types_t dividerType, uint32_t dividerNu
2122:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
2123:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
2124:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (dividerType <= CY_SYSCLK_DIV_24_5_BIT)
2125:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
2126:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         if (((dividerType == CY_SYSCLK_DIV_8_BIT)    && (dividerNum < PERI_DIV_8_NR))    ||
2127:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_16_BIT)   && (dividerNum < PERI_DIV_16_NR))   ||
2128:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_16_5_BIT) && (dividerNum < PERI_DIV_16_5_NR)) ||
2129:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_24_5_BIT) && (dividerNum < PERI_DIV_24_5_NR)))
2130:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         {
2131:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             /* specify the divider, make the reference = clk_peri, and enable the divider */
2132:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             PERI_DIV_CMD = PERI_DIV_CMD_ENABLE_Msk                         |
2133:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            CY_PERI_DIV_CMD_PA_TYPE_SEL_Msk                 |
2134:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            CY_PERI_DIV_CMD_PA_DIV_SEL_Msk                  |
2135:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            _VAL2FLD(CY_PERI_DIV_CMD_TYPE_SEL, dividerType) |
2136:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            _VAL2FLD(CY_PERI_DIV_CMD_DIV_SEL,  dividerNum);
2137:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (void)PERI_DIV_CMD; /* dummy read to handle buffered writes */
2138:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             retVal = CY_SYSCLK_SUCCESS;
2139:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         }
2140:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
2141:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
2142:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
2143:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
2144:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
2145:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PeriphDisableDivider
2146:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
2147:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2148:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Disables a selected divider.
2149:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2150:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerType specifies which type of divider to use; \ref cy_en_divider_types_t.
2151:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2152:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerNum specifies which divider of the selected type to configure.
2153:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2154:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
2155:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PeriphDisableDivider
2156:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2157:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
2158:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t
2159:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                 Cy_SysClk_PeriphDisableDivider(cy_en_divider_types_t dividerType, uint32_t dividerN
2160:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
2161:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
2162:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (dividerType <= CY_SYSCLK_DIV_24_5_BIT)
2163:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
2164:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         if (((dividerType == CY_SYSCLK_DIV_8_BIT)    && (dividerNum < PERI_DIV_8_NR))    ||
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 42


2165:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_16_BIT)   && (dividerNum < PERI_DIV_16_NR))   ||
2166:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_16_5_BIT) && (dividerNum < PERI_DIV_16_5_NR)) ||
2167:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_24_5_BIT) && (dividerNum < PERI_DIV_24_5_NR)))
2168:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         {
2169:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             /* specify the divider and disable it */
2170:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             PERI_DIV_CMD = PERI_DIV_CMD_DISABLE_Msk          |
  45              		.loc 2 2170 0
  46 0004 224B     		ldr	r3, .L4
  47 0006 1A68     		ldr	r2, [r3]
  48 0008 8021     		movs	r1, #128
  49 000a C905     		lsls	r1, r1, #23
  50 000c 8023     		movs	r3, #128
  51 000e DB00     		lsls	r3, r3, #3
  52 0010 9068     		ldr	r0, [r2, #8]
  53              	.LVL2:
  54 0012 C150     		str	r1, [r0, r3]
  55              	.LVL3:
  56              	.LBE48:
  57              	.LBE47:
  58              	.LBE46:
 130:Generated_Source\PSoC6/ADC.c ****     bool deInitRouting = false;
 131:Generated_Source\PSoC6/ADC.c **** 
 132:Generated_Source\PSoC6/ADC.c ****     /* If there is an internal SAR clock, set up its divider values. */
 133:Generated_Source\PSoC6/ADC.c ****     #if (ADC_CLOCK_INTERNAL)
 134:Generated_Source\PSoC6/ADC.c ****         ADC_intSarClock_Disable();
 135:Generated_Source\PSoC6/ADC.c ****         ADC_intSarClock_SetDivider(config->clkDivider);
  59              		.loc 1 135 0
  60 0014 2369     		ldr	r3, [r4, #16]
  61              	.LVL4:
  62              	.LBB49:
  63              	.LBB50:
  64              	.LBB51:
1880:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (dividerValue <= (PERI_DIV_8_CTL_INT8_DIV_Msk >> PERI_DIV_8_CTL_INT8_DIV_Pos)))
  65              		.loc 2 1880 0
  66 0016 FF2B     		cmp	r3, #255
  67 0018 0AD8     		bhi	.L2
1883:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             retVal = CY_SYSCLK_SUCCESS;
  68              		.loc 2 1883 0
  69 001a 9168     		ldr	r1, [r2, #8]
  70 001c 7420     		movs	r0, #116
  71 001e 125A     		ldrh	r2, [r2, r0]
  72 0020 8A18     		adds	r2, r1, r2
  73 0022 1068     		ldr	r0, [r2]
  74 0024 1B49     		ldr	r1, .L4+4
  75 0026 0140     		ands	r1, r0
  76 0028 1B06     		lsls	r3, r3, #24
  77              	.LVL5:
  78 002a 1B0C     		lsrs	r3, r3, #16
  79 002c 0B43     		orrs	r3, r1
  80 002e 1360     		str	r3, [r2]
  81              	.LVL6:
  82              	.L2:
  83              	.LBE51:
  84              	.LBE50:
  85              	.LBE49:
  86              	.LBB52:
  87              	.LBB53:
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 43


  88              	.LBB54:
2132:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            CY_PERI_DIV_CMD_PA_TYPE_SEL_Msk                 |
  89              		.loc 2 2132 0
  90 0030 174B     		ldr	r3, .L4
  91 0032 1A68     		ldr	r2, [r3]
2133:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            CY_PERI_DIV_CMD_PA_DIV_SEL_Msk                  |
  92              		.loc 2 2133 0
  93 0034 7323     		movs	r3, #115
  94 0036 D15C     		ldrb	r1, [r2, r3]
  95 0038 703B     		subs	r3, r3, #112
  96 003a 8B40     		lsls	r3, r3, r1
  97 003c 1900     		movs	r1, r3
2134:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            _VAL2FLD(CY_PERI_DIV_CMD_TYPE_SEL, dividerType) |
  98              		.loc 2 2134 0
  99 003e 7023     		movs	r3, #112
 100 0040 D35C     		ldrb	r3, [r2, r3]
 101 0042 7220     		movs	r0, #114
 102 0044 105C     		ldrb	r0, [r2, r0]
 103 0046 8340     		lsls	r3, r3, r0
2133:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            CY_PERI_DIV_CMD_PA_DIV_SEL_Msk                  |
 104              		.loc 2 2133 0
 105 0048 0B43     		orrs	r3, r1
2135:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            _VAL2FLD(CY_PERI_DIV_CMD_DIV_SEL,  dividerNum);
 106              		.loc 2 2135 0
 107 004a 8021     		movs	r1, #128
 108 004c 0906     		lsls	r1, r1, #24
 109 004e 0B43     		orrs	r3, r1
2132:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            CY_PERI_DIV_CMD_PA_TYPE_SEL_Msk                 |
 110              		.loc 2 2132 0
 111 0050 8021     		movs	r1, #128
 112 0052 C900     		lsls	r1, r1, #3
 113 0054 9068     		ldr	r0, [r2, #8]
 114 0056 4350     		str	r3, [r0, r1]
2137:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             retVal = CY_SYSCLK_SUCCESS;
 115              		.loc 2 2137 0
 116 0058 9368     		ldr	r3, [r2, #8]
 117 005a 5B58     		ldr	r3, [r3, r1]
 118              	.LVL7:
 119              	.LBE54:
 120              	.LBE53:
 121              	.LBE52:
 136:Generated_Source\PSoC6/ADC.c ****         ADC_intSarClock_Enable();
 137:Generated_Source\PSoC6/ADC.c ****     #endif /* ADC_CLOCK_INTERNAL */
 138:Generated_Source\PSoC6/ADC.c **** 
 139:Generated_Source\PSoC6/ADC.c ****     /* Init SAR and MUX registers */
 140:Generated_Source\PSoC6/ADC.c ****     (void)Cy_SAR_DeInit(ADC_SAR__HW, deInitRouting);
 122              		.loc 1 140 0
 123 005c 0E4D     		ldr	r5, .L4+8
 124 005e 0021     		movs	r1, #0
 125 0060 2800     		movs	r0, r5
 126 0062 FFF7FEFF 		bl	Cy_SAR_DeInit
 127              	.LVL8:
 141:Generated_Source\PSoC6/ADC.c ****     (void)Cy_SAR_Init(ADC_SAR__HW, config->hwConfigStc);
 128              		.loc 1 141 0
 129 0066 A168     		ldr	r1, [r4, #8]
 130 0068 2800     		movs	r0, r5
 131 006a FFF7FEFF 		bl	Cy_SAR_Init
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 44


 132              	.LVL9:
 133              	.LBB55:
 134              	.LBB56:
 135              		.file 3 "Generated_Source\\PSoC6\\pdl\\drivers/peripheral/sar/cy_sar.h"
   1:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /***************************************************************************//**
   2:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \file cy_sar.h
   3:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \version 1.20
   4:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
   5:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Header file for the SAR driver.
   6:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
   7:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ********************************************************************************
   8:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \copyright
   9:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Copyright 2017-2018, Cypress Semiconductor Corporation. All rights reserved.
  10:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * You may use this file only in accordance with the license, terms, conditions,
  11:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * disclaimers, and limitations in the end user license agreement accompanying
  12:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the software package with which this file was provided.
  13:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
  14:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
  15:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /**
  16:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \addtogroup group_sar
  17:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
  18:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This driver configures and controls the SAR ADC subsystem block.
  19:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  20:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The functions and other declarations used in this driver are in cy_sar.h. 
  21:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * You can include cy_pdl.h (ModusToolbox only) to get access to all functions 
  22:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and declarations in the PDL. 
  23:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  24:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This SAR ADC subsystem is comprised of:
  25:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - a 12-bit SAR converter (SARADC)
  26:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - an embedded reference block (SARREF)
  27:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - a mux (\ref group_sar_sarmux "SARMUX") at the inputs of the converter
  28:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - a sequence controller (\ref group_sar_sarmux "SARSEQ") that enables multi-channel acquisition
  29:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       in a round robin fashion, without CPU intervention, to maximize scan rates.
  30:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  31:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_block_diagram.png
  32:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  33:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The high level features of the subsystem are:
  34:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - maximum sample rate of 1 Msps
  35:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Sixteen individually configurable channels (depends on device routing capabilities)
  36:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - per channel selectable
  37:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - single-ended or differential input mode
  38:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - input from external pin (8 channels in single-ended mode or 4 channels in differential mo
  39:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *         or from internal signals (AMUXBUS, CTB, Die Temperature Sensor)
  40:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - choose one of four programmable acquisition times
  41:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - averaging and accumulation
  42:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - scan can be triggered by firmware or hardware in single shot or continuous mode
  43:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - hardware averaging from 2 to 256 samples
  44:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - selectable voltage references
  45:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - internal VDDA and VDDA/2 references
  46:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - buffered 1.2 V bandgap reference from \ref group_sysanalog "AREF"
  47:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - external reference from dedicated pin
  48:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Interrupt generation
  49:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  50:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_usage Usage
  51:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  52:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The high level steps to use this driver are:
  53:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 45


  54:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   -# \ref group_sar_initialization
  55:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   -# \ref group_sar_trigger_conversions
  56:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   -# \ref group_sar_handle_interrupts
  57:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   -# \ref group_sar_retrieve_result
  58:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  59:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_initialization Initialization and Enable
  60:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  61:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To configure the SAR subsystem, call \ref Cy_SAR_Init. Pass in a pointer to the \ref SAR_Type
  62:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * structure for the base hardware register address and pass in the configuration structure,
  63:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref cy_stc_sar_config_t.
  64:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  65:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * After initialization, call \ref Cy_SAR_Enable to enable the hardware.
  66:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  67:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Here is guidance on how to set the data fields of the configuration structure:
  68:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  69:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_ctrl uint32_t ctrl
  70:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  71:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field specifies configurations that apply to all channels such as the Vref
  72:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * source or the negative terminal selection for all single-ended channels.
  73:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Select a value from each of the following enums that begin with "cy_en_sar_ctrl_" and "OR" them t
  74:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_pwr_ctrl_vref_t
  75:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_vref_sel_t
  76:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_bypass_cap_t
  77:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_neg_sel_t
  78:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_hw_ctrl_negvref_t
  79:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_comp_delay_t
  80:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_comp_pwr_t
  81:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_sarmux_deep_sleep_t
  82:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_sarseq_routing_switches_t
  83:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  84:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SAR_CTRL
  85:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  86:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_sampleCtrl uint32_t sampleCtrl
  87:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  88:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures sampling details that apply to all channels.
  89:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Select a value from each of the following enums that begin with "cy_en_sar_sample_" and "OR" them
  90:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_result_align_t
  91:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_single_ended_format_t
  92:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_differential_format_t
  93:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_avg_cnt_t
  94:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_avg_mode_t
  95:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_trigger_mode_t
  96:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  97:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SAMPLE_CTRL
  98:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  99:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_sampleTime01 uint32_t sampleTime01
 100:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 101:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures the value for sample times 0 and 1 in ADC clock cycles.
 102:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 103:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR has four programmable 10-bit aperture times that are configured using two data fields,
 104:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref group_sar_init_struct_sampleTime01 and
 105:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref group_sar_init_struct_sampleTime23.
 106:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Ten bits allow for a range of 0 to 1023 cycles, however 0 and 1 are invalid.
 107:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The minimum aperture time is 167 ns. With an 18 MHz ADC clock, this is
 108:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * equal to 3 cycles or a value of 4 in this field. The actual aperture time is one cycle less than
 109:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the value stored in this field.
 110:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 46


 111:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use the shifts defined in \ref cy_en_sar_sample_time_shift_t.
 112:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 113:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SAMPLE_TIME01
 114:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 115:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_sampleTime23 uint32_t sampleTime23
 116:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 117:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures the value for sample times 2 and 3 in ADC clock cycles.
 118:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use the shifts defined in \ref cy_en_sar_sample_time_shift_t.
 119:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 120:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SAMPLE_TIME23
 121:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 122:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_rangeThres uint32_t rangeThres
 123:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 124:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures the upper and lower thresholds for the range interrupt.
 125:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * These thresholds apply on a global level for all channels with range detection enabled.
 126:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 127:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SARSEQ supports range detection to allow for automatic detection of sample values
 128:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * compared to two programmable thresholds without CPU involvement.
 129:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Range detection is done after averaging, alignment, and sign extension (if applicable). In other 
 130:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * threshold values need to have the same data format as the result data.
 131:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The values are interpreted as signed or unsigned according to each channel's configuration.
 132:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 133:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use the shifts defined in \ref cy_en_sar_range_thres_shift_t.
 134:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 135:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The \ref Cy_SAR_SetLowLimit and \ref Cy_SAR_SetHighLimit provide run-time configurability of thes
 136:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 137:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_RANGE_THRES
 138:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 139:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_rangeCond cy_en_sar_range_detect_condition_t rangeCond
 140:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 141:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures the condition (below, inside, outside, or above) that will trigger
 142:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the range interrupt. Select a value from the \ref cy_en_sar_range_detect_condition_t enum.
 143:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 144:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_chanEn uint32_t chanEn
 145:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 146:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures which channels will be scanned.
 147:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Each bit corresponds to a channel. Bit 0 enables channel 0, bit 1 enables channel 1,
 148:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * bit 2 enables channel 2, and so on.
 149:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 150:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_chanConfig uint32_t chanConfig[16]
 151:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 152:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Each channel has its own channel configuration register.
 153:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel configuration specifies which pin/signal is connected to that channel
 154:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and how the channel is sampled.
 155:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 156:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Select a value from each of the following enums that begin with "cy_en_sar_chan_config_" and "OR"
 157:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 158:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_input_mode_t
 159:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_pos_pin_addr_t
 160:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_pos_port_addr_t
 161:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_avg_en_t
 162:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_sample_time_t
 163:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_neg_pin_addr_t
 164:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_neg_port_addr_t
 165:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 166:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Some important considerations are:
 167:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - The POS_PORT_ADDR and POS_PIN_ADDR bit fields are used by the SARSEQ to select
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 47


 168:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   the connection to the positive terminal (Vplus) of the ADC for each channel.
 169:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - When the channel is an unpaired differential input (\ref CY_SAR_CHAN_DIFFERENTIAL_UNPAIRED), 
 170:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   NEG_PORT_ADDR and NEG_PIN_ADDR are used by the SARSEQ to select the connection
 171:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   to the negative terminal (Vminus) of the ADC.
 172:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - When the channel is a differential input pair (\ref CY_SAR_CHAN_DIFFERENTIAL_PAIRED), the NEG
 173:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   For differential input pairs, only the pin for the positive terminal needs to be
 174:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   specified and this pin must be even. For example, Pin 0 (positive terminal) and Pin 1 (negative
 175:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   are a pair. Pin 2 (positive terminal) and Pin 3 (negative terminal) are a pair.
 176:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 177:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If the SARSEQ is disabled (\ref cy_en_sar_ctrl_sarseq_routing_switches_t) or
 178:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * it is not controlling any switches (\ref group_sar_init_struct_muxSwitchSqCtrl = 0), the port and
 179:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are ignored. This is possible when there is only one channel to scan.
 180:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 181:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_CHAN_CONFIG
 182:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 183:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_intrMask uint32_t intrMask
 184:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 185:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures which interrupt events (end of scan, overflow, or firmware collision) will 
 186:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 187:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Select one or more values from the \ref cy_en_sar_intr_mask_t enum and "OR" them
 188:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * together.
 189:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 190:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_INTR_MASK
 191:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 192:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_satIntrMask uint32_t satIntrMask
 193:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 194:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures which channels will cause a saturation interrupt.
 195:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 196:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SARSEQ has a saturation detect that is always applied to every conversion.
 197:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This feature detects whether a channel's sample value is equal to the minimum or maximum values.
 198:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This allows the firmware to take action, for example, discard the result, when the SARADC saturat
 199:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The sample value is tested right after conversion, that is, before averaging. This means that it
 200:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * can happen that the interrupt is set while the averaged result in the data register is not
 201:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * equal to the minimum or maximum.
 202:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 203:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Each bit corresponds to a channel. A value of 0 disables saturation detection for all channels.
 204:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 205:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_rangeIntrMask uint32_t rangeIntrMask
 206:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 207:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures which channels will cause a range detection interrupt.
 208:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Each bit corresponds to a channel. A value of 0 disables range detection for all channels.
 209:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 210:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_muxSwitch uint32_t muxSwitch
 211:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 212:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field is the firmware control of the SARMUX switches.
 213:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 214:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use one or more values from the \ref cy_en_sar_mux_switch_fw_ctrl_t enum and "OR" them together.
 215:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If the SARSEQ is enabled, the SARMUX switches that will be used must
 216:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * also be closed using this firmware control.
 217:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 218:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_MUX_SWITCH
 219:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 220:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Firmware control can be changed at run-time by calling \ref Cy_SAR_SetAnalogSwitch with \ref CY_S
 221:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and the desired switch states.
 222:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 223:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_muxSwitchSqCtrl uint32_t muxSwitchSqCtrl
 224:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 48


 225:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field enables or disables SARSEQ control of the SARMUX switches.
 226:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To disable control of all switches, set this field to 0. To disable the SARSEQ all together,
 227:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * use \ref CY_SAR_SARSEQ_SWITCH_DISABLE when configuring the \ref group_sar_init_struct_ctrl regist
 228:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 229:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use one or more values from the \ref cy_en_sar_mux_switch_sq_ctrl_t enum and "OR" them together.
 230:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 231:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_MUX_SQ_CTRL
 232:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 233:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * SARSEQ control can be changed at run-time by calling \ref Cy_SAR_SetSwitchSarSeqCtrl.
 234:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 235:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_configRouting bool configRouting
 236:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 237:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If true, the \ref group_sar_init_struct_muxSwitch and \ref group_sar_init_struct_muxSwitchSqCtrl 
 238:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * will be used. If false, the fields will be ignored.
 239:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 240:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_vrefMvValue uint32_t vrefMvValue
 241:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 242:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field sets the value of the reference voltage in millivolts used. This value
 243:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * is used for converting counts to volts in the \ref Cy_SAR_CountsTo_Volts, \ref Cy_SAR_CountsTo_mV
 244:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref Cy_SAR_CountsTo_uVolts functions.
 245:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 246:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_trigger_conversions Triggering Conversions
 247:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 248:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR subsystem has the following modes for triggering a conversion:
 249:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * <table class="doxtable">
 250:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 251:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Mode</th>
 252:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Description</th>
 253:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Usage</th>
 254:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 255:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 256:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Continuous</td>
 257:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>After completing a scan, the
 258:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     SARSEQ will immediately start the next scan. That is, the SARSEQ will always be BUSY.
 259:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     As a result all other triggers, firmware or hardware, are essentially ignored.
 260:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *  </td>
 261:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>To enter this mode, call \ref Cy_SAR_StartConvert with \ref CY_SAR_START_CONVERT_CONTINUO
 262:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     To stop continuous conversions, call \ref Cy_SAR_StopConvert.
 263:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     </td>
 264:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 265:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 266:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Firmware single shot</td>
 267:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>A single conversion of all enabled channels is triggered with a function call to \ref Cy_
 268:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     \ref CY_SAR_START_CONVERT_SINGLE_SHOT.
 269:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     </td>
 270:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>
 271:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     Firmware triggering is always available by calling \ref Cy_SAR_StartConvert with \ref CY_SAR_
 272:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     To allow only firmware triggering, or disable
 273:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     hardware triggering, set up the \ref cy_stc_sar_config_t config structure with \ref CY_SAR_TR
 274:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     </td>
 275:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 276:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 277:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Hardware edge sensitive</td>
 278:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>A single conversion of all enabled channels is triggered on the rising edge of the hardwa
 279:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     trigger signal.</td>
 280:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>To enable this mode, set up the \ref cy_stc_sar_config_t config structure with
 281:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     \ref CY_SAR_TRIGGER_MODE_FW_AND_HWEDGE.</td>
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 49


 282:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *    </tr>
 283:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *    <tr>
 284:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Hardware level sensitive</td>
 285:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Conversions are triggered continuously when the hardware trigger signal is high.</td>
 286:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>To enable this mode, set up the \ref cy_stc_sar_config_t config structure with
 287:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     \ref CY_SAR_TRIGGER_MODE_FW_AND_HWLEVEL.</td>
 288:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *    </tr>
 289:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * </table>
 290:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 291:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The trigger mode can be changed during run time with \ref Cy_SAR_SetConvertMode.
 292:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 293:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * For the hardware trigger modes, use the \ref group_trigmux driver to route an internal or externa
 294:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * signal to the SAR trigger input.
 295:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When making the required \ref Cy_TrigMux_Connect calls, use the pre-defined enum, TRIG6_OUT_PASS_
 296:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * for the SAR trigger input.
 297:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 298:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_CONFIG_TRIGGER
 299:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 300:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_handle_interrupts Handling Interrupts
 301:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 302:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR can generate interrupts on these events:
 303:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 304:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - End of scan (EOS): when scanning of all enabled channels complete.
 305:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Overflow: when the result register is updated before the previous result is read.
 306:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - FW collision: when a new trigger is received while the SAR is still processing the previous t
 307:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Saturation detection: when the channel result is equal to the minimum or maximum value.
 308:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Range detection: when the channel result meets the programmed upper or lower threshold values
 309:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 310:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR interrupt to the NVIC is raised any time the intersection (logic and) of the interrupt
 311:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * flags and the corresponding interrupt masks are non-zero.
 312:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 313:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Implement an interrupt routine and assign it to the SAR interrupt.
 314:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use the pre-defined enum, pass_interrupt_sar_IRQn, as the interrupt source for the SAR.
 315:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 316:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following code snippet demonstrates how to implement a routine to handle the interrupt.
 317:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The routine gets called when any one of the SAR interrupts are triggered.
 318:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When servicing an interrupt, the user must clear the interrupt so that subsequent
 319:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * interrupts can be handled.
 320:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 321:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_ISR
 322:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 323:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following code snippet demonstrates how to configure and enable the interrupt.
 324:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 325:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_CONFIG_INTR
 326:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 327:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Alternately, instead of handling the interrupts, the \ref Cy_SAR_IsEndConversion function
 328:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * allows for firmware polling of the end of conversion status.
 329:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 330:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_retrieve_result Retrieve Channel Results
 331:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 332:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Retrieve the ADC result by calling \ref Cy_SAR_GetResult16 with the desired channel.
 333:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To convert the result to a voltage, pass the ADC result to \ref Cy_SAR_CountsTo_Volts, \ref Cy_SA
 334:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref Cy_SAR_CountsTo_uVolts.
 335:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 336:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_clock SAR Clock Configuration
 337:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 338:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR requires a clock. Assign a clock to the SAR using the
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 50


 339:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * pre-defined enum, PCLK_PASS_CLOCK_SAR, to identify the SAR subsystem.
 340:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Set the clock divider value to achieve the desired clock rate. The SAR can support
 341:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * a maximum frequency of 18 MHz.
 342:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 343:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm4.c SAR_SNIPPET_CONFIGURE_CLOCK
 344:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 345:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_scan_time Scan Rate
 346:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 347:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The scan rate is dependent on the following:
 348:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 349:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - ADC clock rate
 350:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Number of channels
 351:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Averaging
 352:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Resolution
 353:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Acquisition times
 354:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 355:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_acquisition_time Acquisition Time
 356:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 357:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The acquisition time of a channel is based on which of the four global aperture times are selecte
 358:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * channel. The selection is done during initialization per channel with \ref group_sar_init_struct_
 359:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The four global aperture times are also set during initialization with \ref group_sar_init_struct
 360:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref group_sar_init_struct_sampleTime23. Note that these global aperture times are in SAR clock c
 361:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * acquisition time is 1 less than that value in the register.
 362:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 363:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_acquisition_time_eqn.png
 364:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 365:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_channel_sample_time Channel Sample Time
 366:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 367:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The sample time for a channel is the time required to acquire the analog signal
 368:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and convert it to a digital code.
 369:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 370:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_channel_sample_time_eqn.png
 371:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 372:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR ADC is a 12-bit converter so Resolution = 12.
 373:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 374:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_total_scan_time Total Scan Time
 375:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 376:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Channels using one of the sequential averaging modes (\ref CY_SAR_AVG_MODE_SEQUENTIAL_ACCUM or \r
 377:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are sampled multiple times per scan. The number of samples averaged are set during initialization
 378:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * with \ref group_sar_init_struct_sampleCtrl using one of the values from \ref cy_en_sar_sample_ctr
 379:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Channels that are not averaged or use the \ref CY_SAR_AVG_MODE_INTERLEAVED mode are only sampled 
 380:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 381:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The total scan time is the sum of each channel's sample time multiplied by the samples per scan.
 382:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 383:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_scan_rate_eqn.png
 384:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 385:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * where N is the total number of channels in the scan.
 386:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 387:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_sarmux SARMUX and SARSEQ
 388:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 389:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SARMUX is an analog programmable multiplexer. Its switches can be controlled by the SARSEQ or
 390:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and the inputs can come from:
 391:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - a dedicated port (can support 8 single-ended channels or 4 differential channels)
 392:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - an internal die temperature (DieTemp) sensor
 393:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - CTB output via SARBUS0/1 (if CTBs are available on the device)
 394:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - AMUXBUSA/B
 395:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 51


 396:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following figure shows the SARMUX switches. See the device datasheet for the exact location o
 397:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 398:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_sarmux_switches.png
 399:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 400:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When using the SARSEQ, the following configurations must be performed:
 401:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - enable SARSEQ control of required switches (see \ref group_sar_init_struct_muxSwitchSqCtrl)
 402:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - close the required switches with firmware (see \ref group_sar_init_struct_muxSwitch)
 403:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - configure the POS_PORT_ADDR and POS_PIN_ADDR, and if used, the NEG_PORT_ADDR and NEG_PIN_ADDR
 404:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 405:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * While firmware can control every switch in the SARMUX, not every switch can be controlled by the 
 406:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Additionally, switches outside of the SARMUX such as the AMUXBUSA/B switches or
 407:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * CTB switches will require separate function calls (see \ref group_gpio "GPIO" and \ref group_ctb 
 408:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SARSEQ can control three switches in the \ref group_ctb "CTB" driver (see \ref Cy_CTB_EnableS
 409:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * These switches need to be enabled for SARSEQ control if the CTB outputs are used as the SARMUX in
 410:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 411:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following table shows the required POS_PORT_ADDR and POS_PIN_ADDR settings
 412:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * for different input connections.
 413:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 414:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * <table class="doxtable">
 415:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 416:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Input Connection Selection</th>
 417:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>POS_PORT_ADDR</th>
 418:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>POS_PIN_ADDR</th>
 419:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 420:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 421:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>SARMUX dedicated port</td>
 422:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_SARMUX</td>
 423:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_0 through \ref CY_SAR_CHAN_POS_PIN_ADDR_7</td>
 424:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 425:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 426:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>DieTemp sensor</td>
 427:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_SARMUX_VIRT</td>
 428:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_0</td>
 429:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 430:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 431:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>AMUXBUSA</td>
 432:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_SARMUX_VIRT</td>
 433:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_2</td>
 434:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 435:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 436:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>AMUXBUSB</td>
 437:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_SARMUX_VIRT</td>
 438:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_3</td>
 439:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 440:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 441:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>CTB0 Opamp0 1x output</td>
 442:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_CTB0</td>
 443:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_2</td>
 444:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 445:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 446:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>CTB0 Opamp1 1x output</td>
 447:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_CTB0</td>
 448:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_3</td>
 449:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 450:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * </table>
 451:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 452:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_sarmux_dietemp Input from DieTemp sensor
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 52


 453:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 454:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When using the DieTemp sensor, always use single-ended mode.
 455:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The temperature sensor can be routed to Vplus using the \ref CY_SAR_MUX_FW_TEMP_VPLUS switch.
 456:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Connecting this switch will also enable the sensor. Set the \ref group_sar_acquisition_time "acqu
 457:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * be at least 1 us to meet the settling time of the temperature sensor.
 458:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 459:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_sarmux_dietemp.png
 460:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 461:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_02.cydsn/main_cm4.c SNIPPET_SAR_SARMUX_DIETEMP
 462:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 463:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_sarmux_se_diff Input from SARMUX port
 464:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 465:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following figure and code snippet show how two GPIOs on the SARMUX dedicated port
 466:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are connected to the SARADC as separate single-ended channels and as a differential-pair channel.
 467:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 468:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_sarmux_dedicated_port.png
 469:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 470:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_02.cydsn/main_cm4.c SNIPPET_SAR_SARMUX_SE_DIFF
 471:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 472:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_sarmux_ctb Input from CTB output visa SARBUS0/1
 473:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 474:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following figure and code snippet show how the two opamp outputs from the CTB
 475:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are connected to the SARADC as separate single-ended channels and as a differential-pair channel.
 476:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Note that separate function calls are needed to configure and enable the opamps, perform required
 477:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and enable SARSEQ control of the switches contained in the CTB.
 478:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 479:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_sarmux_ctb.png
 480:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 481:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_02.cydsn/main_cm4.c SNIPPET_SAR_SARMUX_CTB
 482:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 483:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_sarmux_amuxbus Input from other pins through AMUXBUSA/B
 484:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 485:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following figure and code snippet show how two GPIOs on any port through the AMUXBUSA and AMU
 486:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are connected to the SARADC as separate single-ended channels and as a differential-pair channel.
 487:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Note that separate function calls are needed to route the device pins to the SARMUX. The AMUXBUSe
 488:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are separated into multiple segments and these segments are connected/disconnected using the AMUX
 489:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * registers in the HSIOM. In the following code snippet, to connect Port 1 to the SARMUX, the left 
 490:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * switches of AMUX_SPLIT_CTL[1] and AMUX_SPLIT_CTL[6] need to be closed.
 491:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 492:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_sarmux_amuxbus.png
 493:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 494:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_02.cydsn/main_cm4.c SNIPPET_SAR_SARMUX_AMUXBUS
 495:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 496:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_low_power Low Power Support
 497:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This SAR driver provides a callback function to handle power mode transitions.
 498:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The \ref Cy_SAR_DeepSleepCallback function ensures that SAR conversions are stopped
 499:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * before Deep Sleep entry. Upon wakeup, the callback
 500:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * enables the hardware and continuous conversions, if previously enabled.
 501:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 502:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To trigger the callback execution, the callback must be registered before calling \ref Cy_SysPm_C
 503:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref group_syspm driver for more information about power mode transitions and
 504:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * callback registration.
 505:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 506:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Recall that during configuration of the \ref group_sar_init_struct_ctrl "ctrl" field,
 507:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the SARMUX can be configured to remain enabled in Deep Sleep mode.
 508:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * All other blocks (SARADC, REFBUF, and SARSEQ) do not support Deep Sleep mode operation.
 509:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 53


 510:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_more_information More Information
 511:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * For more information on the SAR ADC subsystem, refer to the technical reference manual (TRM).
 512:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 513:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_MISRA MISRA-C Compliance]
 514:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 515:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This driver has the following specific deviations:
 516:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 517:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * <table class="doxtable">
 518:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 519:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>MISRA Rule</th>
 520:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Rule Class (Required/Advisory)</th>
 521:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Rule Description</th>
 522:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Description of Deviation(s)</th>
 523:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 524:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 525:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>11.4</td>
 526:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Advisory</td>
 527:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>A cast should not be performed between a pointer to object type and a different pointer t
 528:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>The cy_syspm driver defines the pointer to void in the \ref cy_stc_syspm_callback_params_
 529:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       This SAR driver implements a Deep Sleep callback conforming to the cy_syspm driver requirem
 530:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       When the callback is called, the base should point to the SAR_Type register address.
 531:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     </td>
 532:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 533:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * </table>
 534:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 535:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_changelog Changelog
 536:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * <table class="doxtable">
 537:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr><th>Version</th><th>Changes</th><th>Reason for Change</th></tr>
 538:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 539:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td rowspan="2">1.20</td>
 540:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Flattened the organization of the driver source code into the single source directory and
 541:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Driver library directory-structure simplification.</td>
 542:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 543:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 544:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Added register access layer. Use register access macros instead
 545:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *         of direct register access using dereferenced pointers.</td>
 546:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Makes register access device-independent, so that the PDL does 
 547:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *         not need to be recompiled for each supported part number.</td>
 548:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 549:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 550:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td rowspan="3">1.10</td>
 551:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td> Added workaround for parts with out of range CAP_TRIM in Init API.</td>
 552:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td> Correct CAP_TRIM is necessary achieving specified SAR ADC linearity</td>
 553:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 554:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 555:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td> Turn off the entire hardware block only if the SARMUX is not enabled 
 556:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *          for Deep Sleep operation.                
 557:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     </td>
 558:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td> Improvement of the \ref Cy_SAR_DeepSleep flow</td>
 559:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 560:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 561:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Updated "Low Power Support" section to describe registering the Deep Sleep callback.
 562:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *         Added parenthesis around logical AND operation in Sleep API.</td>
 563:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Documentation update and clarification</td>
 564:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 565:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 566:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>1.0</td>
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 54


 567:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Initial version</td>
 568:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td></td>
 569:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 570:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * </table>
 571:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 572:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \defgroup group_sar_macros Macros
 573:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \defgroup group_sar_functions Functions
 574:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \{
 575:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_basic         Initialization and Basic Functions
 576:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_power         Low Power Callback
 577:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_config        Run-time Configuration Functions
 578:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_countsto      Counts Conversion Functions
 579:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_interrupt     Interrupt Functions
 580:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_switches      SARMUX Switch Control Functions
 581:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_helper        Useful Configuration Query Functions
 582:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \}
 583:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \defgroup group_sar_globals Global Variables
 584:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \defgroup group_sar_data_structures Data Structures
 585:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \defgroup group_sar_enums Enumerated Types
 586:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \{
 587:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_ctrl_register_enums         Control Register Enums
 588:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_sample_ctrl_register_enums  Sample Control Register Enums
 589:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_sample_time_shift_enums     Sample Time Register Enums
 590:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_range_thres_register_enums  Range Interrupt Register Enums
 591:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_chan_config_register_enums  Channel Configuration Register Enums
 592:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_intr_mask_t_register_enums  Interrupt Mask Register Enums
 593:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_mux_switch_register_enums   SARMUX Switch Control Register Enums
 594:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \}
 595:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 596:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 597:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #if !defined(CY_SAR_H)
 598:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_H
 599:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 600:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include <stdint.h>
 601:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include <stdbool.h>
 602:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include <stddef.h>
 603:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include "cy_device_headers.h"
 604:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include "cy_syslib.h"
 605:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include "cy_syspm.h"
 606:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include "cy_device.h"
 607:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 608:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #ifdef CY_IP_MXS40PASS_SAR
 609:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 610:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #if defined(__cplusplus)
 611:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** extern "C" {
 612:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #endif
 613:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 614:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_macros
 615:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
 616:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 617:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 618:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Driver major version */
 619:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_DRV_VERSION_MAJOR        1
 620:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 621:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Driver minor version */
 622:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_DRV_VERSION_MINOR        20
 623:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 55


 624:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** SAR driver identifier */
 625:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_ID                       CY_PDL_DRV_ID(0x01u)
 626:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 627:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Maximum number of channels */
 628:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_MAX_NUM_CHANNELS         (PASS_SAR_SAR_CHANNELS)
 629:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 630:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \cond INTERNAL */
 631:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_DEINIT                   (0uL)             /**< De-init value for most SAR registers
 632:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SAMPLE_TIME_DEINIT       ((3uL << SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos) | (3uL << SAR_
 633:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CLEAR_ALL_SWITCHES       (0x3FFFFFFFuL)    /**< Value to clear all SARMUX switches *
 634:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_DEINIT_SQ_CTRL           (SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P0_Msk \
 635:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P1_Msk \
 636:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P2_Msk \
 637:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P3_Msk \
 638:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P4_Msk \
 639:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P5_Msk \
 640:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P6_Msk \
 641:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P7_Msk \
 642:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_VSSA_Msk \
 643:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_TEMP_Msk \
 644:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_AMUXBUSA_Msk \
 645:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_AMUXBUSB_Msk \
 646:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_SARBUS0_Msk \
 647:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_SARBUS1_Msk)
 648:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_REG_CTRL_MASK            (SAR_CTRL_PWR_CTRL_VREF_Msk \
 649:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_VREF_SEL_Msk \
 650:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_VREF_BYP_CAP_EN_Msk \
 651:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_NEG_SEL_Msk \
 652:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_SAR_HW_CTRL_NEGVREF_Msk \
 653:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_COMP_DLY_Msk \
 654:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_REFBUF_EN_Msk \
 655:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_COMP_PWR_Msk \
 656:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_DEEPSLEEP_ON_Msk \
 657:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_DSI_SYNC_CONFIG_Msk \
 658:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_DSI_MODE_Msk \
 659:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_SWITCH_DISABLE_Msk \
 660:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_ENABLED_Msk)
 661:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_REG_SAMPLE_CTRL_MASK     (SAR_SAMPLE_CTRL_LEFT_ALIGN_Msk \
 662:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Msk \
 663:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Msk \
 664:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_AVG_CNT_Msk \
 665:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_AVG_SHIFT_Msk \
 666:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_AVG_MODE_Msk \
 667:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_CONTINUOUS_Msk \
 668:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Msk \
 669:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk \
 670:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_DSI_SYNC_TRIGGER_Msk \
 671:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_UAB_SCAN_MODE_Msk \
 672:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_REPEAT_INVALID_Msk \
 673:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_VALID_SEL_Msk \
 674:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_VALID_SEL_EN_Msk \
 675:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_VALID_IGNORE_Msk \
 676:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_TRIGGER_OUT_EN_Msk \
 677:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_EOS_DSI_OUT_EN_Msk)
 678:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_REG_CHAN_CONFIG_MASK     (SAR_CHAN_CONFIG_POS_PIN_ADDR_Msk \
 679:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_POS_PORT_ADDR_Msk \
 680:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_DIFFERENTIAL_EN_Msk \
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 56


 681:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_AVG_EN_Msk \
 682:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_SAMPLE_TIME_SEL_Msk \
 683:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_NEG_PIN_ADDR_Msk \
 684:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_NEG_PORT_ADDR_Msk \
 685:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_NEG_ADDR_EN_Msk \
 686:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_DSI_OUT_EN_Msk)
 687:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_REG_SAMPLE_TIME_MASK     (SAR_SAMPLE_TIME01_SAMPLE_TIME0_Msk | SAR_SAMPLE_TIME01_SAM
 688:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 689:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_2US_DELAY                (2u)              /**< Delay used in Enable API function to
 690:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_10V_COUNTS               (10.0F)           /**< Value of 10 in volts */
 691:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_10MV_COUNTS              (10000)           /**< Value of 10 in millivolts */
 692:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_10UV_COUNTS              (10000000L)       /**< Value of 10 in microvolts */
 693:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_WRK_MAX_12BIT            (0x00001000uL)    /**< Maximum SAR work register value for 
 694:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_RANGE_LIMIT_MAX          (0xFFFFuL)        /**< Maximum value for the low and high r
 695:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CAP_TRIM_MAX             (0x3FuL)          /**< Maximum value for CAP_TRIM */
 696:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CAP_TRIM_MIN             (0x00uL)          /**< Maximum value for CAP_TRIM */
 697:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CAP_TRIM                 (0x0BuL)          /**< Correct cap trim value */
 698:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 699:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /**< Macros for conditions used in CY_ASSERT calls */
 700:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CHANNUM(chan)            ((chan) < CY_SAR_MAX_NUM_CHANNELS)
 701:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CHANMASK(mask)           ((mask) < (1uL << CY_SAR_MAX_NUM_CHANNELS))
 702:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_RANGECOND(cond)          ((cond) <= CY_SAR_RANGE_COND_OUTSIDE)
 703:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_INTRMASK(mask)           ((mask) <= (uint32_t)(CY_SAR_INTR_EOS_MASK | CY_SAR_INTR_OV
 704:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_TRIGGER(mode)            (((mode) == CY_SAR_TRIGGER_MODE_FW_ONLY) \
 705:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         || ((mode) == CY_SAR_TRIGGER_MODE_FW_AND_HWEDGE) \
 706:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         || ((mode) == CY_SAR_TRIGGER_MODE_FW_AND_HWLEVEL))
 707:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_RETURN(mode)             (((mode) == CY_SAR_RETURN_STATUS) || ((mode) == CY_SAR_WAIT
 708:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_STARTCONVERT(mode)       (((mode) == CY_SAR_START_CONVERT_SINGLE_SHOT) || ((mode) ==
 709:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_RANGE_LIMIT(limit)       ((limit) <= CY_SAR_RANGE_LIMIT_MAX)
 710:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SWITCHSELECT(select)     ((select) == CY_SAR_MUX_SWITCH0)
 711:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SWITCHMASK(mask)         ((mask) <= CY_SAR_CLEAR_ALL_SWITCHES)
 712:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SWITCHSTATE(state)       (((state) == CY_SAR_SWITCH_OPEN) || ((state) == CY_SAR_SWIT
 713:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SQMASK(mask)             (((mask) & (~CY_SAR_DEINIT_SQ_CTRL)) == 0uL)
 714:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SQCTRL(ctrl)             (((ctrl) == CY_SAR_SWITCH_SEQ_CTRL_ENABLE) || ((ctrl) == CY
 715:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 716:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CTRL(value)              (((value) & (~CY_SAR_REG_CTRL_MASK)) == 0uL)
 717:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SAMPLE_CTRL(value)       (((value) & (~CY_SAR_REG_SAMPLE_CTRL_MASK)) == 0uL)
 718:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SAMPLE_TIME(value)       (((value) & (~CY_SAR_REG_SAMPLE_TIME_MASK)) == 0uL)
 719:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CHAN_CONFIG(value)       (((value) & (~CY_SAR_REG_CHAN_CONFIG_MASK)) == 0uL)
 720:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \endcond */
 721:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 722:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} group_sar_macro */
 723:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 724:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_globals
 725:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
 726:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 727:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /***************************************
 728:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *        Global Variables
 729:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ***************************************/
 730:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 731:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** This array is used to calibrate the offset for each channel.
 732:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 733:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * At initialization, channels that are single-ended, signed, and with Vneg = Vref
 734:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * have an offset of -(2^12)/2 = -2048. All other channels have an offset of 0.
 735:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The offset can be overridden using \ref Cy_SAR_SetOffset.
 736:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 737:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel offsets are used by the \ref Cy_SAR_CountsTo_Volts, \ref Cy_SAR_CountsTo_mVolts, and
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 57


 738:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref Cy_SAR_CountsTo_uVolts functions to convert counts to voltage.
 739:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 740:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 741:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** extern volatile int16_t Cy_SAR_offset[CY_SAR_MAX_NUM_CHANNELS];
 742:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 743:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** This array is used to calibrate the gain for each channel.
 744:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 745:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * It is set at initialization and the value depends on the SARADC resolution
 746:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and voltage reference, 10*(2^12)/(2*Vref).
 747:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The gain can be overridden using \ref Cy_SAR_SetGain.
 748:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 749:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel gains are used by the \ref Cy_SAR_CountsTo_Volts, \ref Cy_SAR_CountsTo_mVolts, and
 750:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref Cy_SAR_CountsTo_uVolts functions to convert counts to voltage.
 751:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 752:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** extern volatile int32_t Cy_SAR_countsPer10Volt[CY_SAR_MAX_NUM_CHANNELS];
 753:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 754:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} group_sar_globals */
 755:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 756:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_enums
 757:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
 758:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 759:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 760:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /******************************************************************************
 761:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****  * Enumerations
 762:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****  *****************************************************************************/
 763:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 764:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** The SAR status/error code definitions */
 765:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 766:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 767:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SUCCESS    = 0x00uL,                                      /**< Success */
 768:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_BAD_PARAM  = CY_SAR_ID | CY_PDL_STATUS_ERROR | 0x01uL,    /**< Invalid input parameters 
 769:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_TIMEOUT    = CY_SAR_ID | CY_PDL_STATUS_ERROR | 0x02uL,    /**< A timeout occurred */
 770:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CONVERSION_NOT_COMPLETE = CY_SAR_ID | CY_PDL_STATUS_ERROR | 0x03uL,    /**< SAR conversi
 771:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_status_t;
 772:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 773:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Definitions for starting a conversion used in \ref Cy_SAR_StartConvert */
 774:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 775:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 776:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_START_CONVERT_SINGLE_SHOT = 0uL, /**< Start a single scan (one shot) from firmware */
 777:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_START_CONVERT_CONTINUOUS  = 1uL, /**< Continuously scan enabled channels and ignores all
 778:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_start_convert_sel_t;
 779:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 780:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Definitions for the return mode used in \ref Cy_SAR_IsEndConversion */
 781:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 782:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 783:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RETURN_STATUS    = 0uL,      /**< Immediately returns the conversion status. */
 784:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_WAIT_FOR_RESULT  = 1uL,    /**< Does not return a result until the conversion of all seq
 785:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_return_mode_t;
 786:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 787:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Switch state definitions */
 788:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 789:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 790:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SWITCH_OPEN      = 0uL,    /**< Open the switch */
 791:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SWITCH_CLOSE     = 1uL     /**< Close the switch */
 792:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_switch_state_t;
 793:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 794:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Definitions for sequencer control of switches */
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 58


 795:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 796:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 797:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SWITCH_SEQ_CTRL_DISABLE = 0uL, /**< Disable sequencer control of switch */
 798:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SWITCH_SEQ_CTRL_ENABLE  = 1uL  /**< Enable sequencer control of switch */
 799:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_switch_sar_seq_ctrl_t;
 800:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 801:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Switch register selection for \ref Cy_SAR_SetAnalogSwitch and \ref Cy_SAR_GetAnalogSwitch */
 802:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 803:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 804:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SWITCH0  = 0uL,      /**< SARMUX switch control register */
 805:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_switch_register_sel_t;
 806:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 807:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_ctrl_register_enums
 808:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the SAR CTRL register
 809:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
 810:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 811:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Reference voltage buffer power mode definitions */
 812:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 813:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 814:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_100     = 0uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< Full power (100%) */
 815:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_80      = 1uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 80% power */
 816:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_60      = 2uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 60% power */
 817:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_50      = 3uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 50% power */
 818:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_40      = 4uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 40% power */
 819:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_30      = 5uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 30% power */
 820:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_20      = 6uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 20% power */
 821:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_10      = 7uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 10% power */
 822:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_pwr_ctrl_vref_t;
 823:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 824:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Reference voltage selection definitions */
 825:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 826:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 827:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_SEL_BGR         = 4uL << SAR_CTRL_VREF_SEL_Pos,     /**< System wide bandgap from \
 828:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_SEL_EXT         = 5uL << SAR_CTRL_VREF_SEL_Pos,     /**< External Vref direct from 
 829:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_SEL_VDDA_DIV_2  = 6uL << SAR_CTRL_VREF_SEL_Pos,     /**< Vdda/2 (Vref buffer on) */
 830:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_SEL_VDDA        = 7uL << SAR_CTRL_VREF_SEL_Pos      /**< Vdda */
 831:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_vref_sel_t;
 832:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 833:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Vref bypass cap enable.
 834:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When enabled, a bypass capacitor should
 835:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * be connected to the dedicated Vref pin of the device.
 836:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Refer to the device datasheet for the minimum bypass capacitor value to use.
 837:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 838:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 839:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 840:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_BYPASS_CAP_DISABLE = 0uL << SAR_CTRL_VREF_BYP_CAP_EN_Pos,    /**< Disable Vref bypass ca
 841:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_BYPASS_CAP_ENABLE  = 1uL << SAR_CTRL_VREF_BYP_CAP_EN_Pos     /**< Enable Vref bypass cap
 842:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_bypass_cap_t;
 843:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 844:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Negative terminal (Vminus) selection definitions for single-ended channels.
 845:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 846:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The Vminus input for single ended channels can be connected to
 847:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Vref, VSSA, or routed out to an external pin.
 848:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The options for routing to a pin are through Pin 1, Pin 3, Pin 5, or Pin 7
 849:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * of the SARMUX dedicated port or an acore wire in AROUTE, if available on the device.
 850:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 851:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref CY_SAR_NEG_SEL_VSSA_KELVIN comes straight from a Vssa pad without any shared branches
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 59


 852:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * so as to keep quiet and avoid voltage drops.
 853:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 854:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 855:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 856:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_VSSA_KELVIN  = 0uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to VSSA_KELVIN 
 857:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_P1           = 2uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to Pin 1 of SAR
 858:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_P3           = 3uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to Pin 3 of SAR
 859:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_P5           = 4uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to Pin 5 of SAR
 860:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_P7           = 5uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to Pin 6 of SAR
 861:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_ACORE        = 6uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to an ACORE in 
 862:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_VREF         = 7uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to VREF input o
 863:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_neg_sel_t;
 864:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 865:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Enable hardware control of the switch between Vref and the Vminus input */
 866:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 867:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 868:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_NEGVREF_FW_ONLY = 0uL << SAR_CTRL_SAR_HW_CTRL_NEGVREF_Pos,    /**< Only firmware co
 869:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_NEGVREF_HW      = 1uL << SAR_CTRL_SAR_HW_CTRL_NEGVREF_Pos     /**< Enable hardware 
 870:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_hw_ctrl_negvref_t;
 871:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 872:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the comparator latch delay */
 873:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 874:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 875:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_COMP_DLY_2P5    = 0uL << SAR_CTRL_COMP_DLY_Pos,    /**< 2.5 ns delay, use for SAR c
 876:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_COMP_DLY_4      = 1uL << SAR_CTRL_COMP_DLY_Pos,    /**< 4 ns delay, use for SAR con
 877:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_COMP_DLY_10     = 2uL << SAR_CTRL_COMP_DLY_Pos,    /**< 10 ns delay, use for SAR co
 878:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_COMP_DLY_12     = 3uL << SAR_CTRL_COMP_DLY_Pos     /**< 12 ns delay, use for SAR co
 879:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_comp_delay_t;
 880:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 881:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the comparator power mode */
 882:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 883:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 884:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_100     = 0uL << SAR_CTRL_COMP_PWR_Pos,      /**< 100% power, use this for > 2 
 885:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_80      = 1uL << SAR_CTRL_COMP_PWR_Pos,      /**< 80% power, use this for 1.5 -
 886:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_60      = 2uL << SAR_CTRL_COMP_PWR_Pos,      /**< 60% power, use this for 1.0 -
 887:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_50      = 3uL << SAR_CTRL_COMP_PWR_Pos,      /**< 50% power, use this for 500 k
 888:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_40      = 4uL << SAR_CTRL_COMP_PWR_Pos,      /**< 40% power, use this for 250 -
 889:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_30      = 5uL << SAR_CTRL_COMP_PWR_Pos,      /**< 30% power, use this for 100 -
 890:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_20      = 6uL << SAR_CTRL_COMP_PWR_Pos,      /**< 20% power, use this for TDB s
 891:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_10      = 7uL << SAR_CTRL_COMP_PWR_Pos,      /**< 10% power, use this for < 100
 892:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_comp_pwr_t;
 893:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 894:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Enable or disable the SARMUX during Deep Sleep power mode. */
 895:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 896:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 897:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_DEEPSLEEP_SARMUX_OFF = 0uL << SAR_CTRL_DEEPSLEEP_ON_Pos,    /**< Disable SARMUX operatio
 898:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_DEEPSLEEP_SARMUX_ON  = 1uL << SAR_CTRL_DEEPSLEEP_ON_Pos     /**< Enable SARMUX operation
 899:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_sarmux_deep_sleep_t;
 900:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 901:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Enable or disable the SARSEQ control of routing switches */
 902:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 903:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 904:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SARSEQ_SWITCH_ENABLE    = 0uL << SAR_CTRL_SWITCH_DISABLE_Pos,    /**< Enable the SARSEQ 
 905:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SARSEQ_SWITCH_DISABLE   = 1uL << SAR_CTRL_SWITCH_DISABLE_Pos     /**< Disable the SARSEQ
 906:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_sarseq_routing_switches_t;
 907:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 908:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 60


 909:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 910:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_sample_ctrl_register_enums
 911:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations are used in configuring the SAR SAMPLE_CTRL register
 912:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
 913:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 914:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure result alignment, either left or right aligned.
 915:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 916:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \note
 917:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Averaging always uses right alignment. If the \ref CY_SAR_LEFT_ALIGN
 918:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * is selected with averaging enabled, it is ignored.
 919:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 920:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \note
 921:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The voltage conversion functions (\ref Cy_SAR_CountsTo_Volts, \ref Cy_SAR_CountsTo_mVolts,
 922:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref Cy_SAR_CountsTo_uVolts) are only valid for right alignment.
 923:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * */
 924:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 925:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 926:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RIGHT_ALIGN  = 0uL << SAR_SAMPLE_CTRL_LEFT_ALIGN_Pos,    /**< Right align result data to
 927:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_LEFT_ALIGN   = 1uL << SAR_SAMPLE_CTRL_LEFT_ALIGN_Pos     /**< Left align result data to 
 928:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_result_align_t;
 929:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 930:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure format, signed or unsigned, of single-ended channels */
 931:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 932:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 933:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SINGLE_ENDED_UNSIGNED  = 0uL << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos,    /**< Result 
 934:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SINGLE_ENDED_SIGNED    = 1uL << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos     /**< Result 
 935:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_single_ended_format_t;
 936:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 937:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure format, signed or unsigned, of differential channels */
 938:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 939:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 940:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_DIFFERENTIAL_UNSIGNED  = 0uL << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos,    /**< Result 
 941:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_DIFFERENTIAL_SIGNED    = 1uL << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos     /**< Result 
 942:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_differential_format_t;
 943:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 944:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure number of samples for averaging.
 945:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This applies only to channels with averaging enabled.
 946:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 947:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 948:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 949:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_2          = 0uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 950:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_4          = 1uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 951:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_8          = 2uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 952:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_16         = 3uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 953:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_32         = 4uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 954:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_64         = 5uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 955:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_128        = 6uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 956:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_256        = 7uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos     /**< Set samples averaged to
 957:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_avg_cnt_t;
 958:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 959:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the averaging mode.
 960:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 961:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Sequential accumulate and dump: a channel will be sampled back to back.
 962:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   The result is added to a running sum in a 20-bit register. At the end
 963:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   of the scan, the accumulated value is shifted right to fit into 16 bits
 964:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   and stored into the CHAN_RESULT register.
 965:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Sequential fixed:  a channel will be sampled back to back.
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 61


 966:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   The result is added to a running sum in a 20-bit register. At the end
 967:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   of the scan, the accumulated value is shifted right to fit into 12 bits
 968:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   and stored into the CHAN_RESULT register.
 969:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Interleaved: a channel will be sampled once per scan.
 970:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   The result is added to a running sum in a 16-bit register.
 971:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   In the scan where the final averaging count is reached,
 972:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   the accumulated value is shifted right to fit into 12 bits
 973:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   and stored into the CHAN_RESULT register.
 974:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   In all other scans, the CHAN_RESULT will have an invalid result.
 975:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   In interleaved mode, make sure that the averaging
 976:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   count is low enough to ensure that the intermediate value does not exceed 16 bits,
 977:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   that is averaging count is 16 or less. Otherwise, the MSBs will be lost.
 978:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   In the special case that averaging is enabled for all enabled channels
 979:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   and interleaved mode is used, the interrupt frequency
 980:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   will be reduced by a factor of the number of samples averaged.
 981:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 982:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 983:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 984:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_MODE_SEQUENTIAL_ACCUM    = 0uL,                               /**< Set mode to seque
 985:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_MODE_SEQUENTIAL_FIXED    = SAR_SAMPLE_CTRL_AVG_SHIFT_Msk,     /**< Set mode to seque
 986:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_MODE_INTERLEAVED         = SAR_SAMPLE_CTRL_AVG_MODE_Msk,      /**< Set mode to inter
 987:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_avg_mode_t;
 988:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 989:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the trigger mode.
 990:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 991:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Firmware triggering is always enabled and can be single shot or continuous.
 992:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Additionally, hardware triggering can be enabled with the option to be
 993:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * edge or level sensitive.
 994:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 995:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 996:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 997:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_TRIGGER_MODE_FW_ONLY        = 0uL,                                /**< Firmware trigger 
 998:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_TRIGGER_MODE_FW_AND_HWEDGE  = SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Msk, /**< Enable edge sensi
 999:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_TRIGGER_MODE_FW_AND_HWLEVEL = SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Msk | SAR_SAMPLE_CTRL_DSI_T
1000:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_trigger_mode_t;
1001:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1002:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1003:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1004:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_sample_time_shift_enums
1005:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the SAR SAMPLE_TIME* registers
1006:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1007:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1008:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the sample time by using these shifts */
1009:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1010:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1011:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SAMPLE_TIME0_SHIFT       = SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos,             /**< Shift fo
1012:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SAMPLE_TIME1_SHIFT       = SAR_SAMPLE_TIME01_SAMPLE_TIME1_Pos,             /**< Shift fo
1013:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SAMPLE_TIME2_SHIFT       = SAR_SAMPLE_TIME23_SAMPLE_TIME2_Pos,             /**< Shift fo
1014:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SAMPLE_TIME3_SHIFT       = SAR_SAMPLE_TIME23_SAMPLE_TIME3_Pos,             /**< Shift fo
1015:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_time_shift_t;
1016:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1017:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1018:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_range_thres_register_enums
1019:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the SAR RANGE* registers
1020:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1021:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1022:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the lower and upper thresholds for range detection
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 62


1023:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1024:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SARSEQ supports range detection to allow for automatic detection of sample
1025:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * values compared to two programmable thresholds without CPU involvement.
1026:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Range detection is defined by two global thresholds and a condition.
1027:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The RANGE_LOW value defines the lower threshold and RANGE_HIGH defines
1028:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the upper threshold of the range.
1029:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1030:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Range detect is done after averaging, alignment, and sign extension (if applicable).
1031:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * In other words, the thresholds values must have the same data format as the result data.
1032:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Range detection is always done for all channels scanned. By making RANGE_INTR_MASK=0,
1033:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the firmware can choose to ignore the range detect interrupt for any channel.
1034:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1035:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1036:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1037:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_LOW_SHIFT      = SAR_RANGE_THRES_RANGE_LOW_Pos,        /**< Shift for setting lowe
1038:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_HIGH_SHIFT     = SAR_RANGE_THRES_RANGE_HIGH_Pos,       /**< Shift for setting uppe
1039:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_range_thres_shift_t;
1040:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1041:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the condition (below, inside, above, or outside) of the range detection interrupt */
1042:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1043:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1044:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_COND_BELOW     = 0uL,  /**< Range interrupt detected when result < RANGE_LOW */
1045:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_COND_INSIDE    = 1uL,  /**< Range interrupt detected when RANGE_LOW <= result < RA
1046:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_COND_ABOVE     = 2uL,  /**< Range interrupt detected when RANGE_HIGH <= result */
1047:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_COND_OUTSIDE   = 3uL,  /**< Range interrupt detected when result < RANGE_LOW || RA
1048:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_range_detect_condition_t;
1049:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1050:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1051:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_chan_config_register_enums
1052:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the SAR CHAN_CONFIG register
1053:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1054:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1055:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the input mode of the channel
1056:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1057:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Single ended channel: the \ref cy_en_sar_ctrl_neg_sel_t selection in the \ref group_sar_init_st
1058:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   determines what drives the Vminus pin
1059:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Differential paired: Vplus and Vminus are a pair. Bit 0 of \ref cy_en_sar_chan_config_pos_pin_a
1060:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   is ignored and considered to be 0.
1061:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   In other words, \ref cy_en_sar_chan_config_pos_pin_addr_t "POS_PIN_ADDR" points to the even pin
1062:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   The even pin is connected to Vplus and the odd pin is connected to Vminus.
1063:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \ref cy_en_sar_chan_config_pos_port_addr_t "POS_PORT_ADDR" is used to identify the port that co
1064:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Differential unpaired: The \ref cy_en_sar_chan_config_neg_pin_addr_t "NEG_PIN_ADDR" and
1065:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \ref cy_en_sar_chan_config_neg_port_addr_t "NEG_PORT_ADDR" determine what drives the Vminus pin
1066:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   This is a variation of differential mode with no even-odd pair limitation
1067:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1068:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1069:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1070:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_SINGLE_ENDED            = 0uL,                                     /**< Single ende
1071:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_DIFFERENTIAL_PAIRED     = SAR_CHAN_CONFIG_DIFFERENTIAL_EN_Msk,     /**< Differentia
1072:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_DIFFERENTIAL_UNPAIRED   = SAR_CHAN_CONFIG_NEG_ADDR_EN_Msk          /**< Differentia
1073:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_input_mode_t;
1074:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1075:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure address of the pin connected to the Vplus terminal of the SARADC. */
1076:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1077:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1078:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_0     = 0uL,                                            /**< Pin 0 on 
1079:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_1     = 1uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 1 on 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 63


1080:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_2     = 2uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 2 on 
1081:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_3     = 3uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 3 on 
1082:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_4     = 4uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 4 on 
1083:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_5     = 5uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 5 on 
1084:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_6     = 6uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 6 on 
1085:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_7     = 7uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 7 on 
1086:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_pos_pin_addr_t;
1087:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1088:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure address of the port that contains the pin connected to the Vplus terminal of the SARA
1089:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1090:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_POS_PORT_ADDR_SARMUX is for the dedicated SARMUX port (8 pins)
1091:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Port 1 through 4 are respectively the pins of CTB0, CTB1, CTB2, and CTB3 (if present)
1092:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Port 7, 5, and 6 (VPORT0/1/2) are the groups of internal signals that can be selected
1093:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   in the SARMUX or AROUTE (if present).
1094:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1095:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * See the \ref group_sar_sarmux section for more guidance.
1096:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1097:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1098:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1099:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_SARMUX         = 0uL,                                       /**< Dedicated
1100:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_CTB0           = 1uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< Outputs f
1101:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_CTB1           = 2uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< Outputs f
1102:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_CTB2           = 3uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< Outputs f
1103:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_CTB3           = 4uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< Outputs f
1104:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_AROUTE_VIRT2   = 5uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< AROUTE vi
1105:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_AROUTE_VIRT1   = 6uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< AROUTE vi
1106:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_SARMUX_VIRT    = 7uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< SARMUX vi
1107:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_pos_port_addr_t;
1108:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1109:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Enable or disable averaging for the channel */
1110:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1111:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1112:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_AVG_DISABLE      = 0uL,                                 /**< Disable averaging for 
1113:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_AVG_ENABLE       = 1uL << SAR_CHAN_CONFIG_AVG_EN_Pos    /**< Enable averaging for t
1114:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_avg_en_t;
1115:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1116:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Select which sample time to use for the channel.
1117:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * There are four global samples times available set by \ref group_sar_init_struct_sampleTime01 and
1118:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref group_sar_init_struct_sampleTime23.
1119:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1120:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1121:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1122:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_SAMPLE_TIME_0     = 0uL,                                          /**< Use sample t
1123:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_SAMPLE_TIME_1     = 1uL << SAR_CHAN_CONFIG_SAMPLE_TIME_SEL_Pos,   /**< Use sample t
1124:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_SAMPLE_TIME_2     = 2uL << SAR_CHAN_CONFIG_SAMPLE_TIME_SEL_Pos,   /**< Use sample t
1125:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_SAMPLE_TIME_3     = 3uL << SAR_CHAN_CONFIG_SAMPLE_TIME_SEL_Pos,   /**< Use sample t
1126:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_sample_time_t;
1127:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1128:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure address of the pin connected to the Vminus terminal of the SARADC. */
1129:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1130:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1131:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_0     = 0uL,                                            /**< Pin 0 on 
1132:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_1     = 1uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 1 on 
1133:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_2     = 2uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 2 on 
1134:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_3     = 3uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 3 on 
1135:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_4     = 4uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 4 on 
1136:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_5     = 5uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 5 on 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 64


1137:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_6     = 6uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 6 on 
1138:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_7     = 7uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 7 on 
1139:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_neg_pin_addr_t;
1140:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1141:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure address of the port that contains the pin connected to the Vminus terminal of the SAR
1142:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1143:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Port 0 is 8 pins of the SARMUX
1144:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Port 7, 5, and 6 (VPORT0/1/2) are the groups of internal signals that can be selected
1145:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   in the SARMUX or AROUTE (if present).
1146:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1147:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1148:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1149:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_PORT_ADDR_SARMUX         = 0uL,                                       /**< Dedicated
1150:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_PORT_ADDR_AROUTE_VIRT2   = 5uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< AROUTE vi
1151:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_PORT_ADDR_AROUTE_VIRT1   = 6uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< AROUTE vi
1152:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_PORT_ADDR_SARMUX_VIRT    = 7uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< SARMUX vi
1153:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_neg_port_addr_t;
1154:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1155:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1156:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1157:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_intr_mask_t_register_enums
1158:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the SAR INTR_MASK register
1159:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1160:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1161:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure which signal will cause an interrupt event.
1162:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1163:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - End of scan (EOS): occurs after completing a scan of all enabled channels
1164:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Overflow: occurs when hardware sets a new EOS interrupt while the previous interrupt
1165:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   has not be cleared by the firmware
1166:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Firmware collision: occurs when firmware attempts to start one-shot
1167:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   conversion while the SAR is busy.
1168:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1169:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Enable all, one, or none of the interrupt events.
1170:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1171:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1172:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1173:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_INTR_MASK_NONE           = 0uL,                                  /**< Disable all interr
1174:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_INTR_EOS_MASK            = SAR_INTR_MASK_EOS_MASK_Msk,           /**< Enable end of scan
1175:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_INTR_OVERFLOW_MASK       = SAR_INTR_MASK_OVERFLOW_MASK_Msk,      /**< Enable overflow in
1176:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_INTR_FW_COLLISION_MASK   = SAR_INTR_MASK_FW_COLLISION_MASK_Msk,  /**< Enable firmware co
1177:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_intr_mask_t;
1178:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1179:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1180:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1181:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_mux_switch_register_enums
1182:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the \ref group_sar_init_struct_muxSwitch and \ref gr
1183:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1184:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1185:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1186:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Firmware control for the SARMUX switches to connect analog signals to the SAR ADC
1187:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1188:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To close multiple switches, "OR" the enum values together.
1189:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1190:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * See the \ref group_sar_sarmux section for more guidance.
1191:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1192:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1193:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 65


1194:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* SARMUX pins to Vplus */
1195:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P0_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P0_VPLUS_Msk,    /**< Switch between Pi
1196:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P1_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P1_VPLUS_Msk,    /**< Switch between Pi
1197:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P2_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P2_VPLUS_Msk,    /**< Switch between Pi
1198:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P3_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P3_VPLUS_Msk,    /**< Switch between Pi
1199:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P4_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P4_VPLUS_Msk,    /**< Switch between Pi
1200:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P5_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P5_VPLUS_Msk,    /**< Switch between Pi
1201:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P6_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P6_VPLUS_Msk,    /**< Switch between Pi
1202:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P7_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P7_VPLUS_Msk,    /**< Switch between Pi
1203:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1204:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* SARMUX pins to Vminus */
1205:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P0_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P0_VMINUS_Msk,   /**< Switch between Pi
1206:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P1_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P1_VMINUS_Msk,   /**< Switch between Pi
1207:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P2_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P2_VMINUS_Msk,   /**< Switch between Pi
1208:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P3_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P3_VMINUS_Msk,   /**< Switch between Pi
1209:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P4_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P4_VMINUS_Msk,   /**< Switch between Pi
1210:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P5_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P5_VMINUS_Msk,   /**< Switch between Pi
1211:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P6_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P6_VMINUS_Msk,   /**< Switch between Pi
1212:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P7_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P7_VMINUS_Msk,   /**< Switch between Pi
1213:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1214:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* Vssa to Vminus and temperature sensor to Vplus */
1215:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_VSSA_VMINUS      = SAR_MUX_SWITCH0_MUX_FW_VSSA_VMINUS_Msk,    /**< Switch between
1216:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_TEMP_VPLUS       = SAR_MUX_SWITCH0_MUX_FW_TEMP_VPLUS_Msk,     /**< Switch between
1217:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1218:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* Amuxbus A and B to Vplus and Vminus */
1219:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_AMUXBUSA_VPLUS   = SAR_MUX_SWITCH0_MUX_FW_AMUXBUSA_VPLUS_Msk,     /**< Switch bet
1220:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_AMUXBUSB_VPLUS   = SAR_MUX_SWITCH0_MUX_FW_AMUXBUSB_VPLUS_Msk,     /**< Switch bet
1221:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_AMUXBUSA_VMINUS  = SAR_MUX_SWITCH0_MUX_FW_AMUXBUSA_VMINUS_Msk,    /**< Switch bet
1222:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_AMUXBUSB_VMINUS  = SAR_MUX_SWITCH0_MUX_FW_AMUXBUSB_VMINUS_Msk,    /**< Switch bet
1223:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1224:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* Sarbus 0 and 1 to Vplus and Vminus */
1225:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_SARBUS0_VPLUS    = SAR_MUX_SWITCH0_MUX_FW_SARBUS0_VPLUS_Msk,      /**< Switch bet
1226:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_SARBUS1_VPLUS    = SAR_MUX_SWITCH0_MUX_FW_SARBUS1_VPLUS_Msk,      /**< Switch bet
1227:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_SARBUS0_VMINUS   = SAR_MUX_SWITCH0_MUX_FW_SARBUS0_VMINUS_Msk,     /**< Switch bet
1228:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_SARBUS1_VMINUS   = SAR_MUX_SWITCH0_MUX_FW_SARBUS1_VMINUS_Msk,     /**< Switch bet
1229:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1230:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* SARMUX pins to Core IO */
1231:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P4_COREIO0       = SAR_MUX_SWITCH0_MUX_FW_P4_COREIO0_Msk,      /**< Switch betwee
1232:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P5_COREIO1       = SAR_MUX_SWITCH0_MUX_FW_P5_COREIO1_Msk,      /**< Switch betwee
1233:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P6_COREIO2       = SAR_MUX_SWITCH0_MUX_FW_P6_COREIO2_Msk,      /**< Switch betwee
1234:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P7_COREIO3       = SAR_MUX_SWITCH0_MUX_FW_P7_COREIO3_Msk,      /**< Switch betwee
1235:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_mux_switch_fw_ctrl_t;
1236:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1237:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Mask definitions of SARMUX switches that can be controlled by the SARSEQ.
1238:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1239:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To enable sequencer control of multiple switches, "OR" the enum values together.
1240:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1241:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * See the \ref group_sar_sarmux section for more guidance.
1242:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1243:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1244:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1245:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P0           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P0_Msk,        /**< Enable
1246:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P1           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P1_Msk,        /**< Enable
1247:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P2           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P2_Msk,        /**< Enable
1248:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P3           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P3_Msk,        /**< Enable
1249:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P4           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P4_Msk,        /**< Enable
1250:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P5           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P5_Msk,        /**< Enable
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 66


1251:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P6           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P6_Msk,        /**< Enable
1252:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P7           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P7_Msk,        /**< Enable
1253:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_VSSA         = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_VSSA_Msk,      /**< Enable
1254:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_TEMP         = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_TEMP_Msk,      /**< Enable
1255:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_AMUXBUSA     = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_AMUXBUSA_Msk,  /**< Enable
1256:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_AMUXBUSB     = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_AMUXBUSB_Msk,  /**< Enable
1257:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_SARBUS0      = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_SARBUS0_Msk,   /**< Enable
1258:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_SARBUS1      = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_SARBUS1_Msk,   /**< Enable
1259:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_mux_switch_sq_ctrl_t;
1260:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1261:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1262:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1263:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} group_sar_enums */
1264:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1265:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_data_structures
1266:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1267:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1268:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1269:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /***************************************
1270:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       Configuration Structures
1271:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ***************************************/
1272:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1273:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** This structure is used to initialize the SAR ADC subsystem.
1274:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1275:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR ADC subsystem is highly configurable with many options.
1276:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When calling \ref Cy_SAR_Init, provide a pointer to the structure containing this configuration d
1277:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * A set of enumerations is provided in this
1278:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * driver to help with configuring this structure.
1279:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1280:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * See the \ref group_sar_initialization section for guidance.
1281:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** **/
1282:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef struct
1283:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1284:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t ctrl;                                      /**< Control register settings (applies to 
1285:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t sampleCtrl;                                /**< Sample control register settings (appl
1286:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t sampleTime01;                              /**< Sample time in ADC clocks for Sample T
1287:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t sampleTime23;                              /**< Sample time in ADC clocks for Sample T
1288:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t rangeThres;                                /**< Range detect threshold register for al
1289:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     cy_en_sar_range_detect_condition_t rangeCond;       /**< Range detect condition (below, inside,
1290:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t chanEn;                                    /**< Enable bits for the channels */
1291:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t chanConfig[CY_SAR_MAX_NUM_CHANNELS];       /**< Channel configuration */
1292:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t intrMask;                                  /**< Interrupt enable mask */
1293:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t satIntrMask;                               /**< Saturation detection interrupt enable 
1294:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t rangeIntrMask;                             /**< Range detection interrupt enable mask 
1295:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t muxSwitch;                                 /**< SARMUX firmware switches to connect an
1296:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t muxSwitchSqCtrl;                           /**< Enable SARSEQ control of specific SARM
1297:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     bool configRouting;                                 /**< Configure or ignore routing related re
1298:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t vrefMvValue;                               /**< Reference voltage in millivolts used i
1299:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** } cy_stc_sar_config_t;
1300:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1301:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** This structure is used by the driver to backup the state of the SAR
1302:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * before entering sleep so that it can be re-enabled after waking up */
1303:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef struct
1304:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1305:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t hwEnabled;         /**< SAR enabled state */
1306:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t continuous;        /**< State of the continuous bit */
1307:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** } cy_stc_sar_state_backup_t;
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 67


1308:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1309:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} group_sar_data_structures */
1310:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1311:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions
1312:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1313:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1314:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1315:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** This macro is for backward compatibility macro for driver v1.10 and before, 
1316:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****  * the preferred API is \ref Cy_SAR_DeepSleep */
1317:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define Cy_SAR_Sleep    Cy_SAR_DeepSleep
1318:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1319:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /***************************************
1320:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *        Function Prototypes
1321:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ***************************************/
1322:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1323:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_basic
1324:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions is for initialization and basic usage
1325:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1326:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1327:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_sar_status_t Cy_SAR_Init(SAR_Type *base, const cy_stc_sar_config_t *config);
1328:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_sar_status_t Cy_SAR_DeInit(SAR_Type *base, bool deInitRouting);
1329:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_Enable(SAR_Type *base);
1330:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_Disable(SAR_Type *base);
1331:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_StartConvert(SAR_Type *base, cy_en_sar_start_convert_sel_t startSelect);
1332:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_StopConvert(SAR_Type *base);
1333:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_sar_status_t Cy_SAR_IsEndConversion(SAR_Type *base, cy_en_sar_return_mode_t retMode);
1334:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** int16_t Cy_SAR_GetResult16(const SAR_Type *base, uint32_t chan);
1335:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** int32_t Cy_SAR_GetResult32(const SAR_Type *base, uint32_t chan);
1336:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetChanResultUpdated(const SAR_Type *base);
1337:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1338:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1339:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_power
1340:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions is for Deep Sleep entry and exit
1341:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1342:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1343:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_syspm_status_t Cy_SAR_DeepSleepCallback(cy_stc_syspm_callback_params_t *callbackParams, cy_en
1344:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_DeepSleep(SAR_Type *base);
1345:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_Wakeup(SAR_Type *base);
1346:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1347:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1348:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_config
1349:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions allows changes to the SAR configuration
1350:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * after initialization.
1351:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1352:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1353:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_SetConvertMode(SAR_Type *base, cy_en_sar_sample_ctrl_trigger_mode_t mode);
1354:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetChanMask(SAR_Type *base, uint32_t enableMask);
1355:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_SetLowLimit(SAR_Type *base, uint32_t lowLimit);
1356:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_SetHighLimit(SAR_Type *base, uint32_t highLimit);
1357:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetRangeCond(SAR_Type *base, cy_en_sar_range_detect_condition_t cond);
1358:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1359:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1360:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_countsto
1361:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions performs counts to *volts conversions.
1362:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1363:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1364:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** int16_t Cy_SAR_RawCounts2Counts(const SAR_Type *base, uint32_t chan, int16_t adcCounts);
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 68


1365:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** float32_t Cy_SAR_CountsTo_Volts(const SAR_Type *base, uint32_t chan, int16_t adcCounts);
1366:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** int16_t Cy_SAR_CountsTo_mVolts(const SAR_Type *base, uint32_t chan, int16_t adcCounts);
1367:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** int32_t Cy_SAR_CountsTo_uVolts(const SAR_Type *base, uint32_t chan, int16_t adcCounts);
1368:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_sar_status_t Cy_SAR_SetOffset(uint32_t chan, int16_t offset);
1369:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_sar_status_t Cy_SAR_SetGain(uint32_t chan, int32_t adcGain);
1370:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1371:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1372:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_switches
1373:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions is for controlling/querying the SARMUX switches
1374:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1375:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1376:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_SetAnalogSwitch(SAR_Type *base, cy_en_sar_switch_register_sel_t switchSelect, uint32_t 
1377:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** uint32_t Cy_SAR_GetAnalogSwitch(const SAR_Type *base, cy_en_sar_switch_register_sel_t switchSelect)
1378:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetVssaVminusSwitch(SAR_Type *base, cy_en_sar_switch_state_t state);
1379:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_SetSwitchSarSeqCtrl(SAR_Type *base, uint32_t switchMask, cy_en_sar_switch_sar_seq_ctrl_
1380:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetVssaSarSeqCtrl(SAR_Type *base, cy_en_sar_switch_sar_seq_ctrl_t ctrl)
1381:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1382:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1383:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_interrupt
1384:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions are related to SAR interrupts.
1385:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1386:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1387:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptStatus(const SAR_Type *base);
1388:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_ClearInterrupt(SAR_Type *base, uint32_t intrMask);
1389:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetInterrupt(SAR_Type *base, uint32_t intrMask);
1390:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetInterruptMask(SAR_Type *base, uint32_t intrMask);
1391:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptMask(const SAR_Type *base);
1392:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptStatusMasked(const SAR_Type *base);
1393:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1394:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetRangeInterruptStatus(const SAR_Type *base);
1395:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_ClearRangeInterrupt(SAR_Type *base, uint32_t chanMask);
1396:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetRangeInterrupt(SAR_Type *base, uint32_t chanMask);
1397:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetRangeInterruptMask(SAR_Type *base, uint32_t chanMask);
1398:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetRangeInterruptMask(const SAR_Type *base);
1399:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetRangeInterruptStatusMasked(const SAR_Type *base);
1400:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1401:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetSatInterruptStatus(const SAR_Type *base);
1402:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_ClearSatInterrupt(SAR_Type *base, uint32_t chanMask);
1403:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetSatInterrupt(SAR_Type *base, uint32_t chanMask);
1404:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetSatInterruptMask(SAR_Type *base, uint32_t chanMask);
1405:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetSatInterruptMask(const SAR_Type *base);
1406:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetSatInterruptStatusMasked(const SAR_Type *base);
1407:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1408:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptCause(const SAR_Type *base);
1409:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1410:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1411:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1412:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_helper
1413:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions is for useful configuration query
1414:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1415:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1416:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** bool Cy_SAR_IsChannelSigned(const SAR_Type *base, uint32_t chan);
1417:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** bool Cy_SAR_IsChannelSingleEnded(const SAR_Type *base, uint32_t chan);
1418:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE bool Cy_SAR_IsChannelDifferential(const SAR_Type *base, uint32_t chan);
1419:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1420:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1421:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_basic
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 69


1422:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1423:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1424:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1425:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1426:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1427:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_Disable
1428:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1429:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1430:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Turn off the hardware block.
1431:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1432:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1433:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1434:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1435:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1436:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1437:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1438:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_Disable(SAR_Type *base)
1439:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1440:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_CTRL(base) &= ~SAR_CTRL_ENABLED_Msk;
1441:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1442:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1443:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1444:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1445:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetChanResultUpdated
1446:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1447:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1448:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return whether the RESULT register has been updated or not.
1449:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If the bit is high, the corresponding channel RESULT register was updated,
1450:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * i.e. was sampled during the previous scan and, in case of Interleaved averaging,
1451:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * reached the averaging count.
1452:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If the bit is low, the corresponding channel is not enabled or the averaging count
1453:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * is not yet reached for Interleaved averaging.
1454:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1455:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1456:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1457:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1458:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return
1459:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Each bit of the result corresponds to the channel.
1460:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Bit 0 is for channel 0, etc.
1461:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1462:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1463:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1464:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_GET_CHAN_RESULT_UPDATED
1465:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1466:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1467:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetChanResultUpdated(const SAR_Type *base)
1468:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1469:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_CHAN_RESULT_UPDATED(base);
1470:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1471:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1472:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1473:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_config
1474:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1475:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1476:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1477:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1478:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 70


1479:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetChanMask
1480:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1481:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1482:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Set the enable/disable mask for the channels.
1483:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1484:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1485:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1486:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1487:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param enableMask
1488:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Channel enable/disable mask. Each bit corresponds to a channel.
1489:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - 0: the corresponding channel is disabled.
1490:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - 1: the corresponding channel is enabled; it will be included in the next scan.
1491:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1492:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1493:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1494:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1495:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1496:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SET_CHAN_MASK
1497:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1498:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1499:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetChanMask(SAR_Type *base, uint32_t enableMask)
1500:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1501:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_CHANMASK(enableMask));
1502:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1503:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_CHAN_EN(base) = enableMask;
1504:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1505:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1506:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1507:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1508:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetRangeCond
1509:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1510:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1511:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Set the condition in which range detection interrupts are triggered.
1512:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1513:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1514:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1515:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1516:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param cond
1517:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * A value of the enum \ref cy_en_sar_range_detect_condition_t.
1518:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1519:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1520:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1521:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1522:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1523:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SET_RANGE_COND
1524:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1525:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1526:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetRangeCond(SAR_Type *base, cy_en_sar_range_detect_condition_t cond)
1527:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1528:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L3(CY_SAR_RANGECOND(cond));
1529:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1530:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_RANGE_COND(base) = (uint32_t)cond << SAR_RANGE_COND_RANGE_COND_Pos;
1531:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1532:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1533:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1534:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1535:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_interrupt
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 71


1536:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1537:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1538:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1539:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetInterruptStatus
1540:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1541:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1542:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return the interrupt register status.
1543:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1544:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1545:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1546:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1547:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return Interrupt status
1548:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1549:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1550:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1551:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_ISR
1552:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1553:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1554:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptStatus(const SAR_Type *base)
1555:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1556:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_INTR(base);
1557:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1558:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1559:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1560:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1561:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_ClearInterrupt
1562:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1563:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1564:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Clear the interrupt.
1565:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The interrupt must be cleared with this function so that the hardware
1566:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * can set subsequent interrupts and those interrupts can be forwarded
1567:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * to the interrupt controller, if enabled.
1568:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1569:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1570:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1571:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1572:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param intrMask
1573:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The mask of interrupts to clear. Typically this will be the value returned
1574:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * from \ref Cy_SAR_GetInterruptStatus.
1575:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Alternately, select one or more values from \ref cy_en_sar_intr_mask_t and "OR" them together.
1576:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_EOS_MASK
1577:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_OVERFLOW_MASK
1578:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_FW_COLLISION_MASK
1579:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1580:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1581:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1582:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1583:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_ClearInterrupt(SAR_Type *base, uint32_t intrMask)
1584:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1585:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_INTRMASK(intrMask));
1586:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1587:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_INTR(base) = intrMask;
1588:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1589:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* Dummy read for buffered writes. */
1590:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     (void) SAR_INTR(base);
1591:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1592:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 72


1593:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1594:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1595:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetInterrupt
1596:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1597:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1598:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Trigger an interrupt with software.
1599:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1600:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1601:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1602:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1603:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param intrMask
1604:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The mask of interrupts to set.
1605:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Select one or more values from \ref cy_en_sar_intr_mask_t and "OR" them together.
1606:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_EOS_MASK
1607:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_OVERFLOW_MASK
1608:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_FW_COLLISION_MASK
1609:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1610:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1611:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1612:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1613:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetInterrupt(SAR_Type *base, uint32_t intrMask)
1614:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1615:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_INTRMASK(intrMask));
1616:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1617:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_INTR_SET(base) = intrMask;
1618:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1619:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1620:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1621:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1622:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetInterruptMask
1623:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1624:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1625:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Enable which interrupts can trigger the CPU interrupt controller.
1626:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1627:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1628:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1629:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1630:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param intrMask
1631:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The mask of interrupts. Select one or more values from \ref cy_en_sar_intr_mask_t
1632:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and "OR" them together.
1633:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_MASK_NONE : Disable EOS, overflow, and firmware collision interrupts.
1634:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_EOS_MASK
1635:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_OVERFLOW_MASK
1636:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_FW_COLLISION_MASK
1637:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1638:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1639:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1640:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1641:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1642:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SET_INTERRUPT_MASK
1643:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1644:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1645:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetInterruptMask(SAR_Type *base, uint32_t intrMask)
1646:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1647:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_INTRMASK(intrMask));
1648:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1649:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_INTR_MASK(base) = intrMask;
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 73


1650:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1651:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1652:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1653:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1654:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetInterruptMask
1655:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1656:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1657:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return which interrupts can trigger the CPU interrupt controller
1658:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * as configured by \ref Cy_SAR_SetInterruptMask.
1659:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1660:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1661:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1662:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1663:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return
1664:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Interrupt mask. Compare this value with masks in \ref cy_en_sar_intr_mask_t.
1665:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1666:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1667:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1668:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_GET_INTERRUPT_MASK
1669:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1670:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1671:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptMask(const SAR_Type *base)
1672:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1673:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_INTR_MASK(base);
1674:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1675:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1676:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1677:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1678:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetInterruptStatusMasked
1679:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1680:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1681:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return the bitwise AND between the interrupt request and mask registers.
1682:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * See \ref Cy_SAR_GetInterruptStatus and \ref Cy_SAR_GetInterruptMask.
1683:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1684:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1685:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1686:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1687:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return
1688:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Bitwise AND of the interrupt request and mask registers
1689:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1690:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1691:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptStatusMasked(const SAR_Type *base)
1692:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1693:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_INTR_MASKED(base);
1694:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1695:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1696:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1697:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1698:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetRangeInterruptStatus
1699:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1700:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1701:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return the range interrupt register status.
1702:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If the status bit is low for a channel, the channel may not be enabled
1703:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * (\ref Cy_SAR_SetChanMask), range detection is not enabled for the
1704:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * channel (\ref Cy_SAR_SetRangeInterruptMask), or range detection was not
1705:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * triggered for the channel.
1706:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 74


1707:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1708:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1709:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1710:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return
1711:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The range interrupt status for all channels. Bit 0 is for channel 0, etc.
1712:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1713:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1714:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1715:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_GET_RANGE_INTERRUPT_STATUS
1716:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1717:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1718:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetRangeInterruptStatus(const SAR_Type *base)
1719:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1720:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_RANGE_INTR(base);
1721:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1722:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1723:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1724:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1725:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_ClearRangeInterrupt
1726:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1727:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1728:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Clear the range interrupt for the specified channel mask.
1729:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The interrupt must be cleared with this function so that
1730:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the hardware can set subset interrupts and those interrupts can
1731:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * be forwarded to the interrupt controller, if enabled.
1732:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1733:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1734:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1735:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1736:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param chanMask
1737:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel mask. Bit 0 is for channel 0, etc.
1738:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Typically, this is the value returned from \ref Cy_SAR_GetRangeInterruptStatus.
1739:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1740:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1741:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1742:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1743:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_ClearRangeInterrupt(SAR_Type *base, uint32_t chanMask)
1744:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1745:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_CHANMASK(chanMask));
1746:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1747:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_RANGE_INTR(base) = chanMask;
1748:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1749:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* Dummy read for buffered writes. */
1750:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     (void) SAR_RANGE_INTR(base);
1751:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1752:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1753:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1754:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1755:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetRangeInterrupt
1756:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1757:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1758:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Trigger a range interrupt with software for the specific channel mask.
1759:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1760:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1761:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1762:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1763:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param chanMask
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 75


1764:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel mask. Bit 0 is for channel 0, etc.
1765:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1766:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1767:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1768:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1769:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetRangeInterrupt(SAR_Type *base, uint32_t chanMask)
1770:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1771:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_CHANMASK(chanMask));
1772:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1773:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_RANGE_INTR_SET(base) = chanMask;
1774:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1775:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1776:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1777:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1778:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetRangeInterruptMask
1779:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1780:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1781:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Enable which channels can trigger a range interrupt.
1782:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1783:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1784:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1785:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1786:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param chanMask
1787:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel mask. Bit 0 is for channel 0, etc.
1788:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1789:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1790:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1791:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1792:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1793:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SET_RANGE_INTERRUPT_MASK
1794:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1795:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1796:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetRangeInterruptMask(SAR_Type *base, uint32_t chanMask)
1797:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1798:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_CHANMASK(chanMask));
1799:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1800:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_RANGE_INTR_MASK(base) = chanMask;
1801:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1802:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1803:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1804:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1805:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetRangeInterruptMask
1806:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1807:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1808:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return which interrupts can trigger a range interrupt as configured by
1809:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref Cy_SAR_SetRangeInterruptMask.
1810:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1811:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1812:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1813:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1814:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return
1815:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The range interrupt mask
1816:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1817:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1818:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetRangeInterruptMask(const SAR_Type *base)
1819:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1820:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_RANGE_INTR_MASK(base);
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 76


1821:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1822:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1823:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1824:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1825:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetRangeInterruptStatusMasked
1826:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1827:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1828:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return the bitwise AND between the range interrupt request and mask registers.
1829:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * See \ref Cy_SAR_GetRangeInterruptStatus and \ref Cy_SAR_GetRangeInterruptMask.
1830:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1831:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1832:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1833:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1834:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return
1835:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Bitwise AND between of range interrupt request and mask
1836:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1837:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1838:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetRangeInterruptStatusMasked(const SAR_Type *base)
1839:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1840:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_RANGE_INTR_MASKED(base);
1841:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1842:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1843:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1844:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1845:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetSatInterruptStatus
1846:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1847:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1848:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return the saturate interrupt register status.
1849:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If the status bit is low for a channel, the channel may not be enabled
1850:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * (\ref Cy_SAR_SetChanMask), saturation detection is not enabled for the
1851:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * channel (\ref Cy_SAR_SetSatInterruptMask), or saturation detection was not
1852:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * triggered for the channel.
1853:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1854:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1855:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1856:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1857:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return
1858:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The saturate interrupt status for all channels. Bit 0 is for channel 0, etc.
1859:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1860:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1861:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1862:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_GET_SAT_INTERRUPT_STATUS
1863:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1864:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1865:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetSatInterruptStatus(const SAR_Type *base)
1866:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1867:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_SATURATE_INTR(base);
1868:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1869:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1870:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1871:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1872:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_ClearSatInterrupt
1873:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1874:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1875:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Clear the saturate interrupt for the specified channel mask.
1876:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The interrupt must be cleared with this function so that the hardware
1877:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * can set subsequent interrupts and those interrupts can be forwarded
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 77


1878:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * to the interrupt controller, if enabled.
1879:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1880:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1881:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1882:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1883:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param chanMask
1884:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel mask. Bit 0 is for channel 0, etc.
1885:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Typically, this is the value returned from \ref Cy_SAR_GetSatInterruptStatus.
1886:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1887:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1888:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1889:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1890:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_ClearSatInterrupt(SAR_Type *base, uint32_t chanMask)
1891:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1892:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_CHANMASK(chanMask));
1893:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1894:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_SATURATE_INTR(base) = chanMask;
1895:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1896:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* Dummy read for buffered writes. */
1897:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     (void) SAR_SATURATE_INTR(base);
1898:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1899:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1900:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1901:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1902:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetSatInterrupt
1903:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1904:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1905:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Trigger a saturate interrupt with software for the specific channel mask.
1906:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1907:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1908:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1909:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1910:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param chanMask
1911:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel mask. Bit 0 is for channel 0, etc.
1912:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1913:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1914:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1915:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1916:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetSatInterrupt(SAR_Type *base, uint32_t chanMask)
1917:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1918:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_CHANMASK(chanMask));
1919:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1920:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_SATURATE_INTR_SET(base) = chanMask;
1921:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1922:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1923:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1924:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1925:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetSatInterruptMask
1926:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1927:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1928:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Enable which channels can trigger a saturate interrupt.
1929:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1930:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1931:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1932:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1933:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param chanMask
1934:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel mask. Bit 0 is for channel 0, etc.
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 78


1935:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1936:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1937:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1938:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1939:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1940:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_GET_SAT_INTERRUPT_MASK
1941:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1942:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1943:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetSatInterruptMask(SAR_Type *base, uint32_t chanMask)
1944:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1945:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_CHANMASK(chanMask));
1946:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1947:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_SATURATE_INTR_MASK(base) = chanMask;
1948:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1949:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1950:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1951:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1952:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetSatInterruptMask
1953:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1954:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1955:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return which interrupts can trigger a saturate interrupt as configured
1956:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * by \ref Cy_SAR_SetSatInterruptMask.
1957:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1958:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1959:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1960:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1961:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return
1962:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The saturate interrupt mask. Bit 0 is for channel 0, etc.
1963:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1964:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1965:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetSatInterruptMask(const SAR_Type *base)
1966:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1967:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_SATURATE_INTR_MASK(base);
1968:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1969:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1970:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1971:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetSatInterruptStatusMasked
1972:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1973:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1974:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return the bitwise AND between the saturate interrupt request and mask registers.
1975:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * See \ref Cy_SAR_GetSatInterruptStatus and \ref Cy_SAR_GetSatInterruptMask.
1976:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1977:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1978:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1979:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1980:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return
1981:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Bitwise AND of the saturate interrupt request and mask
1982:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1983:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1984:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetSatInterruptStatusMasked(const SAR_Type *base)
1985:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1986:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_SATURATE_INTR_MASKED(base);
1987:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1988:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1989:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1990:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1991:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetInterruptCause
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 79


1992:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1993:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1994:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return the cause of the interrupt.
1995:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The interrupt routine can be called due to one of the following events:
1996:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - End of scan (EOS)
1997:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Overflow
1998:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Firmware collision
1999:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Saturation detected on one or more channels
2000:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Range detected on one or more channels
2001:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2002:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
2003:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
2004:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2005:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return
2006:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Mask of what caused the interrupt. Compare this value with one of these masks:
2007:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - SAR_INTR_CAUSE_EOS_MASKED_MIR_Msk : EOS caused the interrupt
2008:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - SAR_INTR_CAUSE_OVERFLOW_MASKED_MIR_Msk : Overflow caused the interrupt
2009:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - SAR_INTR_CAUSE_FW_COLLISION_MASKED_MIR_Msk : Firmware collision cause the interrupt
2010:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - SAR_INTR_CAUSE_SATURATE_MASKED_RED_Msk : Saturation detection on one or more channels caused 
2011:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - SAR_INTR_CAUSE_RANGE_MASKED_RED_Msk : Range detection on one or more channels caused the inte
2012:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2013:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
2014:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptCause(const SAR_Type *base)
2015:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
2016:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_INTR_CAUSE(base);
2017:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
2018:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
2019:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
2020:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_helper
2021:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
2022:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
2023:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
2024:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
2025:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
2026:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_IsChannelDifferential
2027:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
2028:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2029:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return true of channel is differential, else false.
2030:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2031:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
2032:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
2033:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2034:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param chan
2035:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel to check, starting at 0.
2036:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2037:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return
2038:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * A false is return if chan is invalid.
2039:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2040:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
2041:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2042:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_IS_CHANNEL_DIFF
2043:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2044:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
2045:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE bool Cy_SAR_IsChannelDifferential(const SAR_Type *base, uint32_t chan)
2046:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
2047:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return !Cy_SAR_IsChannelSingleEnded(base, chan);
2048:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 80


2049:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
2050:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
2051:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_switches
2052:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
2053:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
2054:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
2055:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetVssaVminusSwitch
2056:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
2057:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2058:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Open or close the switch between VSSA and Vminus of the SARADC through firmware.
2059:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This function calls \ref Cy_SAR_SetAnalogSwitch with switchSelect set to
2060:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref CY_SAR_MUX_SWITCH0 and switchMask set to SAR_MUX_SWITCH0_MUX_FW_VSSA_VMINUS_Msk.
2061:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2062:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
2063:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
2064:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2065:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param state
2066:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Open or close the switch. Select a value from \ref cy_en_sar_switch_state_t.
2067:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2068:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
2069:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2070:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
2071:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2072:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_VSSA_VMINUS_SWITCH
2073:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2074:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
2075:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetVssaVminusSwitch(SAR_Type *base, cy_en_sar_switch_state_t state)
2076:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
2077:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     Cy_SAR_SetAnalogSwitch(base, CY_SAR_MUX_SWITCH0, SAR_MUX_SWITCH0_MUX_FW_VSSA_VMINUS_Msk, state)
 136              		.loc 3 2077 0
 137 006e 0123     		movs	r3, #1
 138 0070 8022     		movs	r2, #128
 139 0072 5202     		lsls	r2, r2, #9
 140 0074 0021     		movs	r1, #0
 141 0076 2800     		movs	r0, r5
 142 0078 FFF7FEFF 		bl	Cy_SAR_SetAnalogSwitch
 143              	.LVL10:
 144              	.LBE56:
 145              	.LBE55:
 142:Generated_Source\PSoC6/ADC.c **** 
 143:Generated_Source\PSoC6/ADC.c ****     /* Connect Vminus to VSSA when even one channel is single-ended or multiple channels configured
 144:Generated_Source\PSoC6/ADC.c ****     if(1uL == ADC_MUX_SWITCH0_INIT)
 145:Generated_Source\PSoC6/ADC.c ****     {
 146:Generated_Source\PSoC6/ADC.c ****         Cy_SAR_SetVssaVminusSwitch(ADC_SAR__HW, CY_SAR_SWITCH_CLOSE);
 147:Generated_Source\PSoC6/ADC.c **** 
 148:Generated_Source\PSoC6/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 149:Generated_Source\PSoC6/ADC.c ****         if(1uL < config->numChannels)
 146              		.loc 1 149 0
 147 007c 6368     		ldr	r3, [r4, #4]
 148 007e 012B     		cmp	r3, #1
 149 0080 05D9     		bls	.L1
 150              	.LVL11:
 151              	.LBB57:
 152              	.LBB58:
2078:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
2079:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
2080:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 81


2081:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
2082:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetVssaSarSeqCtrl
2083:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
2084:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2085:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Enable or disable SARSEQ control of the switch between VSSA and Vminus of the SARADC.
2086:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This function calls \ref Cy_SAR_SetSwitchSarSeqCtrl
2087:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * with switchMask set to SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_VSSA_Msk.
2088:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2089:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
2090:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
2091:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2092:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param ctrl
2093:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Enable or disable control. Select a value from \ref cy_en_sar_switch_sar_seq_ctrl_t.
2094:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2095:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
2096:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2097:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
2098:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2099:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_VSSA_SARSEQ_CTRL
2100:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
2101:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
2102:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetVssaSarSeqCtrl(SAR_Type *base, cy_en_sar_switch_sar_seq_ctrl_t ctrl)
2103:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
2104:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     Cy_SAR_SetSwitchSarSeqCtrl(base, SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_VSSA_Msk, ctrl);
 153              		.loc 3 2104 0
 154 0082 0122     		movs	r2, #1
 155 0084 8021     		movs	r1, #128
 156 0086 4902     		lsls	r1, r1, #9
 157 0088 2800     		movs	r0, r5
 158 008a FFF7FEFF 		bl	Cy_SAR_SetSwitchSarSeqCtrl
 159              	.LVL12:
 160              	.L1:
 161              	.LBE58:
 162              	.LBE57:
 150:Generated_Source\PSoC6/ADC.c ****         {
 151:Generated_Source\PSoC6/ADC.c ****             Cy_SAR_SetVssaSarSeqCtrl(ADC_SAR__HW, CY_SAR_SWITCH_SEQ_CTRL_ENABLE);
 152:Generated_Source\PSoC6/ADC.c ****         }
 153:Generated_Source\PSoC6/ADC.c ****     }
 154:Generated_Source\PSoC6/ADC.c **** 
 155:Generated_Source\PSoC6/ADC.c ****     return;
 156:Generated_Source\PSoC6/ADC.c **** }
 163              		.loc 1 156 0
 164              		@ sp needed
 165              	.LVL13:
 166 008e 70BD     		pop	{r4, r5, r6, pc}
 167              	.L5:
 168              		.align	2
 169              	.L4:
 170 0090 00000000 		.word	cy_device
 171 0094 FF00FFFF 		.word	-65281
 172 0098 00001D41 		.word	1092419584
 173              		.cfi_endproc
 174              	.LFE188:
 175              		.size	ADC_InitConfig, .-ADC_InitConfig
 176              		.section	.text.ADC_StartConvert,"ax",%progbits
 177              		.align	2
 178              		.global	ADC_StartConvert
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 82


 179              		.code	16
 180              		.thumb_func
 181              		.type	ADC_StartConvert, %function
 182              	ADC_StartConvert:
 183              	.LFB190:
 157:Generated_Source\PSoC6/ADC.c **** 
 158:Generated_Source\PSoC6/ADC.c **** /* ****************************************************************************
 159:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_SelectConfig
 160:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//*
 161:Generated_Source\PSoC6/ADC.c **** *
 162:Generated_Source\PSoC6/ADC.c **** * \brief Selects the predefined configuration for scanning.
 163:Generated_Source\PSoC6/ADC.c **** *
 164:Generated_Source\PSoC6/ADC.c **** * \param config Number of configuration in the ADC.
 165:Generated_Source\PSoC6/ADC.c **** *
 166:Generated_Source\PSoC6/ADC.c **** * \param restart Set to 1u if the ADC should be  restarted after
 167:Generated_Source\PSoC6/ADC.c **** * selecting the configuration.
 168:Generated_Source\PSoC6/ADC.c **** *
 169:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 170:Generated_Source\PSoC6/ADC.c **** void ADC_SelectConfig(uint32_t config, uint32_t restart)
 171:Generated_Source\PSoC6/ADC.c **** {
 172:Generated_Source\PSoC6/ADC.c ****     /* Check whether the configuration number is valid or not */
 173:Generated_Source\PSoC6/ADC.c ****     if(ADC_TOTAL_CONFIGS > config)
 174:Generated_Source\PSoC6/ADC.c ****     {
 175:Generated_Source\PSoC6/ADC.c ****         /* Stop the ADC before changing configurations */
 176:Generated_Source\PSoC6/ADC.c ****         ADC_Stop();
 177:Generated_Source\PSoC6/ADC.c ****         ADC_selected = 1u;
 178:Generated_Source\PSoC6/ADC.c **** 
 179:Generated_Source\PSoC6/ADC.c ****         if(0u == ADC_initVar)
 180:Generated_Source\PSoC6/ADC.c ****         {
 181:Generated_Source\PSoC6/ADC.c ****             ADC_Init();
 182:Generated_Source\PSoC6/ADC.c ****             ADC_initVar |= ADC_INIT_VAR_INIT_FLAG;
 183:Generated_Source\PSoC6/ADC.c ****         }
 184:Generated_Source\PSoC6/ADC.c ****         #if (ADC_VREF_ROUTED)
 185:Generated_Source\PSoC6/ADC.c ****             ADC_vrefAMux_DisconnectAll();
 186:Generated_Source\PSoC6/ADC.c ****         #endif
 187:Generated_Source\PSoC6/ADC.c **** 
 188:Generated_Source\PSoC6/ADC.c ****         ADC_InitConfig(&ADC_allConfigs[config]);
 189:Generated_Source\PSoC6/ADC.c **** 
 190:Generated_Source\PSoC6/ADC.c ****         #if (ADC_VREF_ROUTED)
 191:Generated_Source\PSoC6/ADC.c ****             ADC_vrefAMux_Select((uint8)config);
 192:Generated_Source\PSoC6/ADC.c ****         #endif
 193:Generated_Source\PSoC6/ADC.c **** 
 194:Generated_Source\PSoC6/ADC.c ****         ADC_currentConfig = config;
 195:Generated_Source\PSoC6/ADC.c **** 
 196:Generated_Source\PSoC6/ADC.c ****         if(1u == restart)
 197:Generated_Source\PSoC6/ADC.c ****         {
 198:Generated_Source\PSoC6/ADC.c ****             /* Restart the ADC */
 199:Generated_Source\PSoC6/ADC.c ****             ADC_Start();
 200:Generated_Source\PSoC6/ADC.c **** 
 201:Generated_Source\PSoC6/ADC.c ****             /* Restart the scan */
 202:Generated_Source\PSoC6/ADC.c ****             ADC_StartConvert();
 203:Generated_Source\PSoC6/ADC.c ****         }
 204:Generated_Source\PSoC6/ADC.c ****     }
 205:Generated_Source\PSoC6/ADC.c ****     return;
 206:Generated_Source\PSoC6/ADC.c **** }
 207:Generated_Source\PSoC6/ADC.c **** 
 208:Generated_Source\PSoC6/ADC.c **** /*******************************************************************************
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 83


 209:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_StartConvert
 210:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//**
 211:Generated_Source\PSoC6/ADC.c **** *
 212:Generated_Source\PSoC6/ADC.c **** * \brief In continuous mode, this API starts the conversion process and it runs
 213:Generated_Source\PSoC6/ADC.c **** * continuously.
 214:Generated_Source\PSoC6/ADC.c **** 
 215:Generated_Source\PSoC6/ADC.c **** * In Single Shot mode, the function triggers a single scan and
 216:Generated_Source\PSoC6/ADC.c **** * every scan requires a call of this function. The mode is set with the
 217:Generated_Source\PSoC6/ADC.c **** * Sample Mode parameter in the customizer. The customizer setting can be
 218:Generated_Source\PSoC6/ADC.c **** * overridden at run time with the ADC_SetConvertMode() function.
 219:Generated_Source\PSoC6/ADC.c **** *
 220:Generated_Source\PSoC6/ADC.c **** * \param None
 221:Generated_Source\PSoC6/ADC.c **** *
 222:Generated_Source\PSoC6/ADC.c **** * \return None
 223:Generated_Source\PSoC6/ADC.c **** *
 224:Generated_Source\PSoC6/ADC.c **** * \sideeffect None
 225:Generated_Source\PSoC6/ADC.c **** *
 226:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 227:Generated_Source\PSoC6/ADC.c **** void ADC_StartConvert(void)
 228:Generated_Source\PSoC6/ADC.c **** {
 184              		.loc 1 228 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188 0000 10B5     		push	{r4, lr}
 189              		.cfi_def_cfa_offset 8
 190              		.cfi_offset 4, -8
 191              		.cfi_offset 14, -4
 229:Generated_Source\PSoC6/ADC.c ****     if (SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk == (ADC_SAR__HW->SAMPLE_CTRL & SAR_SAMPLE_CTRL_DSI_TR
 192              		.loc 1 229 0
 193 0002 074B     		ldr	r3, .L9
 194 0004 5B68     		ldr	r3, [r3, #4]
 195 0006 5B03     		lsls	r3, r3, #13
 196 0008 04D5     		bpl	.L7
 230:Generated_Source\PSoC6/ADC.c ****     {
 231:Generated_Source\PSoC6/ADC.c ****         Cy_SAR_StartConvert(ADC_SAR__HW, CY_SAR_START_CONVERT_CONTINUOUS);
 197              		.loc 1 231 0
 198 000a 0121     		movs	r1, #1
 199 000c 0448     		ldr	r0, .L9
 200 000e FFF7FEFF 		bl	Cy_SAR_StartConvert
 201              	.LVL14:
 202 0012 03E0     		b	.L6
 203              	.L7:
 232:Generated_Source\PSoC6/ADC.c ****     }
 233:Generated_Source\PSoC6/ADC.c ****     else
 234:Generated_Source\PSoC6/ADC.c ****     {
 235:Generated_Source\PSoC6/ADC.c ****         Cy_SAR_StartConvert(ADC_SAR__HW, CY_SAR_START_CONVERT_SINGLE_SHOT);
 204              		.loc 1 235 0
 205 0014 0021     		movs	r1, #0
 206 0016 0248     		ldr	r0, .L9
 207 0018 FFF7FEFF 		bl	Cy_SAR_StartConvert
 208              	.LVL15:
 209              	.L6:
 236:Generated_Source\PSoC6/ADC.c ****     }
 237:Generated_Source\PSoC6/ADC.c **** }
 210              		.loc 1 237 0
 211              		@ sp needed
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 84


 212 001c 10BD     		pop	{r4, pc}
 213              	.L10:
 214 001e C046     		.align	2
 215              	.L9:
 216 0020 00001D41 		.word	1092419584
 217              		.cfi_endproc
 218              	.LFE190:
 219              		.size	ADC_StartConvert, .-ADC_StartConvert
 220              		.section	.text.ADC_SetConvertMode,"ax",%progbits
 221              		.align	2
 222              		.global	ADC_SetConvertMode
 223              		.code	16
 224              		.thumb_func
 225              		.type	ADC_SetConvertMode, %function
 226              	ADC_SetConvertMode:
 227              	.LFB191:
 238:Generated_Source\PSoC6/ADC.c **** 
 239:Generated_Source\PSoC6/ADC.c **** /*******************************************************************************
 240:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_SetConvertMode
 241:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//**
 242:Generated_Source\PSoC6/ADC.c **** *
 243:Generated_Source\PSoC6/ADC.c **** * \brief Sets the conversion mode to either Single-Shot or continuous. This
 244:Generated_Source\PSoC6/ADC.c **** * function overrides the settings applied in the customizer. Changing
 245:Generated_Source\PSoC6/ADC.c **** * configurations will restore the values set in the customizer.
 246:Generated_Source\PSoC6/ADC.c **** *
 247:Generated_Source\PSoC6/ADC.c **** * \param mode Sets the conversion mode.
 248:Generated_Source\PSoC6/ADC.c **** *
 249:Generated_Source\PSoC6/ADC.c **** * \return None
 250:Generated_Source\PSoC6/ADC.c **** *
 251:Generated_Source\PSoC6/ADC.c **** * \sideeffect None
 252:Generated_Source\PSoC6/ADC.c **** *
 253:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 254:Generated_Source\PSoC6/ADC.c **** void ADC_SetConvertMode(cy_en_sar_start_convert_sel_t mode)
 255:Generated_Source\PSoC6/ADC.c **** {
 228              		.loc 1 255 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 0
 231              		@ frame_needed = 0, uses_anonymous_args = 0
 232              		@ link register save eliminated.
 233              	.LVL16:
 256:Generated_Source\PSoC6/ADC.c ****     switch(mode)
 234              		.loc 1 256 0
 235 0000 0128     		cmp	r0, #1
 236 0002 06D1     		bne	.L15
 257:Generated_Source\PSoC6/ADC.c ****     {
 258:Generated_Source\PSoC6/ADC.c ****     case CY_SAR_START_CONVERT_CONTINUOUS:
 259:Generated_Source\PSoC6/ADC.c ****         ADC_SAR__HW->SAMPLE_CTRL |= SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk;
 237              		.loc 1 259 0
 238 0004 064A     		ldr	r2, .L16
 239 0006 5368     		ldr	r3, [r2, #4]
 240 0008 8021     		movs	r1, #128
 241 000a C902     		lsls	r1, r1, #11
 242 000c 0B43     		orrs	r3, r1
 243 000e 5360     		str	r3, [r2, #4]
 260:Generated_Source\PSoC6/ADC.c ****         break;
 244              		.loc 1 260 0
 245 0010 04E0     		b	.L11
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 85


 246              	.L15:
 261:Generated_Source\PSoC6/ADC.c ****     case CY_SAR_START_CONVERT_SINGLE_SHOT:
 262:Generated_Source\PSoC6/ADC.c ****     default:
 263:Generated_Source\PSoC6/ADC.c ****         ADC_SAR__HW->SAMPLE_CTRL &= ~SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk;
 247              		.loc 1 263 0
 248 0012 034A     		ldr	r2, .L16
 249 0014 5168     		ldr	r1, [r2, #4]
 250 0016 034B     		ldr	r3, .L16+4
 251 0018 0B40     		ands	r3, r1
 252 001a 5360     		str	r3, [r2, #4]
 253              	.L11:
 264:Generated_Source\PSoC6/ADC.c ****         break;
 265:Generated_Source\PSoC6/ADC.c ****     }
 266:Generated_Source\PSoC6/ADC.c **** }
 254              		.loc 1 266 0
 255              		@ sp needed
 256 001c 7047     		bx	lr
 257              	.L17:
 258 001e C046     		.align	2
 259              	.L16:
 260 0020 00001D41 		.word	1092419584
 261 0024 FFFFFBFF 		.word	-262145
 262              		.cfi_endproc
 263              	.LFE191:
 264              		.size	ADC_SetConvertMode, .-ADC_SetConvertMode
 265              		.section	.text.ADC_IRQ_Enable,"ax",%progbits
 266              		.align	2
 267              		.global	ADC_IRQ_Enable
 268              		.code	16
 269              		.thumb_func
 270              		.type	ADC_IRQ_Enable, %function
 271              	ADC_IRQ_Enable:
 272              	.LFB192:
 267:Generated_Source\PSoC6/ADC.c **** 
 268:Generated_Source\PSoC6/ADC.c **** /* ****************************************************************************
 269:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_IRQ_Enable
 270:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//*
 271:Generated_Source\PSoC6/ADC.c **** *
 272:Generated_Source\PSoC6/ADC.c **** * \brief Enables interrupts to occur at the end of a conversion. Global
 273:Generated_Source\PSoC6/ADC.c **** * interrupts must also be enabled for the ADC interrupts to occur.
 274:Generated_Source\PSoC6/ADC.c **** *
 275:Generated_Source\PSoC6/ADC.c **** * \param None
 276:Generated_Source\PSoC6/ADC.c **** *
 277:Generated_Source\PSoC6/ADC.c **** * \return None
 278:Generated_Source\PSoC6/ADC.c **** *
 279:Generated_Source\PSoC6/ADC.c **** * \sideeffect None
 280:Generated_Source\PSoC6/ADC.c **** *
 281:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 282:Generated_Source\PSoC6/ADC.c **** void ADC_IRQ_Enable(void){
 273              		.loc 1 282 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 283:Generated_Source\PSoC6/ADC.c ****     /* Interrupt core assignment will be up to the user. */
 284:Generated_Source\PSoC6/ADC.c ****     #ifdef ADC_IRQ__INTC_CORTEXM4_ASSIGNED
 285:Generated_Source\PSoC6/ADC.c ****     #if (CY_CPU_CORTEX_M4)
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 86


 286:Generated_Source\PSoC6/ADC.c ****         NVIC_EnableIRQ(ADC_IRQ_cfg.intrSrc);
 287:Generated_Source\PSoC6/ADC.c ****     #endif
 288:Generated_Source\PSoC6/ADC.c ****     #endif
 289:Generated_Source\PSoC6/ADC.c **** 
 290:Generated_Source\PSoC6/ADC.c ****     #ifdef ADC_IRQ__INTC_CORTEXM0P_ASSIGNED
 291:Generated_Source\PSoC6/ADC.c ****     #if (CY_CPU_CORTEX_M0P)
 292:Generated_Source\PSoC6/ADC.c ****         NVIC_EnableIRQ(ADC_IRQ_cfg.intrSrc);
 293:Generated_Source\PSoC6/ADC.c ****     #endif
 294:Generated_Source\PSoC6/ADC.c ****     #endif
 295:Generated_Source\PSoC6/ADC.c **** }
 278              		.loc 1 295 0
 279              		@ sp needed
 280 0000 7047     		bx	lr
 281              		.cfi_endproc
 282              	.LFE192:
 283              		.size	ADC_IRQ_Enable, .-ADC_IRQ_Enable
 284 0002 C046     		.section	.text.ADC_IRQ_Disable,"ax",%progbits
 285              		.align	2
 286              		.global	ADC_IRQ_Disable
 287              		.code	16
 288              		.thumb_func
 289              		.type	ADC_IRQ_Disable, %function
 290              	ADC_IRQ_Disable:
 291              	.LFB193:
 296:Generated_Source\PSoC6/ADC.c **** 
 297:Generated_Source\PSoC6/ADC.c **** /* ****************************************************************************
 298:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_IRQ_Disable
 299:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//*
 300:Generated_Source\PSoC6/ADC.c **** *
 301:Generated_Source\PSoC6/ADC.c **** * \brief Disables end of conversion interrupts.
 302:Generated_Source\PSoC6/ADC.c **** *
 303:Generated_Source\PSoC6/ADC.c **** * \param None
 304:Generated_Source\PSoC6/ADC.c **** *
 305:Generated_Source\PSoC6/ADC.c **** * \return None
 306:Generated_Source\PSoC6/ADC.c **** *
 307:Generated_Source\PSoC6/ADC.c **** * \sideeffect None
 308:Generated_Source\PSoC6/ADC.c **** *
 309:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 310:Generated_Source\PSoC6/ADC.c **** void ADC_IRQ_Disable(void){
 292              		.loc 1 310 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              		@ link register save eliminated.
 311:Generated_Source\PSoC6/ADC.c ****     /* Interrupt core assignment will be up to the user. */
 312:Generated_Source\PSoC6/ADC.c ****     #ifdef ADC_IRQ__INTC_CORTEXM4_ASSIGNED
 313:Generated_Source\PSoC6/ADC.c ****     #if (CY_CPU_CORTEX_M4)
 314:Generated_Source\PSoC6/ADC.c ****         NVIC_DisableIRQ(ADC_IRQ_cfg.intrSrc);
 315:Generated_Source\PSoC6/ADC.c ****     #endif
 316:Generated_Source\PSoC6/ADC.c ****     #endif
 317:Generated_Source\PSoC6/ADC.c **** 
 318:Generated_Source\PSoC6/ADC.c ****     #ifdef ADC_IRQ__INTC_CORTEXM0P_ASSIGNED
 319:Generated_Source\PSoC6/ADC.c ****     #if (CY_CPU_CORTEX_M0P)
 320:Generated_Source\PSoC6/ADC.c ****         NVIC_DisableIRQ(ADC_IRQ_cfg.intrSrc);
 321:Generated_Source\PSoC6/ADC.c ****     #endif
 322:Generated_Source\PSoC6/ADC.c ****     #endif
 323:Generated_Source\PSoC6/ADC.c **** }
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 87


 297              		.loc 1 323 0
 298              		@ sp needed
 299 0000 7047     		bx	lr
 300              		.cfi_endproc
 301              	.LFE193:
 302              		.size	ADC_IRQ_Disable, .-ADC_IRQ_Disable
 303 0002 C046     		.section	.text.ADC_SetEosMask,"ax",%progbits
 304              		.align	2
 305              		.global	ADC_SetEosMask
 306              		.code	16
 307              		.thumb_func
 308              		.type	ADC_SetEosMask, %function
 309              	ADC_SetEosMask:
 310              	.LFB194:
 324:Generated_Source\PSoC6/ADC.c **** 
 325:Generated_Source\PSoC6/ADC.c **** /*******************************************************************************
 326:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_SetEosMask
 327:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//**
 328:Generated_Source\PSoC6/ADC.c **** *
 329:Generated_Source\PSoC6/ADC.c **** * \brief Sets or clears the End of Scan (EOS) interrupt mask.
 330:Generated_Source\PSoC6/ADC.c **** *
 331:Generated_Source\PSoC6/ADC.c **** * \param mask 1 to set the mask, 0 to clear the mask.
 332:Generated_Source\PSoC6/ADC.c **** *
 333:Generated_Source\PSoC6/ADC.c **** * \return None
 334:Generated_Source\PSoC6/ADC.c **** *
 335:Generated_Source\PSoC6/ADC.c **** * \sideeffect All other bits in the INTR register are cleared by this function.
 336:Generated_Source\PSoC6/ADC.c **** *
 337:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 338:Generated_Source\PSoC6/ADC.c **** void ADC_SetEosMask(uint32_t mask)
 339:Generated_Source\PSoC6/ADC.c **** {
 311              		.loc 1 339 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315              	.LVL17:
 316 0000 10B5     		push	{r4, lr}
 317              		.cfi_def_cfa_offset 8
 318              		.cfi_offset 4, -8
 319              		.cfi_offset 14, -4
 340:Generated_Source\PSoC6/ADC.c ****     uint32_t intrMaskReg;
 341:Generated_Source\PSoC6/ADC.c **** 
 342:Generated_Source\PSoC6/ADC.c ****     intrMaskReg = (0uL == mask) ? CY_SAR_DEINIT : SAR_INTR_MASK_EOS_MASK_Msk;
 320              		.loc 1 342 0
 321 0002 441E     		subs	r4, r0, #1
 322 0004 A041     		sbcs	r0, r0, r4
 323              	.LVL18:
 324 0006 C4B2     		uxtb	r4, r0
 325              	.LVL19:
 326              	.LBB59:
 327              	.LBB60:
1647:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 328              		.loc 3 1647 0
 329 0008 072C     		cmp	r4, #7
 330 000a 03D9     		bls	.L21
 331 000c 0449     		ldr	r1, .L22
 332 000e 0548     		ldr	r0, .L22+4
 333 0010 FFF7FEFF 		bl	Cy_SysLib_AssertFailed
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 88


 334              	.LVL20:
 335              	.L21:
1649:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
 336              		.loc 3 1649 0
 337 0014 8623     		movs	r3, #134
 338 0016 9B00     		lsls	r3, r3, #2
 339 0018 034A     		ldr	r2, .L22+8
 340 001a D450     		str	r4, [r2, r3]
 341              	.LVL21:
 342              	.LBE60:
 343              	.LBE59:
 343:Generated_Source\PSoC6/ADC.c **** 
 344:Generated_Source\PSoC6/ADC.c ****     Cy_SAR_SetInterruptMask(ADC_SAR__HW, intrMaskReg);
 345:Generated_Source\PSoC6/ADC.c **** }
 344              		.loc 1 345 0
 345              		@ sp needed
 346              	.LVL22:
 347 001c 10BD     		pop	{r4, pc}
 348              	.L23:
 349 001e C046     		.align	2
 350              	.L22:
 351 0020 6F060000 		.word	1647
 352 0024 00000000 		.word	.LC1
 353 0028 00001D41 		.word	1092419584
 354              		.cfi_endproc
 355              	.LFE194:
 356              		.size	ADC_SetEosMask, .-ADC_SetEosMask
 357              		.section	.text.ADC_SetChanMask,"ax",%progbits
 358              		.align	2
 359              		.global	ADC_SetChanMask
 360              		.code	16
 361              		.thumb_func
 362              		.type	ADC_SetChanMask, %function
 363              	ADC_SetChanMask:
 364              	.LFB195:
 346:Generated_Source\PSoC6/ADC.c **** 
 347:Generated_Source\PSoC6/ADC.c **** /******************************************************************************
 348:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_SetChanMask
 349:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//*
 350:Generated_Source\PSoC6/ADC.c **** *
 351:Generated_Source\PSoC6/ADC.c **** * \brief Sets enable/disable mask for all channels in current configuration.
 352:Generated_Source\PSoC6/ADC.c **** *
 353:Generated_Source\PSoC6/ADC.c **** *
 354:Generated_Source\PSoC6/ADC.c **** * \param enableMask
 355:Generated_Source\PSoC6/ADC.c **** *  Channel enable/disable mask.
 356:Generated_Source\PSoC6/ADC.c **** *
 357:Generated_Source\PSoC6/ADC.c **** * \sideeffect
 358:Generated_Source\PSoC6/ADC.c **** *  None.
 359:Generated_Source\PSoC6/ADC.c **** *
 360:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 361:Generated_Source\PSoC6/ADC.c **** void ADC_SetChanMask(uint32_t enableMask)
 362:Generated_Source\PSoC6/ADC.c **** {
 365              		.loc 1 362 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              	.LVL23:
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 89


 370 0000 10B5     		push	{r4, lr}
 371              		.cfi_def_cfa_offset 8
 372              		.cfi_offset 4, -8
 373              		.cfi_offset 14, -4
 363:Generated_Source\PSoC6/ADC.c ****     uint32 chanCount = ADC_allConfigs[ADC_currentConfig].numChannels;
 374              		.loc 1 363 0
 375 0002 0B4B     		ldr	r3, .L26
 376 0004 1B68     		ldr	r3, [r3]
 377 0006 9A00     		lsls	r2, r3, #2
 378 0008 D318     		adds	r3, r2, r3
 379 000a 9A00     		lsls	r2, r3, #2
 380 000c 094B     		ldr	r3, .L26+4
 381 000e 9A18     		adds	r2, r3, r2
 382 0010 5368     		ldr	r3, [r2, #4]
 383              	.LVL24:
 364:Generated_Source\PSoC6/ADC.c ****     enableMask &= (uint32)((uint32)(1ul << chanCount) - 1ul);
 384              		.loc 1 364 0
 385 0012 0124     		movs	r4, #1
 386 0014 9C40     		lsls	r4, r4, r3
 387 0016 013C     		subs	r4, r4, #1
 388 0018 0440     		ands	r4, r0
 389              	.LVL25:
 390              	.LBB61:
 391              	.LBB62:
1501:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 392              		.loc 3 1501 0
 393 001a 074B     		ldr	r3, .L26+8
 394              	.LVL26:
 395 001c 9C42     		cmp	r4, r3
 396 001e 03D9     		bls	.L25
 397 0020 0649     		ldr	r1, .L26+12
 398 0022 0748     		ldr	r0, .L26+16
 399 0024 FFF7FEFF 		bl	Cy_SysLib_AssertFailed
 400              	.LVL27:
 401              	.L25:
1503:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
 402              		.loc 3 1503 0
 403 0028 064B     		ldr	r3, .L26+20
 404 002a 1C62     		str	r4, [r3, #32]
 405              	.LVL28:
 406              	.LBE62:
 407              	.LBE61:
 365:Generated_Source\PSoC6/ADC.c **** 
 366:Generated_Source\PSoC6/ADC.c ****     Cy_SAR_SetChanMask(ADC_SAR__HW, enableMask);
 367:Generated_Source\PSoC6/ADC.c **** }
 408              		.loc 1 367 0
 409              		@ sp needed
 410              	.LVL29:
 411 002c 10BD     		pop	{r4, pc}
 412              	.L27:
 413 002e C046     		.align	2
 414              	.L26:
 415 0030 00000000 		.word	.LANCHOR0
 416 0034 00000000 		.word	ADC_allConfigs
 417 0038 FFFF0000 		.word	65535
 418 003c DD050000 		.word	1501
 419 0040 00000000 		.word	.LC1
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 90


 420 0044 00001D41 		.word	1092419584
 421              		.cfi_endproc
 422              	.LFE195:
 423              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 424              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 425              		.align	2
 426              		.global	ADC_IsEndConversion
 427              		.code	16
 428              		.thumb_func
 429              		.type	ADC_IsEndConversion, %function
 430              	ADC_IsEndConversion:
 431              	.LFB196:
 368:Generated_Source\PSoC6/ADC.c **** 
 369:Generated_Source\PSoC6/ADC.c **** /*******************************************************************************
 370:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_IsEndConversion
 371:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//**
 372:Generated_Source\PSoC6/ADC.c **** *
 373:Generated_Source\PSoC6/ADC.c **** * \brief Immediately returns the status of the conversion or does not return
 374:Generated_Source\PSoC6/ADC.c **** * (blocking) until the conversion completes, depending on the retMode parameter.
 375:Generated_Source\PSoC6/ADC.c **** * In blocking mode, there is a time out of about 10 seconds for a CPU speed of
 376:Generated_Source\PSoC6/ADC.c **** * 100 Mhz.
 377:Generated_Source\PSoC6/ADC.c **** *
 378:Generated_Source\PSoC6/ADC.c **** * \param retMode Check conversion return mode.
 379:Generated_Source\PSoC6/ADC.c **** *
 380:Generated_Source\PSoC6/ADC.c **** * \return uint32_t: If a nonzero value is returned, the last conversion is complete.
 381:Generated_Source\PSoC6/ADC.c **** * If the returned value is zero, the ADC is still calculating the last result.
 382:Generated_Source\PSoC6/ADC.c **** *
 383:Generated_Source\PSoC6/ADC.c **** * \sideeffect This function reads the end of conversion status, and clears it afterward.
 384:Generated_Source\PSoC6/ADC.c **** *
 385:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 386:Generated_Source\PSoC6/ADC.c **** uint32_t ADC_IsEndConversion(cy_en_sar_return_mode_t retMode)
 387:Generated_Source\PSoC6/ADC.c **** {
 432              		.loc 1 387 0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 0
 435              		@ frame_needed = 0, uses_anonymous_args = 0
 436              	.LVL30:
 437 0000 10B5     		push	{r4, lr}
 438              		.cfi_def_cfa_offset 8
 439              		.cfi_offset 4, -8
 440              		.cfi_offset 14, -4
 441 0002 0100     		movs	r1, r0
 442              	.LVL31:
 388:Generated_Source\PSoC6/ADC.c ****     uint32 endOfConversion = 0u;
 389:Generated_Source\PSoC6/ADC.c ****     cy_en_sar_status_t result;
 390:Generated_Source\PSoC6/ADC.c **** 
 391:Generated_Source\PSoC6/ADC.c ****     result = Cy_SAR_IsEndConversion(ADC_SAR__HW, retMode);
 443              		.loc 1 391 0
 444 0004 0448     		ldr	r0, .L31
 445              	.LVL32:
 446 0006 FFF7FEFF 		bl	Cy_SAR_IsEndConversion
 447              	.LVL33:
 392:Generated_Source\PSoC6/ADC.c **** 
 393:Generated_Source\PSoC6/ADC.c ****     if (result == CY_SAR_SUCCESS)
 448              		.loc 1 393 0
 449 000a 0028     		cmp	r0, #0
 450 000c 01D0     		beq	.L30
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 91


 388:Generated_Source\PSoC6/ADC.c ****     uint32 endOfConversion = 0u;
 451              		.loc 1 388 0
 452 000e 0020     		movs	r0, #0
 453              	.LVL34:
 454 0010 00E0     		b	.L29
 455              	.LVL35:
 456              	.L30:
 394:Generated_Source\PSoC6/ADC.c ****     {
 395:Generated_Source\PSoC6/ADC.c ****         endOfConversion = 1u;
 457              		.loc 1 395 0
 458 0012 0120     		movs	r0, #1
 459              	.LVL36:
 460              	.L29:
 396:Generated_Source\PSoC6/ADC.c ****     }
 397:Generated_Source\PSoC6/ADC.c **** 
 398:Generated_Source\PSoC6/ADC.c ****     return endOfConversion;
 399:Generated_Source\PSoC6/ADC.c **** }
 461              		.loc 1 399 0
 462              		@ sp needed
 463 0014 10BD     		pop	{r4, pc}
 464              	.L32:
 465 0016 C046     		.align	2
 466              	.L31:
 467 0018 00001D41 		.word	1092419584
 468              		.cfi_endproc
 469              	.LFE196:
 470              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 471              		.section	.text.ADC_Init,"ax",%progbits
 472              		.align	2
 473              		.global	ADC_Init
 474              		.code	16
 475              		.thumb_func
 476              		.type	ADC_Init, %function
 477              	ADC_Init:
 478              	.LFB197:
 400:Generated_Source\PSoC6/ADC.c **** 
 401:Generated_Source\PSoC6/ADC.c **** /* ****************************************************************************
 402:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_Init
 403:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//*
 404:Generated_Source\PSoC6/ADC.c **** *
 405:Generated_Source\PSoC6/ADC.c **** * \brief Initialize the component according to parameters defined in the
 406:Generated_Source\PSoC6/ADC.c **** * customizer.
 407:Generated_Source\PSoC6/ADC.c **** *
 408:Generated_Source\PSoC6/ADC.c **** * \param None
 409:Generated_Source\PSoC6/ADC.c **** *
 410:Generated_Source\PSoC6/ADC.c **** * \return None
 411:Generated_Source\PSoC6/ADC.c **** *
 412:Generated_Source\PSoC6/ADC.c **** * \sideeffect None
 413:Generated_Source\PSoC6/ADC.c **** *
 414:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 415:Generated_Source\PSoC6/ADC.c **** void ADC_Init(void)
 416:Generated_Source\PSoC6/ADC.c **** {
 479              		.loc 1 416 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 92


 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 4, -8
 486              		.cfi_offset 14, -4
 487              	.LVL37:
 417:Generated_Source\PSoC6/ADC.c ****     uint32_t configNum = 0u;
 418:Generated_Source\PSoC6/ADC.c **** 
 419:Generated_Source\PSoC6/ADC.c ****     if(0u == ADC_initVar)
 488              		.loc 1 419 0
 489 0002 074B     		ldr	r3, .L35
 490 0004 1B79     		ldrb	r3, [r3, #4]
 491 0006 002B     		cmp	r3, #0
 492 0008 09D1     		bne	.L33
 420:Generated_Source\PSoC6/ADC.c ****     {
 421:Generated_Source\PSoC6/ADC.c ****         /* Interrupt core assignment will be up to the user. Initialize but do not enable the inter
 422:Generated_Source\PSoC6/ADC.c ****         #ifdef ADC_IRQ__INTC_CORTEXM4_ASSIGNED
 423:Generated_Source\PSoC6/ADC.c ****         #if (CY_CPU_CORTEX_M4)
 424:Generated_Source\PSoC6/ADC.c ****             (void)Cy_SysInt_Init(&ADC_IRQ_cfg, &ADC_ISR);
 425:Generated_Source\PSoC6/ADC.c ****         #endif
 426:Generated_Source\PSoC6/ADC.c ****         #endif
 427:Generated_Source\PSoC6/ADC.c **** 
 428:Generated_Source\PSoC6/ADC.c ****         #ifdef ADC_IRQ__INTC_CORTEXM0P_ASSIGNED
 429:Generated_Source\PSoC6/ADC.c ****         #if (CY_CPU_CORTEX_M0P)
 430:Generated_Source\PSoC6/ADC.c ****             (void)Cy_SysInt_Init(&ADC_IRQ_cfg, &ADC_ISR);
 431:Generated_Source\PSoC6/ADC.c ****         #endif
 432:Generated_Source\PSoC6/ADC.c ****         #endif
 433:Generated_Source\PSoC6/ADC.c **** 
 434:Generated_Source\PSoC6/ADC.c ****         /* Initialize configuration zero if SelectConfig has not been called */
 435:Generated_Source\PSoC6/ADC.c ****         if(0u == ADC_selected)
 493              		.loc 1 435 0
 494 000a 054B     		ldr	r3, .L35
 495 000c 5B79     		ldrb	r3, [r3, #5]
 496 000e 002B     		cmp	r3, #0
 497 0010 05D1     		bne	.L33
 436:Generated_Source\PSoC6/ADC.c ****         {
 437:Generated_Source\PSoC6/ADC.c ****             ADC_selected = 1u;
 498              		.loc 1 437 0
 499 0012 0122     		movs	r2, #1
 500 0014 024B     		ldr	r3, .L35
 501 0016 5A71     		strb	r2, [r3, #5]
 438:Generated_Source\PSoC6/ADC.c ****             configNum = 0uL;
 439:Generated_Source\PSoC6/ADC.c **** 
 440:Generated_Source\PSoC6/ADC.c ****             /* Change Vref selection if is was routed by Creator. Break. */
 441:Generated_Source\PSoC6/ADC.c ****             #if (ADC_VREF_ROUTED)
 442:Generated_Source\PSoC6/ADC.c ****                 ADC_vrefAMux_DisconnectAll();
 443:Generated_Source\PSoC6/ADC.c ****             #endif
 444:Generated_Source\PSoC6/ADC.c **** 
 445:Generated_Source\PSoC6/ADC.c ****             ADC_InitConfig(&ADC_allConfigs[configNum]);
 502              		.loc 1 445 0
 503 0018 0248     		ldr	r0, .L35+4
 504 001a FFF7FEFF 		bl	ADC_InitConfig
 505              	.LVL38:
 506              	.L33:
 446:Generated_Source\PSoC6/ADC.c **** 
 447:Generated_Source\PSoC6/ADC.c ****             /* Change Vref selection if is was routed by Creator. Make. */
 448:Generated_Source\PSoC6/ADC.c ****             #if (ADC_VREF_ROUTED)
 449:Generated_Source\PSoC6/ADC.c ****                 ADC_vrefAMux_Select((uint8)configNum);
 450:Generated_Source\PSoC6/ADC.c ****             #endif
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 93


 451:Generated_Source\PSoC6/ADC.c ****         }
 452:Generated_Source\PSoC6/ADC.c ****     }
 453:Generated_Source\PSoC6/ADC.c **** }
 507              		.loc 1 453 0
 508              		@ sp needed
 509 001e 10BD     		pop	{r4, pc}
 510              	.L36:
 511              		.align	2
 512              	.L35:
 513 0020 00000000 		.word	.LANCHOR0
 514 0024 00000000 		.word	ADC_allConfigs
 515              		.cfi_endproc
 516              	.LFE197:
 517              		.size	ADC_Init, .-ADC_Init
 518              		.section	.text.ADC_Start,"ax",%progbits
 519              		.align	2
 520              		.global	ADC_Start
 521              		.code	16
 522              		.thumb_func
 523              		.type	ADC_Start, %function
 524              	ADC_Start:
 525              	.LFB186:
  66:Generated_Source\PSoC6/ADC.c ****     if (ADC_INIT_VAR_INIT_FLAG != (ADC_INIT_VAR_INIT_FLAG & ADC_initVar))
 526              		.loc 1 66 0
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 0
 529              		@ frame_needed = 0, uses_anonymous_args = 0
 530 0000 10B5     		push	{r4, lr}
 531              		.cfi_def_cfa_offset 8
 532              		.cfi_offset 4, -8
 533              		.cfi_offset 14, -4
  67:Generated_Source\PSoC6/ADC.c ****     {
 534              		.loc 1 67 0
 535 0002 074B     		ldr	r3, .L39
 536 0004 1B79     		ldrb	r3, [r3, #4]
 537 0006 DB07     		lsls	r3, r3, #31
 538 0008 06D4     		bmi	.L38
  69:Generated_Source\PSoC6/ADC.c ****         ADC_initVar |= ADC_INIT_VAR_INIT_FLAG;
 539              		.loc 1 69 0
 540 000a FFF7FEFF 		bl	ADC_Init
 541              	.LVL39:
  70:Generated_Source\PSoC6/ADC.c ****     }
 542              		.loc 1 70 0
 543 000e 044A     		ldr	r2, .L39
 544 0010 1179     		ldrb	r1, [r2, #4]
 545 0012 0123     		movs	r3, #1
 546 0014 0B43     		orrs	r3, r1
 547 0016 1371     		strb	r3, [r2, #4]
 548              	.L38:
 549              	.LBB63:
 550              	.LBB64:
 551              		.file 4 "Generated_Source\\PSoC6\\ADC.h"
   1:Generated_Source\PSoC6/ADC.h **** /***************************************************************************//**
   2:Generated_Source\PSoC6/ADC.h **** * \file     ADC.h
   3:Generated_Source\PSoC6/ADC.h **** * \version  3.10
   4:Generated_Source\PSoC6/ADC.h **** *
   5:Generated_Source\PSoC6/ADC.h **** * \brief
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 94


   6:Generated_Source\PSoC6/ADC.h **** * Provides the source code to the API for the ADC Component.
   7:Generated_Source\PSoC6/ADC.h **** *
   8:Generated_Source\PSoC6/ADC.h **** ********************************************************************************
   9:Generated_Source\PSoC6/ADC.h **** * \copyright
  10:Generated_Source\PSoC6/ADC.h **** * (c) 2017-2018, Cypress Semiconductor Corporation. All rights reserved.
  11:Generated_Source\PSoC6/ADC.h **** * This software, including source code, documentation and related
  12:Generated_Source\PSoC6/ADC.h **** * materials ("Software"), is owned by Cypress Semiconductor
  13:Generated_Source\PSoC6/ADC.h **** * Corporation ("Cypress") and is protected by and subject to worldwide
  14:Generated_Source\PSoC6/ADC.h **** * patent protection (United States and foreign), United States copyright
  15:Generated_Source\PSoC6/ADC.h **** * laws and international treaty provisions. Therefore, you may use this
  16:Generated_Source\PSoC6/ADC.h **** * Software only as provided in the license agreement accompanying the
  17:Generated_Source\PSoC6/ADC.h **** * software package from which you obtained this Software ("EULA").
  18:Generated_Source\PSoC6/ADC.h **** * If no EULA applies, Cypress hereby grants you a personal, nonexclusive,
  19:Generated_Source\PSoC6/ADC.h **** * non-transferable license to copy, modify, and compile the
  20:Generated_Source\PSoC6/ADC.h **** * Software source code solely for use in connection with Cypress's
  21:Generated_Source\PSoC6/ADC.h **** * integrated circuit products. Any reproduction, modification, translation,
  22:Generated_Source\PSoC6/ADC.h **** * compilation, or representation of this Software except as specified
  23:Generated_Source\PSoC6/ADC.h **** * above is prohibited without the express written permission of Cypress.
  24:Generated_Source\PSoC6/ADC.h **** * Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO
  25:Generated_Source\PSoC6/ADC.h **** * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
  26:Generated_Source\PSoC6/ADC.h **** * BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED
  27:Generated_Source\PSoC6/ADC.h **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  28:Generated_Source\PSoC6/ADC.h **** * PARTICULAR PURPOSE. Cypress reserves the right to make
  29:Generated_Source\PSoC6/ADC.h **** * changes to the Software without notice. Cypress does not assume any
  30:Generated_Source\PSoC6/ADC.h **** * liability arising out of the application or use of the Software or any
  31:Generated_Source\PSoC6/ADC.h **** * product or circuit described in the Software. Cypress does not
  32:Generated_Source\PSoC6/ADC.h **** * authorize its products for use in any products where a malfunction or
  33:Generated_Source\PSoC6/ADC.h **** * failure of the Cypress product may reasonably be expected to result in
  34:Generated_Source\PSoC6/ADC.h **** * significant property damage, injury or death ("High Risk Product"). By
  35:Generated_Source\PSoC6/ADC.h **** * including Cypress's product in a High Risk Product, the manufacturer
  36:Generated_Source\PSoC6/ADC.h **** * of such system or application assumes all risk of such use and in doing
  37:Generated_Source\PSoC6/ADC.h **** * so agrees to indemnify Cypress against all liability.
  38:Generated_Source\PSoC6/ADC.h **** *******************************************************************************/
  39:Generated_Source\PSoC6/ADC.h **** #if !defined(CY_ADC_H)
  40:Generated_Source\PSoC6/ADC.h **** #define CY_ADC_H
  41:Generated_Source\PSoC6/ADC.h **** 
  42:Generated_Source\PSoC6/ADC.h **** #include <cy_device_headers.h>
  43:Generated_Source\PSoC6/ADC.h **** #include <sar/cy_sar.h>
  44:Generated_Source\PSoC6/ADC.h **** 
  45:Generated_Source\PSoC6/ADC.h **** #define ADC_VREF_ROUTED                  ((0) == 1u)
  46:Generated_Source\PSoC6/ADC.h **** #if (ADC_VREF_ROUTED)
  47:Generated_Source\PSoC6/ADC.h **** #include "ADC_vrefAMux.h"
  48:Generated_Source\PSoC6/ADC.h **** #endif
  49:Generated_Source\PSoC6/ADC.h **** 
  50:Generated_Source\PSoC6/ADC.h **** #define ADC_CLOCK_INTERNAL               ((1) == 1u)
  51:Generated_Source\PSoC6/ADC.h **** #if (ADC_CLOCK_INTERNAL)
  52:Generated_Source\PSoC6/ADC.h **** #include "ADC_intSarClock.h"
  53:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_CLOCK_INTERNAL */
  54:Generated_Source\PSoC6/ADC.h **** 
  55:Generated_Source\PSoC6/ADC.h **** /**
  56:Generated_Source\PSoC6/ADC.h **** * \addtogroup group_structures
  57:Generated_Source\PSoC6/ADC.h **** *
  58:Generated_Source\PSoC6/ADC.h **** */
  59:Generated_Source\PSoC6/ADC.h **** typedef struct
  60:Generated_Source\PSoC6/ADC.h **** {
  61:Generated_Source\PSoC6/ADC.h ****     uint32_t channelBase;                   /* Start of channels for the configuration */
  62:Generated_Source\PSoC6/ADC.h ****     uint32_t numChannels;                   /* Number of channels in the configuration */
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 95


  63:Generated_Source\PSoC6/ADC.h ****     const cy_stc_sar_config_t *hwConfigStc; /* PDL structure */
  64:Generated_Source\PSoC6/ADC.h ****     uint32_t miscConfig;                    /* Miscellaneous configuration bits broken down as foll
  65:Generated_Source\PSoC6/ADC.h ****                                             [0] - Freerunning: Set if the sample mode is freerunnin
  66:Generated_Source\PSoC6/ADC.h ****                                             [2] - Mux Switch 0: Set when VSSA is used for the neg i
  67:Generated_Source\PSoC6/ADC.h ****                                             */
  68:Generated_Source\PSoC6/ADC.h **** #if (ADC_CLOCK_INTERNAL)
  69:Generated_Source\PSoC6/ADC.h ****     uint32_t clkDivider;                    /* Clock divider */
  70:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_CLOCK_INTERNAL */
  71:Generated_Source\PSoC6/ADC.h **** 
  72:Generated_Source\PSoC6/ADC.h **** } ADC_CONFIG_STRUCT;
  73:Generated_Source\PSoC6/ADC.h **** /** @} structures */
  74:Generated_Source\PSoC6/ADC.h **** 
  75:Generated_Source\PSoC6/ADC.h **** /*******************************************************************************
  76:Generated_Source\PSoC6/ADC.h **** * Function Prototypes
  77:Generated_Source\PSoC6/ADC.h **** *******************************************************************************/
  78:Generated_Source\PSoC6/ADC.h **** void ADC_SelectConfig(uint32_t config, uint32_t restart);
  79:Generated_Source\PSoC6/ADC.h **** void ADC_InitConfig(const ADC_CONFIG_STRUCT *config);
  80:Generated_Source\PSoC6/ADC.h **** void ADC_Init(void);
  81:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_Enable(void);
  82:Generated_Source\PSoC6/ADC.h **** 
  83:Generated_Source\PSoC6/ADC.h **** /**
  84:Generated_Source\PSoC6/ADC.h **** * \addtogroup group_general
  85:Generated_Source\PSoC6/ADC.h **** * @{
  86:Generated_Source\PSoC6/ADC.h **** */
  87:Generated_Source\PSoC6/ADC.h **** void ADC_Start(void);
  88:Generated_Source\PSoC6/ADC.h **** void ADC_StartEx(cy_israddress userIsr);
  89:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_Stop(void);
  90:Generated_Source\PSoC6/ADC.h **** void ADC_StartConvert(void);
  91:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_StopConvert(void);
  92:Generated_Source\PSoC6/ADC.h **** void ADC_SetConvertMode(cy_en_sar_start_convert_sel_t mode);
  93:Generated_Source\PSoC6/ADC.h **** void ADC_SetEosMask(uint32_t mask);
  94:Generated_Source\PSoC6/ADC.h **** uint32_t ADC_IsEndConversion(cy_en_sar_return_mode_t retMode);
  95:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE int16_t ADC_GetResult16(uint32_t chan);
  96:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE int32_t ADC_GetResult32(uint32_t chan);
  97:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_SetLowLimit(uint32_t lowLimit);
  98:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_SetHighLimit(uint32_t highLimit);
  99:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_SetLimitMask(uint32_t limitMask);
 100:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_SetSatMask(uint32_t satMask);
 101:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE cy_en_sar_status_t ADC_SetOffset(uint32_t chan, int16_t offset);
 102:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE cy_en_sar_status_t ADC_SetGain(uint32_t chan, int32_t adcGain);
 103:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE float32_t ADC_CountsTo_Volts(uint32_t chan, int16_t adcCounts);
 104:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE int16_t ADC_CountsTo_mVolts(uint32_t chan, int16_t adcCounts);
 105:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE int32_t ADC_CountsTo_uVolts(uint32_t chan, int16_t adcCounts);
 106:Generated_Source\PSoC6/ADC.h **** 
 107:Generated_Source\PSoC6/ADC.h **** /** @} general */
 108:Generated_Source\PSoC6/ADC.h **** 
 109:Generated_Source\PSoC6/ADC.h **** void ADC_SetChanMask(uint32_t enableMask);
 110:Generated_Source\PSoC6/ADC.h **** 
 111:Generated_Source\PSoC6/ADC.h **** /**
 112:Generated_Source\PSoC6/ADC.h **** * \addtogroup group_power
 113:Generated_Source\PSoC6/ADC.h **** * @{
 114:Generated_Source\PSoC6/ADC.h **** */
 115:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_Sleep(void);
 116:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_Wakeup(void);
 117:Generated_Source\PSoC6/ADC.h **** 
 118:Generated_Source\PSoC6/ADC.h **** /** @} power */
 119:Generated_Source\PSoC6/ADC.h **** 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 96


 120:Generated_Source\PSoC6/ADC.h **** /**
 121:Generated_Source\PSoC6/ADC.h **** * \addtogroup group_interrupt
 122:Generated_Source\PSoC6/ADC.h **** * @{
 123:Generated_Source\PSoC6/ADC.h **** */
 124:Generated_Source\PSoC6/ADC.h **** void ADC_ISR(void);
 125:Generated_Source\PSoC6/ADC.h **** void ADC_IRQ_Enable(void);
 126:Generated_Source\PSoC6/ADC.h **** void ADC_IRQ_Disable(void);
 127:Generated_Source\PSoC6/ADC.h **** 
 128:Generated_Source\PSoC6/ADC.h **** /** @} interrupt */
 129:Generated_Source\PSoC6/ADC.h **** 
 130:Generated_Source\PSoC6/ADC.h **** /*******************************************************************************
 131:Generated_Source\PSoC6/ADC.h ****                                   Parameters
 132:Generated_Source\PSoC6/ADC.h **** The parameters that are set in the customizer are redefined as constants here.
 133:Generated_Source\PSoC6/ADC.h **** *******************************************************************************/
 134:Generated_Source\PSoC6/ADC.h **** 
 135:Generated_Source\PSoC6/ADC.h **** /*  Sample Mode setting constants */
 136:Generated_Source\PSoC6/ADC.h **** #define ADC_TOTAL_CONFIGS                (1ul)
 137:Generated_Source\PSoC6/ADC.h **** 
 138:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 139:Generated_Source\PSoC6/ADC.h **** /* Begin configuration 0 customizer defines                                   */
 140:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 141:Generated_Source\PSoC6/ADC.h **** 
 142:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SAMPLE_RATE             (10000)
 143:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_CHANNEL_BASE            (0u)
 144:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_CHANNEL_COUNT           (1u)
 145:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_VREF_SEL_MASK           (0x70u)
 146:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_NOMINAL_CLOCK_FREQ      (4000000u)
 147:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_CHANNEL_EN              (0x1u)
 148:Generated_Source\PSoC6/ADC.h **** 
 149:Generated_Source\PSoC6/ADC.h **** /* Sample Control Register */
 150:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SINGLE_ENDED_FORMAT     (1uL)
 151:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_DIFFERENTIAL_FORMAT     (1uL)
 152:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SAMPLES_AVERAGED        (2uL)
 153:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_RANGE_INTR_MASK         (0x0u)
 154:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SATURATE_INTR_MASK      (0x0u)
 155:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_VNEG_INPUT_SEL          (0)
 156:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SINGLE_PRESENT          (1)
 157:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_VREF_MV_VALUE           (3300)
 158:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_APERTURE_TIME0          (36uL)
 159:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_APERTURE_TIME1          (2uL)
 160:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_APERTURE_TIME2          (2uL)
 161:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_APERTURE_TIME3          (2uL)
 162:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_FREERUNNING             (1u)
 163:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_AVGERAGING_MODE         (1uL)
 164:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_LOW_LIMIT               (509u)
 165:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_HIGH_LIMIT              (3584u)
 166:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_RANGE_COND              (0uL)
 167:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_USE_SOC                 (0uL)
 168:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_VREF_PWR                (4uL)
 169:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_COMP_PWR                (5uL)
 170:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_COMP_DLY                (3uL)
 171:Generated_Source\PSoC6/ADC.h **** 
 172:Generated_Source\PSoC6/ADC.h **** /* Clock parameters*/
 173:Generated_Source\PSoC6/ADC.h **** #if (ADC_CLOCK_INTERNAL)
 174:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_CLOCKDIVIDER        (((CYDEV_CLK_PERICLK__HZ) / (ADC_CFG0_NOMINAL_CLOCK_FREQ))
 175:Generated_Source\PSoC6/ADC.h **** #endif /* (ADC_CLOCK_INTERNAL) */
 176:Generated_Source\PSoC6/ADC.h **** 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 97


 177:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 178:Generated_Source\PSoC6/ADC.h **** /* End configuration 0 customizer defines                                     */
 179:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 180:Generated_Source\PSoC6/ADC.h **** 
 181:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 182:Generated_Source\PSoC6/ADC.h **** /* Begin configuration 1 customizer defines                                   */
 183:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 184:Generated_Source\PSoC6/ADC.h **** 
 185:Generated_Source\PSoC6/ADC.h **** #if(ADC_TOTAL_CONFIGS > 1)
 186:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SAMPLE_RATE             ()
 187:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_CHANNEL_BASE            (u)
 188:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_CHANNEL_COUNT           (u)
 189:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_VREF_SEL_MASK           (u)
 190:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_NOMINAL_CLOCK_FREQ      (u)
 191:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_CHANNEL_EN              (u)
 192:Generated_Source\PSoC6/ADC.h **** 
 193:Generated_Source\PSoC6/ADC.h ****     /* Sample Control Register */
 194:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SINGLE_ENDED_FORMAT     (uL)
 195:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_DIFFERENTIAL_FORMAT     (uL)
 196:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SAMPLES_AVERAGED        (uL)
 197:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_RANGE_INTR_MASK         (u)
 198:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SATURATE_INTR_MASK      (u)
 199:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_VNEG_INPUT_SEL          ()
 200:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SINGLE_PRESENT          ()
 201:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_VREF_MV_VALUE           ()
 202:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_APERTURE_TIME0          (uL)
 203:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_APERTURE_TIME1          (uL)
 204:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_APERTURE_TIME2          (uL)
 205:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_APERTURE_TIME3          (uL)
 206:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_FREERUNNING             (u)
 207:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_AVGERAGING_MODE         (uL)
 208:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_LOW_LIMIT               (u)
 209:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_HIGH_LIMIT              (u)
 210:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_RANGE_COND              (uL)
 211:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_USE_SOC                 (0uL)
 212:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_VREF_PWR                (uL)
 213:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_COMP_PWR                (uL)
 214:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_COMP_DLY                (uL)
 215:Generated_Source\PSoC6/ADC.h **** 
 216:Generated_Source\PSoC6/ADC.h ****     /* Clock parameters*/
 217:Generated_Source\PSoC6/ADC.h ****     #if (ADC_CLOCK_INTERNAL)
 218:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG1_CLOCKDIVIDER        (((CYDEV_CLK_PERICLK__HZ) / (ADC_CFG1_NOMINAL_CLOCK_FR
 219:Generated_Source\PSoC6/ADC.h ****     #endif /* (ADC_CLOCK_INTERNAL) */
 220:Generated_Source\PSoC6/ADC.h **** #endif /* #if(ADC_TOTAL_CONFIGS > 1) */
 221:Generated_Source\PSoC6/ADC.h **** 
 222:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 223:Generated_Source\PSoC6/ADC.h **** /* End configuration 1 customizer defines                                     */
 224:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 225:Generated_Source\PSoC6/ADC.h **** 
 226:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 227:Generated_Source\PSoC6/ADC.h **** /* Begin configuration 2 customizer defines                                         */
 228:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 229:Generated_Source\PSoC6/ADC.h **** 
 230:Generated_Source\PSoC6/ADC.h **** #if(ADC_TOTAL_CONFIGS > 2)
 231:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SAMPLE_RATE             ()
 232:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_CHANNEL_BASE            (u)
 233:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_CHANNEL_COUNT           (u)
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 98


 234:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_VREF_SEL_MASK           (u)
 235:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_NOMINAL_CLOCK_FREQ      (u)
 236:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_CHANNEL_EN              (u)
 237:Generated_Source\PSoC6/ADC.h **** 
 238:Generated_Source\PSoC6/ADC.h ****     /* Sample Control Register */
 239:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SINGLE_ENDED_FORMAT     (uL)
 240:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_DIFFERENTIAL_FORMAT     (uL)
 241:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SAMPLES_AVERAGED        (uL)
 242:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_RANGE_INTR_MASK         (u)
 243:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SATURATE_INTR_MASK      (u)
 244:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_VNEG_INPUT_SEL          ()
 245:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SINGLE_PRESENT          ()
 246:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_VREF_MV_VALUE           ()
 247:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_APERTURE_TIME0          (uL)
 248:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_APERTURE_TIME1          (uL)
 249:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_APERTURE_TIME2          (uL)
 250:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_APERTURE_TIME3          (uL)
 251:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_FREERUNNING             (u)
 252:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_AVGERAGING_MODE         (uL)
 253:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_LOW_LIMIT               (u)
 254:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_HIGH_LIMIT              (u)
 255:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_RANGE_COND              (uL)
 256:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_USE_SOC                 (0uL)
 257:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_VREF_PWR                (uL)
 258:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_COMP_PWR                (uL)
 259:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_COMP_DLY                (uL)
 260:Generated_Source\PSoC6/ADC.h **** 
 261:Generated_Source\PSoC6/ADC.h ****     /* Clock parameters*/
 262:Generated_Source\PSoC6/ADC.h ****     #if (ADC_CLOCK_INTERNAL)
 263:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG2_CLOCKDIVIDER        (((CYDEV_CLK_PERICLK__HZ) / (ADC_CFG2_NOMINAL_CLOCK_FR
 264:Generated_Source\PSoC6/ADC.h ****     #endif /* (ADC_CLOCK_INTERNAL) */
 265:Generated_Source\PSoC6/ADC.h **** #endif /* (ADC_TOTAL_CONFIGS > 2) */
 266:Generated_Source\PSoC6/ADC.h **** 
 267:Generated_Source\PSoC6/ADC.h **** 
 268:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 269:Generated_Source\PSoC6/ADC.h **** /* End configuration 2 customizer defines                                     */
 270:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 271:Generated_Source\PSoC6/ADC.h **** 
 272:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 273:Generated_Source\PSoC6/ADC.h **** /* Begin configuration 3 customizer defines                                   */
 274:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 275:Generated_Source\PSoC6/ADC.h **** #if(ADC_TOTAL_CONFIGS > 3)
 276:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SAMPLE_RATE             ()
 277:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_CHANNEL_BASE            (u)
 278:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_CHANNEL_COUNT           (u)
 279:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_VREF_SEL_MASK           (u)
 280:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_NOMINAL_CLOCK_FREQ      (u)
 281:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_CHANNEL_EN              (u)
 282:Generated_Source\PSoC6/ADC.h **** 
 283:Generated_Source\PSoC6/ADC.h ****     /* Sample Control Register */
 284:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SINGLE_ENDED_FORMAT     (uL)
 285:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_DIFFERENTIAL_FORMAT     (uL)
 286:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SAMPLES_AVERAGED        (uL)
 287:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_RANGE_INTR_MASK         (u)
 288:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SATURATE_INTR_MASK      (u)
 289:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_VNEG_INPUT_SEL          ()
 290:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SINGLE_PRESENT          ()
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 99


 291:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_VREF_MV_VALUE           ()
 292:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_APERTURE_TIME0          (uL)
 293:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_APERTURE_TIME1          (uL)
 294:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_APERTURE_TIME2          (uL)
 295:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_APERTURE_TIME3          (uL)
 296:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_FREERUNNING             (u)
 297:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_AVGERAGING_MODE         (uL)
 298:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_LOW_LIMIT               (u)
 299:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_HIGH_LIMIT              (u)
 300:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_RANGE_COND              (uL)
 301:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_USE_SOC                 (0uL)
 302:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_VREF_PWR                (uL)
 303:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_COMP_PWR                (uL)
 304:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_COMP_DLY                (uL)
 305:Generated_Source\PSoC6/ADC.h **** 
 306:Generated_Source\PSoC6/ADC.h ****     /* Clock parameters*/
 307:Generated_Source\PSoC6/ADC.h ****     #if (ADC_CLOCK_INTERNAL)
 308:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG3_CLOCKDIVIDER        (((CYDEV_CLK_PERICLK__HZ) / (ADC_CFG3_NOMINAL_CLOCK_FR
 309:Generated_Source\PSoC6/ADC.h ****     #endif /* (ADC_CLOCK_INTERNAL) */
 310:Generated_Source\PSoC6/ADC.h **** #endif /* (ADC_TOTAL_CONFIGS > 3) */
 311:Generated_Source\PSoC6/ADC.h **** 
 312:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 313:Generated_Source\PSoC6/ADC.h **** /* End configuration 3 customizer defines                                     */
 314:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 315:Generated_Source\PSoC6/ADC.h **** 
 316:Generated_Source\PSoC6/ADC.h **** #define ADC_DEFAULT_SAMPLE_MODE_SEL      (0u)
 317:Generated_Source\PSoC6/ADC.h **** #define ADC_FREERUNNING                  (1u)
 318:Generated_Source\PSoC6/ADC.h **** #define ADC_HARDWARESOC                  (1u)
 319:Generated_Source\PSoC6/ADC.h **** #define ADC_NEG_SEL_VSSA_KELVIN          (0x0uL)
 320:Generated_Source\PSoC6/ADC.h **** #define ADC_NEG_SEL_VREF                 (0x7uL)
 321:Generated_Source\PSoC6/ADC.h **** #define ADC_PWR_CTRL_VREF_NORMAL_PWR     (0x0uL)
 322:Generated_Source\PSoC6/ADC.h **** 
 323:Generated_Source\PSoC6/ADC.h **** /** ADC_TOTAL_CHANNELS_NUM
 324:Generated_Source\PSoC6/ADC.h **** * This constant represents the number of input channels available for scanning.
 325:Generated_Source\PSoC6/ADC.h **** */
 326:Generated_Source\PSoC6/ADC.h **** #define ADC_TOTAL_CHANNELS_NUM           (1u)
 327:Generated_Source\PSoC6/ADC.h **** 
 328:Generated_Source\PSoC6/ADC.h **** /*******************************************************************************
 329:Generated_Source\PSoC6/ADC.h **** *    Variables with External Linkage
 330:Generated_Source\PSoC6/ADC.h **** *******************************************************************************/
 331:Generated_Source\PSoC6/ADC.h **** /**
 332:Generated_Source\PSoC6/ADC.h **** * \addtogroup group_globals
 333:Generated_Source\PSoC6/ADC.h **** * Globals are noted in the descriptions of the functions that use globals.
 334:Generated_Source\PSoC6/ADC.h **** * They are marked with (R), (W), or (RW) noting whether the variable is read,
 335:Generated_Source\PSoC6/ADC.h **** * write, or read/write.
 336:Generated_Source\PSoC6/ADC.h **** * @{
 337:Generated_Source\PSoC6/ADC.h **** */
 338:Generated_Source\PSoC6/ADC.h **** 
 339:Generated_Source\PSoC6/ADC.h **** /** ADC_initVar
 340:Generated_Source\PSoC6/ADC.h **** * The ADC_initVar variable is used to indicate
 341:Generated_Source\PSoC6/ADC.h **** * initial configuration of this component. The variable is initialized to zero and
 342:Generated_Source\PSoC6/ADC.h **** * set to 1 the first time ADC_Start() is called. This allows for
 343:Generated_Source\PSoC6/ADC.h **** * component initialization without reinitialization in all subsequent calls to the
 344:Generated_Source\PSoC6/ADC.h **** * ADC_Start() routine.
 345:Generated_Source\PSoC6/ADC.h **** *
 346:Generated_Source\PSoC6/ADC.h **** * If reinitialization of the component is required, then the ADC_Init() function
 347:Generated_Source\PSoC6/ADC.h **** * can be called before the ADC_Start() or ADC_Enable()
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 100


 348:Generated_Source\PSoC6/ADC.h **** * functions.
 349:Generated_Source\PSoC6/ADC.h **** */
 350:Generated_Source\PSoC6/ADC.h **** extern uint8_t ADC_initVar;
 351:Generated_Source\PSoC6/ADC.h **** extern uint8_t ADC_selected;
 352:Generated_Source\PSoC6/ADC.h **** extern uint32_t ADC_currentConfig;
 353:Generated_Source\PSoC6/ADC.h **** 
 354:Generated_Source\PSoC6/ADC.h **** #define ADC_INIT_VAR_INIT_FLAG     (0x01u)
 355:Generated_Source\PSoC6/ADC.h **** 
 356:Generated_Source\PSoC6/ADC.h **** extern const ADC_CONFIG_STRUCT ADC_allConfigs[ADC_TOTAL_CONFIGS];
 357:Generated_Source\PSoC6/ADC.h **** 
 358:Generated_Source\PSoC6/ADC.h **** /* SysPm callback structure for deep sleep entry and exit.
 359:Generated_Source\PSoC6/ADC.h ****  * Call the Cy_SysPm_RegisterCallback function with this
 360:Generated_Source\PSoC6/ADC.h ****  * structure before calling Cy_SysPm_DeepSleep.
 361:Generated_Source\PSoC6/ADC.h **** */
 362:Generated_Source\PSoC6/ADC.h **** extern cy_stc_syspm_callback_t ADC_DeepSleepCallbackStruct;
 363:Generated_Source\PSoC6/ADC.h **** 
 364:Generated_Source\PSoC6/ADC.h **** /** @} globals */
 365:Generated_Source\PSoC6/ADC.h **** 
 366:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 367:Generated_Source\PSoC6/ADC.h **** /* *******************Global MUX_SWITCH0 Definitions ************************ */
 368:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 369:Generated_Source\PSoC6/ADC.h **** #if(ADC_CFG0_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN)
 370:Generated_Source\PSoC6/ADC.h ****     /* Do not connect VSSA to VMINUS when one channel in differential mode used */
 371:Generated_Source\PSoC6/ADC.h ****     #if((ADC_TOTAL_CHANNELS_NUM == 1u) && (ADC_CFG0_SINGLE_PRESENT == 0u))
 372:Generated_Source\PSoC6/ADC.h ****         #define ADC_MUX_SWITCH0_INIT      0u
 373:Generated_Source\PSoC6/ADC.h ****     #else    /* multiple channels or one single ended channel */
 374:Generated_Source\PSoC6/ADC.h ****         #define ADC_MUX_SWITCH0_INIT      1u
 375:Generated_Source\PSoC6/ADC.h ****     #endif /* ((ADC_TOTAL_CHANNELS_NUM == 1u) && (ADC_CFG0_SINGLE_PRESENT == 0u)) */
 376:Generated_Source\PSoC6/ADC.h **** #else
 377:Generated_Source\PSoC6/ADC.h ****     #define ADC_MUX_SWITCH0_INIT          0u
 378:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_CFG0_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN */
 379:Generated_Source\PSoC6/ADC.h **** 
 380:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 381:Generated_Source\PSoC6/ADC.h **** /* Begin configuration 0 calculated defines                                   */
 382:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 383:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SAMPLE_TIME01_INIT \
 384:Generated_Source\PSoC6/ADC.h ****         ((ADC_CFG0_APERTURE_TIME0 \
 385:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos) \
 386:Generated_Source\PSoC6/ADC.h ****         | (ADC_CFG0_APERTURE_TIME1 \
 387:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_TIME01_SAMPLE_TIME1_Pos))
 388:Generated_Source\PSoC6/ADC.h **** 
 389:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SAMPLE_TIME23_INIT \
 390:Generated_Source\PSoC6/ADC.h ****         ((ADC_CFG0_APERTURE_TIME2 \
 391:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_TIME23_SAMPLE_TIME2_Pos) \
 392:Generated_Source\PSoC6/ADC.h ****         | (ADC_CFG0_APERTURE_TIME3 \
 393:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_TIME23_SAMPLE_TIME3_Pos))
 394:Generated_Source\PSoC6/ADC.h **** 
 395:Generated_Source\PSoC6/ADC.h **** /* Enable soc pin if used */
 396:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_DSI_TRIGGER_EN_INIT \
 397:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_USE_SOC \
 398:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Pos)
 399:Generated_Source\PSoC6/ADC.h **** 
 400:Generated_Source\PSoC6/ADC.h **** /* Set soc operation to edge or level based on sample mode */
 401:Generated_Source\PSoC6/ADC.h **** #if(ADC_CFG0_FREERUNNING == ADC_FREERUNNING)
 402:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_DSI_TRIGGER_LEVEL_INIT    (SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk)
 403:Generated_Source\PSoC6/ADC.h **** #else /* Edge trigger */
 404:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_DSI_TRIGGER_LEVEL_INIT    (0u)
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 101


 405:Generated_Source\PSoC6/ADC.h **** #endif /* End ADC_CFG0_FREERUNNING == ADC_FREERUNNING */
 406:Generated_Source\PSoC6/ADC.h **** 
 407:Generated_Source\PSoC6/ADC.h **** /* Set SE_NEG_INPUT */
 408:Generated_Source\PSoC6/ADC.h **** #if(ADC_CFG0_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN)
 409:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_SE_NEG_INPUT_INIT \
 410:Generated_Source\PSoC6/ADC.h ****             ((uint32)(ADC_NEG_SEL_VSSA_KELVIN \
 411:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_NEG_SEL_Pos ))
 412:Generated_Source\PSoC6/ADC.h **** #elif(ADC_CFG0_VNEG_INPUT_SEL == ADC_NEG_SEL_VREF)
 413:Generated_Source\PSoC6/ADC.h **** 
 414:Generated_Source\PSoC6/ADC.h ****     /* Do not connect VNEG to VREF when one channel in differential mode used */
 415:Generated_Source\PSoC6/ADC.h ****     /* Only needed for config 0 since 2+ configs == 2+ channels */
 416:Generated_Source\PSoC6/ADC.h ****     #if((ADC_CFG0_CHANNEL_COUNT == 1u) && (ADC_CFG0_SINGLE_PRESENT == 0u))
 417:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG0_SE_NEG_INPUT_INIT     0u
 418:Generated_Source\PSoC6/ADC.h ****     #else    /* multiple channels or one single channel */
 419:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG0_SE_NEG_INPUT_INIT     (ADC_NEG_SEL_VREF \
 420:Generated_Source\PSoC6/ADC.h ****                                                             << SAR_CTRL_NEG_SEL_Pos )
 421:Generated_Source\PSoC6/ADC.h ****     #endif /* (ADC_CFG0_CHANNEL_COUNT == 1u) && (ADC_CFG0_CHANNELS_MODE != 0u) */
 422:Generated_Source\PSoC6/ADC.h **** #elif (ADC_CFG0_SINGLE_PRESENT != 0u)
 423:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_SE_NEG_INPUT_INIT         ADC_CFG0_NEG_OTHER
 424:Generated_Source\PSoC6/ADC.h **** #else
 425:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_SE_NEG_INPUT_INIT         0u
 426:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_CFG0_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN */
 427:Generated_Source\PSoC6/ADC.h **** 
 428:Generated_Source\PSoC6/ADC.h **** #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 429:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_NEG_OTHER                 (uint16)((uint16)ADC_SARMUX__VNEG0 << SAR_CTRL_NEG_S
 430:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_SWITCH_CONF_INIT          0u
 431:Generated_Source\PSoC6/ADC.h **** #else /* Disable SAR sequencer from enabling routing switches in single channel mode */
 432:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_SWITCH_CONF_INIT          SAR_CTRL_SWITCH_DISABLE_Msk
 433:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_NEG_OTHER                 0u
 434:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_CFG0_CHANNEL_COUNT > 1u */
 435:Generated_Source\PSoC6/ADC.h **** 
 436:Generated_Source\PSoC6/ADC.h **** /* If the SAR is configured for multiple channels, always set SAR_HW_CTRL_NEGVREF to 1 */
 437:Generated_Source\PSoC6/ADC.h **** #if(ADC_TOTAL_CHANNELS_NUM == 1u)
 438:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_HW_CTRL_NEGVREF_INIT      0u
 439:Generated_Source\PSoC6/ADC.h **** #else
 440:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_HW_CTRL_NEGVREF_INIT      SAR_CTRL_SAR_HW_CTRL_NEGVREF_Msk
 441:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_CFG0_CHANNEL_COUNT == 1u */
 442:Generated_Source\PSoC6/ADC.h **** 
 443:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_POWER_INIT  (ADC_PWR_CTRL_VREF_NORMAL_PWR)
 444:Generated_Source\PSoC6/ADC.h **** 
 445:Generated_Source\PSoC6/ADC.h **** /* SAMPLE_CTRL initial values */
 446:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SE_RESULT_FORMAT_INIT \
 447:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_SINGLE_ENDED_FORMAT \
 448:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos)
 449:Generated_Source\PSoC6/ADC.h **** 
 450:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_DIFF_RESULT_FORMAT_INIT \
 451:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_DIFFERENTIAL_FORMAT \
 452:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos)
 453:Generated_Source\PSoC6/ADC.h **** 
 454:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_AVG_SAMPLES_NUM_INIT \
 455:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_SAMPLES_AVERAGED \
 456:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_CTRL_AVG_CNT_Pos)
 457:Generated_Source\PSoC6/ADC.h **** 
 458:Generated_Source\PSoC6/ADC.h **** /* Combination of Average Mode and Average Shift */
 459:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_AVG_MODE_INIT \
 460:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_AVGERAGING_MODE \
 461:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_CTRL_AVG_SHIFT_Pos)
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 102


 462:Generated_Source\PSoC6/ADC.h **** 
 463:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_TRIGGER_OUT_INIT      (0u)
 464:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_UAB_SCAN_MODE_INIT    (0u)
 465:Generated_Source\PSoC6/ADC.h **** 
 466:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_VREF_POWER_INIT  \
 467:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_VREF_PWR \
 468:Generated_Source\PSoC6/ADC.h ****         << SAR_CTRL_PWR_CTRL_VREF_Pos)
 469:Generated_Source\PSoC6/ADC.h **** 
 470:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_COMP_PWR_INIT  \
 471:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_COMP_PWR \
 472:Generated_Source\PSoC6/ADC.h ****         << SAR_CTRL_COMP_PWR_Pos)
 473:Generated_Source\PSoC6/ADC.h **** 
 474:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_COMP_DLY_INIT  \
 475:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_COMP_DLY \
 476:Generated_Source\PSoC6/ADC.h ****         << SAR_CTRL_COMP_DLY_Pos)
 477:Generated_Source\PSoC6/ADC.h **** 
 478:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_CTRL_INIT  \
 479:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_VREF_POWER_INIT \
 480:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_VREF_SEL_MASK \
 481:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_SE_NEG_INPUT_INIT \
 482:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_HW_CTRL_NEGVREF_INIT \
 483:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_COMP_DLY_INIT \
 484:Generated_Source\PSoC6/ADC.h ****         | SAR_CTRL_REFBUF_EN_Msk \
 485:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_COMP_PWR_INIT \
 486:Generated_Source\PSoC6/ADC.h ****         | SAR_CTRL_DSI_SYNC_CONFIG_Msk  \
 487:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_SWITCH_CONF_INIT )
 488:Generated_Source\PSoC6/ADC.h **** 
 489:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SAMPLE_CTRL_INIT \
 490:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_SE_RESULT_FORMAT_INIT \
 491:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_DIFF_RESULT_FORMAT_INIT \
 492:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_AVG_SAMPLES_NUM_INIT \
 493:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_AVG_MODE_INIT \
 494:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_DSI_TRIGGER_LEVEL_INIT \
 495:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_DSI_TRIGGER_EN_INIT \
 496:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_UAB_SCAN_MODE_INIT \
 497:Generated_Source\PSoC6/ADC.h ****         | SAR_SAMPLE_CTRL_VALID_IGNORE_Msk \
 498:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_TRIGGER_OUT_INIT \
 499:Generated_Source\PSoC6/ADC.h ****         | SAR_SAMPLE_CTRL_EOS_DSI_OUT_EN_Msk \
 500:Generated_Source\PSoC6/ADC.h **** )
 501:Generated_Source\PSoC6/ADC.h **** 
 502:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_RANGE_THRES_INIT \
 503:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_LOW_LIMIT \
 504:Generated_Source\PSoC6/ADC.h ****         | (uint32)((uint32)ADC_CFG0_HIGH_LIMIT \
 505:Generated_Source\PSoC6/ADC.h ****         << SAR_RANGE_THRES_RANGE_HIGH_Pos))
 506:Generated_Source\PSoC6/ADC.h **** 
 507:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_RANGE_COND_INIT   (cy_en_sar_range_detect_condition_t)ADC_CFG0_RANGE_COND
 508:Generated_Source\PSoC6/ADC.h **** 
 509:Generated_Source\PSoC6/ADC.h **** /* Misc Config
 510:Generated_Source\PSoC6/ADC.h ****     [0] - Freerunning: Set if the sample mode is freerunning
 511:Generated_Source\PSoC6/ADC.h **** */
 512:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_MISC_CONFIG_INIT \
 513:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_FREERUNNING)
 514:Generated_Source\PSoC6/ADC.h **** 
 515:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 516:Generated_Source\PSoC6/ADC.h **** /* End configuration 0 calculated defines                                     */
 517:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 518:Generated_Source\PSoC6/ADC.h **** 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 103


 519:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 520:Generated_Source\PSoC6/ADC.h **** /* Begin configuration 1 calculated defines                                   */
 521:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 522:Generated_Source\PSoC6/ADC.h **** #if(ADC_TOTAL_CONFIGS > 1)
 523:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SAMPLE_TIME01_INIT \
 524:Generated_Source\PSoC6/ADC.h ****             ((ADC_CFG1_APERTURE_TIME0 \
 525:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos) \
 526:Generated_Source\PSoC6/ADC.h ****             | (ADC_CFG1_APERTURE_TIME1 \
 527:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME1_Pos))
 528:Generated_Source\PSoC6/ADC.h **** 
 529:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SAMPLE_TIME23_INIT \
 530:Generated_Source\PSoC6/ADC.h ****             ((ADC_CFG1_APERTURE_TIME2 \
 531:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME2_Pos) \
 532:Generated_Source\PSoC6/ADC.h ****             | (ADC_CFG1_APERTURE_TIME3 \
 533:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME3_Pos))
 534:Generated_Source\PSoC6/ADC.h **** 
 535:Generated_Source\PSoC6/ADC.h ****     /* Enable soc pin if used */
 536:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_DSI_TRIGGER_EN_INIT \
 537:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_USE_SOC \
 538:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Pos)
 539:Generated_Source\PSoC6/ADC.h **** 
 540:Generated_Source\PSoC6/ADC.h ****     /* Set soc operation to edge or level based on sample mode */
 541:Generated_Source\PSoC6/ADC.h ****     #if(ADC_CFG1_FREERUNNING == ADC_FREERUNNING)
 542:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG1_DSI_TRIGGER_LEVEL_INIT    (SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk)
 543:Generated_Source\PSoC6/ADC.h ****     #else /* Edge trigger */
 544:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG1_DSI_TRIGGER_LEVEL_INIT    (0u)
 545:Generated_Source\PSoC6/ADC.h ****     #endif /* End ADC_CFG1_FREERUNNING == ADC_FREERUNNING */
 546:Generated_Source\PSoC6/ADC.h **** 
 547:Generated_Source\PSoC6/ADC.h ****     /* Set SE_NEG_INPUT */
 548:Generated_Source\PSoC6/ADC.h ****     #if(ADC_CFG1_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN)
 549:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG1_SE_NEG_INPUT_INIT \
 550:Generated_Source\PSoC6/ADC.h ****             ((uint32)(ADC_NEG_SEL_VSSA_KELVIN \
 551:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_NEG_SEL_Pos ))
 552:Generated_Source\PSoC6/ADC.h ****     #elif(ADC_CFG1_VNEG_INPUT_SEL == ADC_NEG_SEL_VREF)
 553:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG1_SE_NEG_INPUT_INIT     (ADC_NEG_SEL_VREF \
 554:Generated_Source\PSoC6/ADC.h ****                                                             << SAR_CTRL_NEG_SEL_Pos )
 555:Generated_Source\PSoC6/ADC.h ****     #elif (ADC_CFG1_SINGLE_PRESENT != 0u)
 556:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG1_SE_NEG_INPUT_INIT         ADC_CFG1_NEG_OTHER
 557:Generated_Source\PSoC6/ADC.h ****     #else
 558:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG1_SE_NEG_INPUT_INIT         0u
 559:Generated_Source\PSoC6/ADC.h ****     #endif /* ADC_CFG1_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN */
 560:Generated_Source\PSoC6/ADC.h **** 
 561:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_NEG_OTHER                 (uint16)((uint16)ADC_SARMUX__VNEG1 << SAR_CTRL_NEG_S
 562:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SWITCH_CONF_INIT          0u
 563:Generated_Source\PSoC6/ADC.h **** 
 564:Generated_Source\PSoC6/ADC.h ****     /* If the SAR is configured for multiple channels, always set SAR_HW_CTRL_NEGVREF to 1 */
 565:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_HW_CTRL_NEGVREF_INIT      SAR_CTRL_SAR_HW_CTRL_NEGVREF_Msk
 566:Generated_Source\PSoC6/ADC.h **** 
 567:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_POWER_INIT  (ADC_PWR_CTRL_VREF_NORMAL_PWR)
 568:Generated_Source\PSoC6/ADC.h **** 
 569:Generated_Source\PSoC6/ADC.h ****     /* SAMPLE_CTRL initial values */
 570:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SE_RESULT_FORMAT_INIT \
 571:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_SINGLE_ENDED_FORMAT \
 572:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos)
 573:Generated_Source\PSoC6/ADC.h **** 
 574:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_DIFF_RESULT_FORMAT_INIT \
 575:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_DIFFERENTIAL_FORMAT \
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 104


 576:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos)
 577:Generated_Source\PSoC6/ADC.h **** 
 578:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_AVG_SAMPLES_NUM_INIT \
 579:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_SAMPLES_AVERAGED \
 580:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_AVG_CNT_Pos)
 581:Generated_Source\PSoC6/ADC.h **** 
 582:Generated_Source\PSoC6/ADC.h ****     /* Combination of Average Mode and Average Shift */
 583:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_AVG_MODE_INIT \
 584:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_AVGERAGING_MODE \
 585:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_AVG_SHIFT_Pos)
 586:Generated_Source\PSoC6/ADC.h **** 
 587:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_TRIGGER_OUT_INIT      (0u)
 588:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_UAB_SCAN_MODE_INIT    (0u)
 589:Generated_Source\PSoC6/ADC.h **** 
 590:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_VREF_POWER_INIT  \
 591:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_VREF_PWR \
 592:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_PWR_CTRL_VREF_Pos)
 593:Generated_Source\PSoC6/ADC.h **** 
 594:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_COMP_PWR_INIT  \
 595:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_COMP_PWR \
 596:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_COMP_PWR_Pos)
 597:Generated_Source\PSoC6/ADC.h **** 
 598:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_COMP_DLY_INIT  \
 599:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_COMP_DLY \
 600:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_COMP_DLY_Pos)
 601:Generated_Source\PSoC6/ADC.h **** 
 602:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_CTRL_INIT  \
 603:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_VREF_POWER_INIT \
 604:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_VREF_SEL_MASK \
 605:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_SE_NEG_INPUT_INIT \
 606:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_HW_CTRL_NEGVREF_INIT \
 607:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_COMP_DLY_INIT \
 608:Generated_Source\PSoC6/ADC.h ****             | SAR_CTRL_REFBUF_EN_Msk \
 609:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_COMP_PWR_INIT \
 610:Generated_Source\PSoC6/ADC.h ****             | SAR_CTRL_DSI_SYNC_CONFIG_Msk  \
 611:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_SWITCH_CONF_INIT )
 612:Generated_Source\PSoC6/ADC.h **** 
 613:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SAMPLE_CTRL_INIT \
 614:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_SE_RESULT_FORMAT_INIT \
 615:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_DIFF_RESULT_FORMAT_INIT \
 616:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_AVG_SAMPLES_NUM_INIT \
 617:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_AVG_MODE_INIT \
 618:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_DSI_TRIGGER_LEVEL_INIT \
 619:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_DSI_TRIGGER_EN_INIT \
 620:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_UAB_SCAN_MODE_INIT \
 621:Generated_Source\PSoC6/ADC.h ****             | SAR_SAMPLE_CTRL_VALID_IGNORE_Msk \
 622:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_TRIGGER_OUT_INIT \
 623:Generated_Source\PSoC6/ADC.h ****             | SAR_SAMPLE_CTRL_EOS_DSI_OUT_EN_Msk \
 624:Generated_Source\PSoC6/ADC.h ****     )
 625:Generated_Source\PSoC6/ADC.h **** 
 626:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_RANGE_THRES_INIT \
 627:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_LOW_LIMIT \
 628:Generated_Source\PSoC6/ADC.h ****             | (uint32)((uint32)ADC_CFG1_HIGH_LIMIT \
 629:Generated_Source\PSoC6/ADC.h ****             << SAR_RANGE_THRES_RANGE_HIGH_Pos))
 630:Generated_Source\PSoC6/ADC.h **** 
 631:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_RANGE_COND_INIT   (cy_en_sar_range_detect_condition_t)ADC_CFG1_RANGE_COND
 632:Generated_Source\PSoC6/ADC.h **** 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 105


 633:Generated_Source\PSoC6/ADC.h ****     /* Misc Config
 634:Generated_Source\PSoC6/ADC.h ****         [0] - Freerunning: Set if the sample mode is freerunning
 635:Generated_Source\PSoC6/ADC.h ****     */
 636:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_MISC_CONFIG_INIT \
 637:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_FREERUNNING)
 638:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_TOTAL_CONFIGS > 1 */
 639:Generated_Source\PSoC6/ADC.h **** 
 640:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 641:Generated_Source\PSoC6/ADC.h **** /* End configuration 1 calculated defines                                     */
 642:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 643:Generated_Source\PSoC6/ADC.h **** 
 644:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 645:Generated_Source\PSoC6/ADC.h **** /* Begin configuration 2 calculated defines                                   */
 646:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 647:Generated_Source\PSoC6/ADC.h **** #if(ADC_TOTAL_CONFIGS > 2)
 648:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SAMPLE_TIME01_INIT \
 649:Generated_Source\PSoC6/ADC.h ****             ((ADC_CFG2_APERTURE_TIME0 \
 650:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos) \
 651:Generated_Source\PSoC6/ADC.h ****             | (ADC_CFG2_APERTURE_TIME1 \
 652:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME1_Pos))
 653:Generated_Source\PSoC6/ADC.h **** 
 654:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SAMPLE_TIME23_INIT \
 655:Generated_Source\PSoC6/ADC.h ****             ((ADC_CFG2_APERTURE_TIME2 \
 656:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME2_Pos) \
 657:Generated_Source\PSoC6/ADC.h ****             | (ADC_CFG2_APERTURE_TIME3 \
 658:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME3_Pos))
 659:Generated_Source\PSoC6/ADC.h **** 
 660:Generated_Source\PSoC6/ADC.h ****     /* Enable soc pin if used */
 661:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_DSI_TRIGGER_EN_INIT \
 662:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_USE_SOC \
 663:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Pos)
 664:Generated_Source\PSoC6/ADC.h **** 
 665:Generated_Source\PSoC6/ADC.h ****     /* Set soc operation to edge or level based on sample mode */
 666:Generated_Source\PSoC6/ADC.h ****     #if(ADC_CFG2_FREERUNNING == ADC_FREERUNNING)
 667:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG2_DSI_TRIGGER_LEVEL_INIT    (SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk)
 668:Generated_Source\PSoC6/ADC.h ****     #else /* Edge trigger */
 669:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG2_DSI_TRIGGER_LEVEL_INIT    (0u)
 670:Generated_Source\PSoC6/ADC.h ****     #endif /* End ADC_CFG2_FREERUNNING == ADC_FREERUNNING */
 671:Generated_Source\PSoC6/ADC.h **** 
 672:Generated_Source\PSoC6/ADC.h ****     /* Set SE_NEG_INPUT */
 673:Generated_Source\PSoC6/ADC.h ****     #if(ADC_CFG2_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN)
 674:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG2_SE_NEG_INPUT_INIT \
 675:Generated_Source\PSoC6/ADC.h ****             ((uint32)(ADC_NEG_SEL_VSSA_KELVIN \
 676:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_NEG_SEL_Pos ))
 677:Generated_Source\PSoC6/ADC.h ****     #elif(ADC_CFG2_VNEG_INPUT_SEL == ADC_NEG_SEL_VREF)
 678:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG2_SE_NEG_INPUT_INIT     (ADC_NEG_SEL_VREF \
 679:Generated_Source\PSoC6/ADC.h ****                                                                 << SAR_CTRL_NEG_SEL_Pos )
 680:Generated_Source\PSoC6/ADC.h ****     #elif (ADC_CFG2_SINGLE_PRESENT != 0u)
 681:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG2_SE_NEG_INPUT_INIT         ADC_CFG2_NEG_OTHER
 682:Generated_Source\PSoC6/ADC.h ****     #else
 683:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG2_SE_NEG_INPUT_INIT         0u
 684:Generated_Source\PSoC6/ADC.h ****     #endif /* ADC_CFG2_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN */
 685:Generated_Source\PSoC6/ADC.h **** 
 686:Generated_Source\PSoC6/ADC.h ****    #define ADC_CFG2_NEG_OTHER                 (uint16)((uint16)ADC_SARMUX__VNEG2 << SAR_CTRL_NEG_SE
 687:Generated_Source\PSoC6/ADC.h **** 
 688:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SWITCH_CONF_INIT          0u
 689:Generated_Source\PSoC6/ADC.h **** 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 106


 690:Generated_Source\PSoC6/ADC.h ****     /* If the SAR is configured for multiple channels, always set SAR_HW_CTRL_NEGVREF to 1 */
 691:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_HW_CTRL_NEGVREF_INIT      SAR_CTRL_SAR_HW_CTRL_NEGVREF_Msk
 692:Generated_Source\PSoC6/ADC.h **** 
 693:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_POWER_INIT  (ADC_PWR_CTRL_VREF_NORMAL_PWR)
 694:Generated_Source\PSoC6/ADC.h **** 
 695:Generated_Source\PSoC6/ADC.h ****     /* SAMPLE_CTRL initial values */
 696:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SE_RESULT_FORMAT_INIT \
 697:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_SINGLE_ENDED_FORMAT \
 698:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos)
 699:Generated_Source\PSoC6/ADC.h **** 
 700:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_DIFF_RESULT_FORMAT_INIT \
 701:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_DIFFERENTIAL_FORMAT \
 702:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos)
 703:Generated_Source\PSoC6/ADC.h **** 
 704:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_AVG_SAMPLES_NUM_INIT \
 705:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_SAMPLES_AVERAGED \
 706:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_AVG_CNT_Pos)
 707:Generated_Source\PSoC6/ADC.h **** 
 708:Generated_Source\PSoC6/ADC.h ****     /* Combination of Average Mode and Average Shift */
 709:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_AVG_MODE_INIT \
 710:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_AVGERAGING_MODE \
 711:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_AVG_SHIFT_Pos)
 712:Generated_Source\PSoC6/ADC.h **** 
 713:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_TRIGGER_OUT_INIT      (0u)
 714:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_UAB_SCAN_MODE_INIT    (0u)
 715:Generated_Source\PSoC6/ADC.h **** 
 716:Generated_Source\PSoC6/ADC.h **** 
 717:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_VREF_POWER_INIT  \
 718:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_VREF_PWR \
 719:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_PWR_CTRL_VREF_Pos)
 720:Generated_Source\PSoC6/ADC.h **** 
 721:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_COMP_PWR_INIT  \
 722:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_COMP_PWR \
 723:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_COMP_PWR_Pos)
 724:Generated_Source\PSoC6/ADC.h **** 
 725:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_COMP_DLY_INIT  \
 726:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_COMP_DLY \
 727:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_COMP_DLY_Pos)
 728:Generated_Source\PSoC6/ADC.h **** 
 729:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_CTRL_INIT  \
 730:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_VREF_POWER_INIT \
 731:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_VREF_SEL_MASK \
 732:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_SE_NEG_INPUT_INIT \
 733:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_HW_CTRL_NEGVREF_INIT \
 734:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_COMP_DLY_INIT \
 735:Generated_Source\PSoC6/ADC.h ****             | SAR_CTRL_REFBUF_EN_Msk \
 736:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_COMP_PWR_INIT \
 737:Generated_Source\PSoC6/ADC.h ****             | SAR_CTRL_DSI_SYNC_CONFIG_Msk  \
 738:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_SWITCH_CONF_INIT )
 739:Generated_Source\PSoC6/ADC.h **** 
 740:Generated_Source\PSoC6/ADC.h **** 
 741:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SAMPLE_CTRL_INIT \
 742:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_SE_RESULT_FORMAT_INIT \
 743:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_DIFF_RESULT_FORMAT_INIT \
 744:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_AVG_SAMPLES_NUM_INIT \
 745:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_AVG_MODE_INIT \
 746:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_DSI_TRIGGER_LEVEL_INIT \
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 107


 747:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_DSI_TRIGGER_EN_INIT \
 748:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_UAB_SCAN_MODE_INIT \
 749:Generated_Source\PSoC6/ADC.h ****             | SAR_SAMPLE_CTRL_VALID_IGNORE_Msk \
 750:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_TRIGGER_OUT_INIT \
 751:Generated_Source\PSoC6/ADC.h ****             | SAR_SAMPLE_CTRL_EOS_DSI_OUT_EN_Msk \
 752:Generated_Source\PSoC6/ADC.h ****     )
 753:Generated_Source\PSoC6/ADC.h **** 
 754:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_RANGE_THRES_INIT \
 755:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_LOW_LIMIT \
 756:Generated_Source\PSoC6/ADC.h ****             | (uint32)((uint32)ADC_CFG2_HIGH_LIMIT \
 757:Generated_Source\PSoC6/ADC.h ****             << SAR_RANGE_THRES_RANGE_HIGH_Pos))
 758:Generated_Source\PSoC6/ADC.h **** 
 759:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_RANGE_COND_INIT   (cy_en_sar_range_detect_condition_t)ADC_CFG2_RANGE_COND
 760:Generated_Source\PSoC6/ADC.h **** 
 761:Generated_Source\PSoC6/ADC.h ****     /* Misc Config
 762:Generated_Source\PSoC6/ADC.h ****         [0] - Freerunning: Set if the sample mode is freerunning
 763:Generated_Source\PSoC6/ADC.h ****     */
 764:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_MISC_CONFIG_INIT \
 765:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_FREERUNNING)
 766:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_TOTAL_CONFIGS > 2 */
 767:Generated_Source\PSoC6/ADC.h **** 
 768:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 769:Generated_Source\PSoC6/ADC.h **** /* End configuration 2 calculated defines                                     */
 770:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 771:Generated_Source\PSoC6/ADC.h **** 
 772:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 773:Generated_Source\PSoC6/ADC.h **** /* Begin configuration 3 calculated defines                                   */
 774:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 775:Generated_Source\PSoC6/ADC.h **** #if(ADC_TOTAL_CONFIGS > 3)
 776:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SAMPLE_TIME01_INIT \
 777:Generated_Source\PSoC6/ADC.h ****             ((ADC_CFG3_APERTURE_TIME0 \
 778:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos) \
 779:Generated_Source\PSoC6/ADC.h ****             | (ADC_CFG3_APERTURE_TIME1 \
 780:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME1_Pos))
 781:Generated_Source\PSoC6/ADC.h **** 
 782:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SAMPLE_TIME23_INIT \
 783:Generated_Source\PSoC6/ADC.h ****             ((ADC_CFG3_APERTURE_TIME2 \
 784:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME2_Pos) \
 785:Generated_Source\PSoC6/ADC.h ****             | (ADC_CFG3_APERTURE_TIME3 \
 786:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME3_Pos))
 787:Generated_Source\PSoC6/ADC.h **** 
 788:Generated_Source\PSoC6/ADC.h ****     /* Enable soc pin if used */
 789:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_DSI_TRIGGER_EN_INIT \
 790:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_USE_SOC \
 791:Generated_Source\PSoC6/ADC.h ****              << SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Pos)
 792:Generated_Source\PSoC6/ADC.h **** 
 793:Generated_Source\PSoC6/ADC.h ****     /* Set soc operation to edge or level based on sample mode */
 794:Generated_Source\PSoC6/ADC.h ****     #if(ADC_CFG3_FREERUNNING == ADC_FREERUNNING)
 795:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG3_DSI_TRIGGER_LEVEL_INIT    (SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk)
 796:Generated_Source\PSoC6/ADC.h ****     #else /* Edge trigger */
 797:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG3_DSI_TRIGGER_LEVEL_INIT    (0u)
 798:Generated_Source\PSoC6/ADC.h ****     #endif /* End ADC_CFG3_FREERUNNING == ADC_FREERUNNING */
 799:Generated_Source\PSoC6/ADC.h **** 
 800:Generated_Source\PSoC6/ADC.h ****     /* Set SE_NEG_INPUT  */
 801:Generated_Source\PSoC6/ADC.h ****     #if(ADC_CFG3_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN)
 802:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG3_SE_NEG_INPUT_INIT \
 803:Generated_Source\PSoC6/ADC.h ****             ((uint32)(ADC_NEG_SEL_VSSA_KELVIN \
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 108


 804:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_NEG_SEL_Pos ))
 805:Generated_Source\PSoC6/ADC.h ****     #elif(ADC_CFG3_VNEG_INPUT_SEL == ADC_NEG_SEL_VREF)
 806:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG3_SE_NEG_INPUT_INIT     (ADC_NEG_SEL_VREF \
 807:Generated_Source\PSoC6/ADC.h ****                                                                 << SAR_CTRL_NEG_SEL_Pos )
 808:Generated_Source\PSoC6/ADC.h ****     #elif (ADC_CFG3_SINGLE_PRESENT != 0u)
 809:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG3_SE_NEG_INPUT_INIT         ADC_CFG3_NEG_OTHER
 810:Generated_Source\PSoC6/ADC.h ****     #else
 811:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG3_SE_NEG_INPUT_INIT         0u
 812:Generated_Source\PSoC6/ADC.h ****     #endif /* ADC_CFG3_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN */
 813:Generated_Source\PSoC6/ADC.h **** 
 814:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_NEG_OTHER                 (uint16)((uint16)ADC_SARMUX__VNEG3 << SAR_CTRL_NEG_S
 815:Generated_Source\PSoC6/ADC.h **** 
 816:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SWITCH_CONF_INIT          0u
 817:Generated_Source\PSoC6/ADC.h **** 
 818:Generated_Source\PSoC6/ADC.h ****     /* If the SAR is configured for multiple channels, always set SAR_HW_CTRL_NEGVREF to 1 */
 819:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_HW_CTRL_NEGVREF_INIT      SAR_CTRL_SAR_HW_CTRL_NEGVREF_Msk
 820:Generated_Source\PSoC6/ADC.h **** 
 821:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_POWER_INIT  (ADC_PWR_CTRL_VREF_NORMAL_PWR)
 822:Generated_Source\PSoC6/ADC.h **** 
 823:Generated_Source\PSoC6/ADC.h ****     /* SAMPLE_CTRL initial values */
 824:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SE_RESULT_FORMAT_INIT \
 825:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_SINGLE_ENDED_FORMAT \
 826:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos)
 827:Generated_Source\PSoC6/ADC.h **** 
 828:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_DIFF_RESULT_FORMAT_INIT \
 829:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_DIFFERENTIAL_FORMAT \
 830:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos)
 831:Generated_Source\PSoC6/ADC.h **** 
 832:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_AVG_SAMPLES_NUM_INIT \
 833:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_SAMPLES_AVERAGED \
 834:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_AVG_CNT_Pos)
 835:Generated_Source\PSoC6/ADC.h **** 
 836:Generated_Source\PSoC6/ADC.h ****     /* Combination of Average Mode and Average Shift */
 837:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_AVG_MODE_INIT \
 838:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_AVGERAGING_MODE \
 839:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_AVG_SHIFT_Pos)
 840:Generated_Source\PSoC6/ADC.h **** 
 841:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_TRIGGER_OUT_INIT      (0u)
 842:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_UAB_SCAN_MODE_INIT    (0u)
 843:Generated_Source\PSoC6/ADC.h **** 
 844:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_VREF_POWER_INIT  \
 845:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_VREF_PWR \
 846:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_PWR_CTRL_VREF_Pos)
 847:Generated_Source\PSoC6/ADC.h **** 
 848:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_COMP_PWR_INIT  \
 849:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_COMP_PWR \
 850:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_COMP_PWR_Pos)
 851:Generated_Source\PSoC6/ADC.h **** 
 852:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_COMP_DLY_INIT  \
 853:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_COMP_DLY \
 854:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_COMP_DLY_Pos)
 855:Generated_Source\PSoC6/ADC.h **** 
 856:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_CTRL_INIT  \
 857:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_VREF_POWER_INIT \
 858:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_VREF_SEL_MASK \
 859:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_SE_NEG_INPUT_INIT \
 860:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_HW_CTRL_NEGVREF_INIT \
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 109


 861:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_COMP_DLY_INIT \
 862:Generated_Source\PSoC6/ADC.h ****             | SAR_CTRL_REFBUF_EN_Msk \
 863:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_COMP_PWR_INIT \
 864:Generated_Source\PSoC6/ADC.h ****             | SAR_CTRL_DSI_SYNC_CONFIG_Msk  \
 865:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_SWITCH_CONF_INIT )
 866:Generated_Source\PSoC6/ADC.h **** 
 867:Generated_Source\PSoC6/ADC.h **** 
 868:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SAMPLE_CTRL_INIT \
 869:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_SE_RESULT_FORMAT_INIT \
 870:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_DIFF_RESULT_FORMAT_INIT \
 871:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_AVG_SAMPLES_NUM_INIT \
 872:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_AVG_MODE_INIT \
 873:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_DSI_TRIGGER_LEVEL_INIT \
 874:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_DSI_TRIGGER_EN_INIT \
 875:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_UAB_SCAN_MODE_INIT \
 876:Generated_Source\PSoC6/ADC.h ****             | SAR_SAMPLE_CTRL_VALID_IGNORE_Msk \
 877:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_TRIGGER_OUT_INIT \
 878:Generated_Source\PSoC6/ADC.h ****             | SAR_SAMPLE_CTRL_EOS_DSI_OUT_EN_Msk \
 879:Generated_Source\PSoC6/ADC.h ****     )
 880:Generated_Source\PSoC6/ADC.h **** 
 881:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_RANGE_THRES_INIT \
 882:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_LOW_LIMIT \
 883:Generated_Source\PSoC6/ADC.h ****             | (uint32)((uint32)ADC_CFG3_HIGH_LIMIT \
 884:Generated_Source\PSoC6/ADC.h ****             << SAR_RANGE_THRES_RANGE_HIGH_Pos))
 885:Generated_Source\PSoC6/ADC.h **** 
 886:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_RANGE_COND_INIT   (cy_en_sar_range_detect_condition_t)ADC_CFG3_RANGE_COND
 887:Generated_Source\PSoC6/ADC.h **** 
 888:Generated_Source\PSoC6/ADC.h ****     /* Misc Config
 889:Generated_Source\PSoC6/ADC.h ****         [0] - Freerunning: Set if the sample mode is freerunning
 890:Generated_Source\PSoC6/ADC.h ****     */
 891:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_MISC_CONFIG_INIT \
 892:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_FREERUNNING )
 893:Generated_Source\PSoC6/ADC.h **** 
 894:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_TOTAL_CONFIGS > 3 */
 895:Generated_Source\PSoC6/ADC.h **** 
 896:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 897:Generated_Source\PSoC6/ADC.h **** /* End configuration 3 calculated defines                                     */
 898:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 899:Generated_Source\PSoC6/ADC.h **** 
 900:Generated_Source\PSoC6/ADC.h **** /******************************************************************************
 901:Generated_Source\PSoC6/ADC.h **** * Function Name: ADC_Enable
 902:Generated_Source\PSoC6/ADC.h **** ****************************************************************************//*
 903:Generated_Source\PSoC6/ADC.h **** *
 904:Generated_Source\PSoC6/ADC.h **** * \brief Enables the component.
 905:Generated_Source\PSoC6/ADC.h **** *
 906:Generated_Source\PSoC6/ADC.h **** * \param None
 907:Generated_Source\PSoC6/ADC.h **** *
 908:Generated_Source\PSoC6/ADC.h **** * \return None
 909:Generated_Source\PSoC6/ADC.h **** *
 910:Generated_Source\PSoC6/ADC.h **** * \sideeffect
 911:Generated_Source\PSoC6/ADC.h **** *  None
 912:Generated_Source\PSoC6/ADC.h **** *
 913:Generated_Source\PSoC6/ADC.h **** *******************************************************************************/
 914:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_Enable(void)
 915:Generated_Source\PSoC6/ADC.h **** {
 916:Generated_Source\PSoC6/ADC.h ****     Cy_SAR_Enable(ADC_SAR__HW);
 552              		.loc 4 916 0
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 110


 553 0018 0248     		ldr	r0, .L39+4
 554 001a FFF7FEFF 		bl	Cy_SAR_Enable
 555              	.LVL40:
 556              	.LBE64:
 557              	.LBE63:
  76:Generated_Source\PSoC6/ADC.c **** 
 558              		.loc 1 76 0
 559              		@ sp needed
 560 001e 10BD     		pop	{r4, pc}
 561              	.L40:
 562              		.align	2
 563              	.L39:
 564 0020 00000000 		.word	.LANCHOR0
 565 0024 00001D41 		.word	1092419584
 566              		.cfi_endproc
 567              	.LFE186:
 568              		.size	ADC_Start, .-ADC_Start
 569              		.section	.text.ADC_StartEx,"ax",%progbits
 570              		.align	2
 571              		.global	ADC_StartEx
 572              		.code	16
 573              		.thumb_func
 574              		.type	ADC_StartEx, %function
 575              	ADC_StartEx:
 576              	.LFB187:
  95:Generated_Source\PSoC6/ADC.c ****     ADC_Start();
 577              		.loc 1 95 0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 0
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 581              	.LVL41:
 582 0000 10B5     		push	{r4, lr}
 583              		.cfi_def_cfa_offset 8
 584              		.cfi_offset 4, -8
 585              		.cfi_offset 14, -4
  96:Generated_Source\PSoC6/ADC.c **** 
 586              		.loc 1 96 0
 587 0002 FFF7FEFF 		bl	ADC_Start
 588              	.LVL42:
 113:Generated_Source\PSoC6/ADC.c **** 
 589              		.loc 1 113 0
 590              		@ sp needed
 591 0006 10BD     		pop	{r4, pc}
 592              		.cfi_endproc
 593              	.LFE187:
 594              		.size	ADC_StartEx, .-ADC_StartEx
 595              		.section	.text.ADC_SelectConfig,"ax",%progbits
 596              		.align	2
 597              		.global	ADC_SelectConfig
 598              		.code	16
 599              		.thumb_func
 600              		.type	ADC_SelectConfig, %function
 601              	ADC_SelectConfig:
 602              	.LFB189:
 171:Generated_Source\PSoC6/ADC.c ****     /* Check whether the configuration number is valid or not */
 603              		.loc 1 171 0
 604              		.cfi_startproc
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 111


 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 607              	.LVL43:
 608 0000 70B5     		push	{r4, r5, r6, lr}
 609              		.cfi_def_cfa_offset 16
 610              		.cfi_offset 4, -16
 611              		.cfi_offset 5, -12
 612              		.cfi_offset 6, -8
 613              		.cfi_offset 14, -4
 614 0002 0400     		movs	r4, r0
 615 0004 0D00     		movs	r5, r1
 173:Generated_Source\PSoC6/ADC.c ****     {
 616              		.loc 1 173 0
 617 0006 0028     		cmp	r0, #0
 618 0008 20D1     		bne	.L42
 619              	.LVL44:
 620              	.LBB65:
 621              	.LBB66:
 622              	.LBB67:
1440:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
 623              		.loc 3 1440 0
 624 000a 114A     		ldr	r2, .L45
 625 000c 1368     		ldr	r3, [r2]
 626 000e 5B00     		lsls	r3, r3, #1
 627 0010 5B08     		lsrs	r3, r3, #1
 628 0012 1360     		str	r3, [r2]
 629              	.LVL45:
 630              	.LBE67:
 631              	.LBE66:
 632              	.LBE65:
 177:Generated_Source\PSoC6/ADC.c **** 
 633              		.loc 1 177 0
 634 0014 0F4B     		ldr	r3, .L45+4
 635 0016 0122     		movs	r2, #1
 636 0018 5A71     		strb	r2, [r3, #5]
 179:Generated_Source\PSoC6/ADC.c ****         {
 637              		.loc 1 179 0
 638 001a 1B79     		ldrb	r3, [r3, #4]
 639 001c 002B     		cmp	r3, #0
 640 001e 06D1     		bne	.L44
 181:Generated_Source\PSoC6/ADC.c ****             ADC_initVar |= ADC_INIT_VAR_INIT_FLAG;
 641              		.loc 1 181 0
 642 0020 FFF7FEFF 		bl	ADC_Init
 643              	.LVL46:
 182:Generated_Source\PSoC6/ADC.c ****         }
 644              		.loc 1 182 0
 645 0024 0B4A     		ldr	r2, .L45+4
 646 0026 1179     		ldrb	r1, [r2, #4]
 647 0028 0123     		movs	r3, #1
 648 002a 0B43     		orrs	r3, r1
 649 002c 1371     		strb	r3, [r2, #4]
 650              	.L44:
 188:Generated_Source\PSoC6/ADC.c **** 
 651              		.loc 1 188 0
 652 002e A300     		lsls	r3, r4, #2
 653 0030 1B19     		adds	r3, r3, r4
 654 0032 9800     		lsls	r0, r3, #2
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 112


 655 0034 084B     		ldr	r3, .L45+8
 656 0036 C018     		adds	r0, r0, r3
 657 0038 FFF7FEFF 		bl	ADC_InitConfig
 658              	.LVL47:
 194:Generated_Source\PSoC6/ADC.c **** 
 659              		.loc 1 194 0
 660 003c 054B     		ldr	r3, .L45+4
 661 003e 1C60     		str	r4, [r3]
 196:Generated_Source\PSoC6/ADC.c ****         {
 662              		.loc 1 196 0
 663 0040 012D     		cmp	r5, #1
 664 0042 03D1     		bne	.L42
 199:Generated_Source\PSoC6/ADC.c **** 
 665              		.loc 1 199 0
 666 0044 FFF7FEFF 		bl	ADC_Start
 667              	.LVL48:
 202:Generated_Source\PSoC6/ADC.c ****         }
 668              		.loc 1 202 0
 669 0048 FFF7FEFF 		bl	ADC_StartConvert
 670              	.LVL49:
 671              	.L42:
 206:Generated_Source\PSoC6/ADC.c **** 
 672              		.loc 1 206 0
 673              		@ sp needed
 674              	.LVL50:
 675              	.LVL51:
 676 004c 70BD     		pop	{r4, r5, r6, pc}
 677              	.L46:
 678 004e C046     		.align	2
 679              	.L45:
 680 0050 00001D41 		.word	1092419584
 681 0054 00000000 		.word	.LANCHOR0
 682 0058 00000000 		.word	ADC_allConfigs
 683              		.cfi_endproc
 684              	.LFE189:
 685              		.size	ADC_SelectConfig, .-ADC_SelectConfig
 686              		.global	ADC_currentConfig
 687              		.global	ADC_selected
 688              		.global	ADC_initVar
 689              		.section	.rodata.str1.4,"aMS",%progbits,1
 690              		.align	2
 691              	.LC1:
 692 0000 47656E65 		.ascii	"Generated_Source\\PSoC6\\pdl\\drivers/peripheral/sa"
 692      72617465 
 692      645F536F 
 692      75726365 
 692      5C50536F 
 693 0030 722F6379 		.ascii	"r/cy_sar.h\000"
 693      5F736172 
 693      2E6800
 694              		.bss
 695              		.align	2
 696              		.set	.LANCHOR0,. + 0
 697              		.type	ADC_currentConfig, %object
 698              		.size	ADC_currentConfig, 4
 699              	ADC_currentConfig:
 700 0000 00000000 		.space	4
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 113


 701              		.type	ADC_initVar, %object
 702              		.size	ADC_initVar, 1
 703              	ADC_initVar:
 704 0004 00       		.space	1
 705              		.type	ADC_selected, %object
 706              		.size	ADC_selected, 1
 707              	ADC_selected:
 708 0005 00       		.space	1
 709              		.text
 710              	.Letext0:
 711              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\4.4\\psoc creator\\import\\gnu\\arm\
 712              		.file 6 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\4.4\\psoc creator\\import\\gnu\\arm\
 713              		.file 7 "Generated_Source\\PSoC6\\pdl\\devices/psoc6/include/ip/cyip_peri.h"
 714              		.file 8 "Generated_Source\\PSoC6\\pdl\\devices/psoc6/include/ip/cyip_sar.h"
 715              		.file 9 "Generated_Source\\PSoC6\\pdl\\devices/psoc6/include/psoc6_01_config.h"
 716              		.file 10 "Generated_Source\\PSoC6\\pdl\\drivers/peripheral/device/cy_device.h"
 717              		.file 11 "Generated_Source\\PSoC6\\pdl\\drivers/peripheral/syslib/cy_syslib.h"
 718              		.file 12 "Generated_Source\\PSoC6\\ADC_intSarClock.h"
 719              		.section	.debug_info,"",%progbits
 720              	.Ldebug_info0:
 721 0000 75160000 		.4byte	0x1675
 722 0004 0400     		.2byte	0x4
 723 0006 00000000 		.4byte	.Ldebug_abbrev0
 724 000a 04       		.byte	0x4
 725 000b 01       		.uleb128 0x1
 726 000c E2080000 		.4byte	.LASF302
 727 0010 0C       		.byte	0xc
 728 0011 460E0000 		.4byte	.LASF303
 729 0015 6C0D0000 		.4byte	.LASF304
 730 0019 00000000 		.4byte	.Ldebug_ranges0+0
 731 001d 00000000 		.4byte	0
 732 0021 00000000 		.4byte	.Ldebug_line0
 733 0025 02       		.uleb128 0x2
 734 0026 02       		.byte	0x2
 735 0027 05       		.byte	0x5
 736 0028 49020000 		.4byte	.LASF0
 737 002c 02       		.uleb128 0x2
 738 002d 01       		.byte	0x1
 739 002e 08       		.byte	0x8
 740 002f 240C0000 		.4byte	.LASF1
 741 0033 02       		.uleb128 0x2
 742 0034 01       		.byte	0x1
 743 0035 06       		.byte	0x6
 744 0036 03110000 		.4byte	.LASF2
 745 003a 03       		.uleb128 0x3
 746 003b 780E0000 		.4byte	.LASF3
 747 003f 05       		.byte	0x5
 748 0040 1D       		.byte	0x1d
 749 0041 2C000000 		.4byte	0x2c
 750 0045 03       		.uleb128 0x3
 751 0046 96090000 		.4byte	.LASF4
 752 004a 05       		.byte	0x5
 753 004b 29       		.byte	0x29
 754 004c 25000000 		.4byte	0x25
 755 0050 03       		.uleb128 0x3
 756 0051 C5040000 		.4byte	.LASF5
 757 0055 05       		.byte	0x5
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 114


 758 0056 2B       		.byte	0x2b
 759 0057 5B000000 		.4byte	0x5b
 760 005b 02       		.uleb128 0x2
 761 005c 02       		.byte	0x2
 762 005d 07       		.byte	0x7
 763 005e 9E050000 		.4byte	.LASF6
 764 0062 02       		.uleb128 0x2
 765 0063 04       		.byte	0x4
 766 0064 05       		.byte	0x5
 767 0065 340D0000 		.4byte	.LASF7
 768 0069 03       		.uleb128 0x3
 769 006a C30F0000 		.4byte	.LASF8
 770 006e 05       		.byte	0x5
 771 006f 41       		.byte	0x41
 772 0070 74000000 		.4byte	0x74
 773 0074 02       		.uleb128 0x2
 774 0075 04       		.byte	0x4
 775 0076 07       		.byte	0x7
 776 0077 FD0E0000 		.4byte	.LASF9
 777 007b 02       		.uleb128 0x2
 778 007c 08       		.byte	0x8
 779 007d 05       		.byte	0x5
 780 007e 57080000 		.4byte	.LASF10
 781 0082 02       		.uleb128 0x2
 782 0083 08       		.byte	0x8
 783 0084 07       		.byte	0x7
 784 0085 4C040000 		.4byte	.LASF11
 785 0089 04       		.uleb128 0x4
 786 008a 04       		.byte	0x4
 787 008b 05       		.byte	0x5
 788 008c 696E7400 		.ascii	"int\000"
 789 0090 02       		.uleb128 0x2
 790 0091 04       		.byte	0x4
 791 0092 07       		.byte	0x7
 792 0093 25010000 		.4byte	.LASF12
 793 0097 03       		.uleb128 0x3
 794 0098 D0070000 		.4byte	.LASF13
 795 009c 06       		.byte	0x6
 796 009d 18       		.byte	0x18
 797 009e 3A000000 		.4byte	0x3a
 798 00a2 03       		.uleb128 0x3
 799 00a3 2A040000 		.4byte	.LASF14
 800 00a7 06       		.byte	0x6
 801 00a8 20       		.byte	0x20
 802 00a9 45000000 		.4byte	0x45
 803 00ad 03       		.uleb128 0x3
 804 00ae 7F0B0000 		.4byte	.LASF15
 805 00b2 06       		.byte	0x6
 806 00b3 24       		.byte	0x24
 807 00b4 50000000 		.4byte	0x50
 808 00b8 03       		.uleb128 0x3
 809 00b9 A4030000 		.4byte	.LASF16
 810 00bd 06       		.byte	0x6
 811 00be 30       		.byte	0x30
 812 00bf 69000000 		.4byte	0x69
 813 00c3 02       		.uleb128 0x2
 814 00c4 04       		.byte	0x4
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 115


 815 00c5 07       		.byte	0x7
 816 00c6 570C0000 		.4byte	.LASF17
 817 00ca 05       		.uleb128 0x5
 818 00cb B8000000 		.4byte	0xb8
 819 00cf 06       		.uleb128 0x6
 820 00d0 CA000000 		.4byte	0xca
 821 00d4 07       		.uleb128 0x7
 822 00d5 CF000000 		.4byte	0xcf
 823 00d9 E4000000 		.4byte	0xe4
 824 00dd 08       		.uleb128 0x8
 825 00de C3000000 		.4byte	0xc3
 826 00e2 01       		.byte	0x1
 827 00e3 00       		.byte	0
 828 00e4 07       		.uleb128 0x7
 829 00e5 CA000000 		.4byte	0xca
 830 00e9 F4000000 		.4byte	0xf4
 831 00ed 08       		.uleb128 0x8
 832 00ee C3000000 		.4byte	0xc3
 833 00f2 7F       		.byte	0x7f
 834 00f3 00       		.byte	0
 835 00f4 07       		.uleb128 0x7
 836 00f5 CA000000 		.4byte	0xca
 837 00f9 04010000 		.4byte	0x104
 838 00fd 08       		.uleb128 0x8
 839 00fe C3000000 		.4byte	0xc3
 840 0102 0F       		.byte	0xf
 841 0103 00       		.byte	0
 842 0104 07       		.uleb128 0x7
 843 0105 CF000000 		.4byte	0xcf
 844 0109 14010000 		.4byte	0x114
 845 010d 08       		.uleb128 0x8
 846 010e C3000000 		.4byte	0xc3
 847 0112 06       		.byte	0x6
 848 0113 00       		.byte	0
 849 0114 09       		.uleb128 0x9
 850 0115 40       		.byte	0x40
 851 0116 07       		.byte	0x7
 852 0117 27       		.byte	0x27
 853 0118 59010000 		.4byte	0x159
 854 011c 0A       		.uleb128 0xa
 855 011d 73060000 		.4byte	.LASF18
 856 0121 07       		.byte	0x7
 857 0122 28       		.byte	0x28
 858 0123 CA000000 		.4byte	0xca
 859 0127 00       		.byte	0
 860 0128 0A       		.uleb128 0xa
 861 0129 27000000 		.4byte	.LASF19
 862 012d 07       		.byte	0x7
 863 012e 29       		.byte	0x29
 864 012f 5E010000 		.4byte	0x15e
 865 0133 04       		.byte	0x4
 866 0134 0A       		.uleb128 0xa
 867 0135 18040000 		.4byte	.LASF20
 868 0139 07       		.byte	0x7
 869 013a 2A       		.byte	0x2a
 870 013b CA000000 		.4byte	0xca
 871 013f 20       		.byte	0x20
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 116


 872 0140 0A       		.uleb128 0xa
 873 0141 5F120000 		.4byte	.LASF21
 874 0145 07       		.byte	0x7
 875 0146 2B       		.byte	0x2b
 876 0147 CA000000 		.4byte	0xca
 877 014b 24       		.byte	0x24
 878 014c 0A       		.uleb128 0xa
 879 014d CA110000 		.4byte	.LASF22
 880 0151 07       		.byte	0x7
 881 0152 2C       		.byte	0x2c
 882 0153 78010000 		.4byte	0x178
 883 0157 28       		.byte	0x28
 884 0158 00       		.byte	0
 885 0159 05       		.uleb128 0x5
 886 015a 04010000 		.4byte	0x104
 887 015e 06       		.uleb128 0x6
 888 015f 59010000 		.4byte	0x159
 889 0163 07       		.uleb128 0x7
 890 0164 CF000000 		.4byte	0xcf
 891 0168 73010000 		.4byte	0x173
 892 016c 08       		.uleb128 0x8
 893 016d C3000000 		.4byte	0xc3
 894 0171 05       		.byte	0x5
 895 0172 00       		.byte	0
 896 0173 05       		.uleb128 0x5
 897 0174 63010000 		.4byte	0x163
 898 0178 06       		.uleb128 0x6
 899 0179 73010000 		.4byte	0x173
 900 017d 03       		.uleb128 0x3
 901 017e EA110000 		.4byte	.LASF23
 902 0182 07       		.byte	0x7
 903 0183 2D       		.byte	0x2d
 904 0184 14010000 		.4byte	0x114
 905 0188 0B       		.uleb128 0xb
 906 0189 0002     		.2byte	0x200
 907 018b 07       		.byte	0x7
 908 018c 32       		.byte	0x32
 909 018d 9E010000 		.4byte	0x19e
 910 0191 0A       		.uleb128 0xa
 911 0192 02070000 		.4byte	.LASF24
 912 0196 07       		.byte	0x7
 913 0197 33       		.byte	0x33
 914 0198 9E010000 		.4byte	0x19e
 915 019c 00       		.byte	0
 916 019d 00       		.byte	0
 917 019e 05       		.uleb128 0x5
 918 019f E4000000 		.4byte	0xe4
 919 01a3 03       		.uleb128 0x3
 920 01a4 14000000 		.4byte	.LASF25
 921 01a8 07       		.byte	0x7
 922 01a9 34       		.byte	0x34
 923 01aa 88010000 		.4byte	0x188
 924 01ae 09       		.uleb128 0x9
 925 01af 40       		.byte	0x40
 926 01b0 07       		.byte	0x7
 927 01b1 39       		.byte	0x39
 928 01b2 FF010000 		.4byte	0x1ff
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 117


 929 01b6 0A       		.uleb128 0xa
 930 01b7 83110000 		.4byte	.LASF26
 931 01bb 07       		.byte	0x7
 932 01bc 3A       		.byte	0x3a
 933 01bd CA000000 		.4byte	0xca
 934 01c1 00       		.byte	0
 935 01c2 0A       		.uleb128 0xa
 936 01c3 C0110000 		.4byte	.LASF27
 937 01c7 07       		.byte	0x7
 938 01c8 3B       		.byte	0x3b
 939 01c9 CA000000 		.4byte	0xca
 940 01cd 04       		.byte	0x4
 941 01ce 0A       		.uleb128 0xa
 942 01cf 27000000 		.4byte	.LASF19
 943 01d3 07       		.byte	0x7
 944 01d4 3C       		.byte	0x3c
 945 01d5 04020000 		.4byte	0x204
 946 01d9 08       		.byte	0x8
 947 01da 0A       		.uleb128 0xa
 948 01db 89110000 		.4byte	.LASF28
 949 01df 07       		.byte	0x7
 950 01e0 3D       		.byte	0x3d
 951 01e1 CF000000 		.4byte	0xcf
 952 01e5 20       		.byte	0x20
 953 01e6 0A       		.uleb128 0xa
 954 01e7 C5110000 		.4byte	.LASF29
 955 01eb 07       		.byte	0x7
 956 01ec 3E       		.byte	0x3e
 957 01ed CA000000 		.4byte	0xca
 958 01f1 24       		.byte	0x24
 959 01f2 0A       		.uleb128 0xa
 960 01f3 CA110000 		.4byte	.LASF22
 961 01f7 07       		.byte	0x7
 962 01f8 3F       		.byte	0x3f
 963 01f9 0E020000 		.4byte	0x20e
 964 01fd 28       		.byte	0x28
 965 01fe 00       		.byte	0
 966 01ff 05       		.uleb128 0x5
 967 0200 63010000 		.4byte	0x163
 968 0204 06       		.uleb128 0x6
 969 0205 FF010000 		.4byte	0x1ff
 970 0209 05       		.uleb128 0x5
 971 020a 63010000 		.4byte	0x163
 972 020e 06       		.uleb128 0x6
 973 020f 09020000 		.4byte	0x209
 974 0213 03       		.uleb128 0x3
 975 0214 84030000 		.4byte	.LASF30
 976 0218 07       		.byte	0x7
 977 0219 40       		.byte	0x40
 978 021a AE010000 		.4byte	0x1ae
 979 021e 09       		.uleb128 0x9
 980 021f 40       		.byte	0x40
 981 0220 07       		.byte	0x7
 982 0221 45       		.byte	0x45
 983 0222 6F020000 		.4byte	0x26f
 984 0226 0A       		.uleb128 0xa
 985 0227 83110000 		.4byte	.LASF26
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 118


 986 022b 07       		.byte	0x7
 987 022c 46       		.byte	0x46
 988 022d CF000000 		.4byte	0xcf
 989 0231 00       		.byte	0
 990 0232 0A       		.uleb128 0xa
 991 0233 C0110000 		.4byte	.LASF27
 992 0237 07       		.byte	0x7
 993 0238 47       		.byte	0x47
 994 0239 CA000000 		.4byte	0xca
 995 023d 04       		.byte	0x4
 996 023e 0A       		.uleb128 0xa
 997 023f 27000000 		.4byte	.LASF19
 998 0243 07       		.byte	0x7
 999 0244 48       		.byte	0x48
 1000 0245 74020000 		.4byte	0x274
 1001 0249 08       		.byte	0x8
 1002 024a 0A       		.uleb128 0xa
 1003 024b 89110000 		.4byte	.LASF28
 1004 024f 07       		.byte	0x7
 1005 0250 49       		.byte	0x49
 1006 0251 CF000000 		.4byte	0xcf
 1007 0255 20       		.byte	0x20
 1008 0256 0A       		.uleb128 0xa
 1009 0257 C5110000 		.4byte	.LASF29
 1010 025b 07       		.byte	0x7
 1011 025c 4A       		.byte	0x4a
 1012 025d CA000000 		.4byte	0xca
 1013 0261 24       		.byte	0x24
 1014 0262 0A       		.uleb128 0xa
 1015 0263 CA110000 		.4byte	.LASF22
 1016 0267 07       		.byte	0x7
 1017 0268 4B       		.byte	0x4b
 1018 0269 7E020000 		.4byte	0x27e
 1019 026d 28       		.byte	0x28
 1020 026e 00       		.byte	0
 1021 026f 05       		.uleb128 0x5
 1022 0270 63010000 		.4byte	0x163
 1023 0274 06       		.uleb128 0x6
 1024 0275 6F020000 		.4byte	0x26f
 1025 0279 05       		.uleb128 0x5
 1026 027a 63010000 		.4byte	0x163
 1027 027e 06       		.uleb128 0x6
 1028 027f 79020000 		.4byte	0x279
 1029 0283 03       		.uleb128 0x3
 1030 0284 8B120000 		.4byte	.LASF31
 1031 0288 07       		.byte	0x7
 1032 0289 4C       		.byte	0x4c
 1033 028a 1E020000 		.4byte	0x21e
 1034 028e 0B       		.uleb128 0xb
 1035 028f 0054     		.2byte	0x5400
 1036 0291 07       		.byte	0x7
 1037 0292 69       		.byte	0x69
 1038 0293 66030000 		.4byte	0x366
 1039 0297 0C       		.uleb128 0xc
 1040 0298 475200   		.ascii	"GR\000"
 1041 029b 07       		.byte	0x7
 1042 029c 6A       		.byte	0x6a
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 119


 1043 029d 66030000 		.4byte	0x366
 1044 02a1 00       		.byte	0
 1045 02a2 0D       		.uleb128 0xd
 1046 02a3 560D0000 		.4byte	.LASF32
 1047 02a7 07       		.byte	0x7
 1048 02a8 6B       		.byte	0x6b
 1049 02a9 CA000000 		.4byte	0xca
 1050 02ad 0004     		.2byte	0x400
 1051 02af 0D       		.uleb128 0xd
 1052 02b0 27000000 		.4byte	.LASF19
 1053 02b4 07       		.byte	0x7
 1054 02b5 6C       		.byte	0x6c
 1055 02b6 8B030000 		.4byte	0x38b
 1056 02ba 0404     		.2byte	0x404
 1057 02bc 0D       		.uleb128 0xd
 1058 02bd B9000000 		.4byte	.LASF33
 1059 02c1 07       		.byte	0x7
 1060 02c2 6D       		.byte	0x6d
 1061 02c3 A0030000 		.4byte	0x3a0
 1062 02c7 0008     		.2byte	0x800
 1063 02c9 0D       		.uleb128 0xd
 1064 02ca 68060000 		.4byte	.LASF34
 1065 02ce 07       		.byte	0x7
 1066 02cf 6E       		.byte	0x6e
 1067 02d0 A5030000 		.4byte	0x3a5
 1068 02d4 0009     		.2byte	0x900
 1069 02d6 0D       		.uleb128 0xd
 1070 02d7 E7010000 		.4byte	.LASF35
 1071 02db 07       		.byte	0x7
 1072 02dc 6F       		.byte	0x6f
 1073 02dd AA030000 		.4byte	0x3aa
 1074 02e1 000A     		.2byte	0xa00
 1075 02e3 0D       		.uleb128 0xd
 1076 02e4 02060000 		.4byte	.LASF36
 1077 02e8 07       		.byte	0x7
 1078 02e9 70       		.byte	0x70
 1079 02ea BF030000 		.4byte	0x3bf
 1080 02ee 000B     		.2byte	0xb00
 1081 02f0 0D       		.uleb128 0xd
 1082 02f1 CA110000 		.4byte	.LASF22
 1083 02f5 07       		.byte	0x7
 1084 02f6 71       		.byte	0x71
 1085 02f7 CF000000 		.4byte	0xcf
 1086 02fb FC0B     		.2byte	0xbfc
 1087 02fd 0D       		.uleb128 0xd
 1088 02fe 73060000 		.4byte	.LASF18
 1089 0302 07       		.byte	0x7
 1090 0303 72       		.byte	0x72
 1091 0304 C4030000 		.4byte	0x3c4
 1092 0308 000C     		.2byte	0xc00
 1093 030a 0D       		.uleb128 0xd
 1094 030b B00C0000 		.4byte	.LASF37
 1095 030f 07       		.byte	0x7
 1096 0310 73       		.byte	0x73
 1097 0311 DE030000 		.4byte	0x3de
 1098 0315 000E     		.2byte	0xe00
 1099 0317 0D       		.uleb128 0xd
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 120


 1100 0318 60050000 		.4byte	.LASF38
 1101 031c 07       		.byte	0x7
 1102 031d 74       		.byte	0x74
 1103 031e CA000000 		.4byte	0xca
 1104 0322 0010     		.2byte	0x1000
 1105 0324 0D       		.uleb128 0xd
 1106 0325 BA0C0000 		.4byte	.LASF39
 1107 0329 07       		.byte	0x7
 1108 032a 75       		.byte	0x75
 1109 032b F9030000 		.4byte	0x3f9
 1110 032f 0410     		.2byte	0x1004
 1111 0331 0D       		.uleb128 0xd
 1112 0332 1F070000 		.4byte	.LASF40
 1113 0336 07       		.byte	0x7
 1114 0337 76       		.byte	0x76
 1115 0338 FE030000 		.4byte	0x3fe
 1116 033c 0020     		.2byte	0x2000
 1117 033e 0D       		.uleb128 0xd
 1118 033f 00020000 		.4byte	.LASF41
 1119 0343 07       		.byte	0x7
 1120 0344 77       		.byte	0x77
 1121 0345 0E040000 		.4byte	0x40e
 1122 0349 0040     		.2byte	0x4000
 1123 034b 0D       		.uleb128 0xd
 1124 034c C40C0000 		.4byte	.LASF42
 1125 0350 07       		.byte	0x7
 1126 0351 78       		.byte	0x78
 1127 0352 34040000 		.4byte	0x434
 1128 0356 0048     		.2byte	0x4800
 1129 0358 0D       		.uleb128 0xd
 1130 0359 74090000 		.4byte	.LASF43
 1131 035d 07       		.byte	0x7
 1132 035e 79       		.byte	0x79
 1133 035f 39040000 		.4byte	0x439
 1134 0363 0050     		.2byte	0x5000
 1135 0365 00       		.byte	0
 1136 0366 07       		.uleb128 0x7
 1137 0367 7D010000 		.4byte	0x17d
 1138 036b 76030000 		.4byte	0x376
 1139 036f 08       		.uleb128 0x8
 1140 0370 C3000000 		.4byte	0xc3
 1141 0374 0F       		.byte	0xf
 1142 0375 00       		.byte	0
 1143 0376 07       		.uleb128 0x7
 1144 0377 CF000000 		.4byte	0xcf
 1145 037b 86030000 		.4byte	0x386
 1146 037f 08       		.uleb128 0x8
 1147 0380 C3000000 		.4byte	0xc3
 1148 0384 FE       		.byte	0xfe
 1149 0385 00       		.byte	0
 1150 0386 05       		.uleb128 0x5
 1151 0387 76030000 		.4byte	0x376
 1152 038b 06       		.uleb128 0x6
 1153 038c 86030000 		.4byte	0x386
 1154 0390 07       		.uleb128 0x7
 1155 0391 CA000000 		.4byte	0xca
 1156 0395 A0030000 		.4byte	0x3a0
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 121


 1157 0399 08       		.uleb128 0x8
 1158 039a C3000000 		.4byte	0xc3
 1159 039e 3F       		.byte	0x3f
 1160 039f 00       		.byte	0
 1161 03a0 05       		.uleb128 0x5
 1162 03a1 90030000 		.4byte	0x390
 1163 03a5 05       		.uleb128 0x5
 1164 03a6 90030000 		.4byte	0x390
 1165 03aa 05       		.uleb128 0x5
 1166 03ab 90030000 		.4byte	0x390
 1167 03af 07       		.uleb128 0x7
 1168 03b0 CA000000 		.4byte	0xca
 1169 03b4 BF030000 		.4byte	0x3bf
 1170 03b8 08       		.uleb128 0x8
 1171 03b9 C3000000 		.4byte	0xc3
 1172 03bd 3E       		.byte	0x3e
 1173 03be 00       		.byte	0
 1174 03bf 05       		.uleb128 0x5
 1175 03c0 AF030000 		.4byte	0x3af
 1176 03c4 05       		.uleb128 0x5
 1177 03c5 E4000000 		.4byte	0xe4
 1178 03c9 07       		.uleb128 0x7
 1179 03ca CF000000 		.4byte	0xcf
 1180 03ce D9030000 		.4byte	0x3d9
 1181 03d2 08       		.uleb128 0x8
 1182 03d3 C3000000 		.4byte	0xc3
 1183 03d7 7F       		.byte	0x7f
 1184 03d8 00       		.byte	0
 1185 03d9 05       		.uleb128 0x5
 1186 03da C9030000 		.4byte	0x3c9
 1187 03de 06       		.uleb128 0x6
 1188 03df D9030000 		.4byte	0x3d9
 1189 03e3 07       		.uleb128 0x7
 1190 03e4 CF000000 		.4byte	0xcf
 1191 03e8 F4030000 		.4byte	0x3f4
 1192 03ec 0E       		.uleb128 0xe
 1193 03ed C3000000 		.4byte	0xc3
 1194 03f1 FE03     		.2byte	0x3fe
 1195 03f3 00       		.byte	0
 1196 03f4 05       		.uleb128 0x5
 1197 03f5 E3030000 		.4byte	0x3e3
 1198 03f9 06       		.uleb128 0x6
 1199 03fa F4030000 		.4byte	0x3f4
 1200 03fe 07       		.uleb128 0x7
 1201 03ff A3010000 		.4byte	0x1a3
 1202 0403 0E040000 		.4byte	0x40e
 1203 0407 08       		.uleb128 0x8
 1204 0408 C3000000 		.4byte	0xc3
 1205 040c 0F       		.byte	0xf
 1206 040d 00       		.byte	0
 1207 040e 07       		.uleb128 0x7
 1208 040f 13020000 		.4byte	0x213
 1209 0413 1E040000 		.4byte	0x41e
 1210 0417 08       		.uleb128 0x8
 1211 0418 C3000000 		.4byte	0xc3
 1212 041c 1F       		.byte	0x1f
 1213 041d 00       		.byte	0
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 122


 1214 041e 07       		.uleb128 0x7
 1215 041f CF000000 		.4byte	0xcf
 1216 0423 2F040000 		.4byte	0x42f
 1217 0427 0E       		.uleb128 0xe
 1218 0428 C3000000 		.4byte	0xc3
 1219 042c FF01     		.2byte	0x1ff
 1220 042e 00       		.byte	0
 1221 042f 05       		.uleb128 0x5
 1222 0430 1E040000 		.4byte	0x41e
 1223 0434 06       		.uleb128 0x6
 1224 0435 2F040000 		.4byte	0x42f
 1225 0439 07       		.uleb128 0x7
 1226 043a 83020000 		.4byte	0x283
 1227 043e 49040000 		.4byte	0x449
 1228 0442 08       		.uleb128 0x8
 1229 0443 C3000000 		.4byte	0xc3
 1230 0447 0F       		.byte	0xf
 1231 0448 00       		.byte	0
 1232 0449 03       		.uleb128 0x3
 1233 044a 140D0000 		.4byte	.LASF44
 1234 044e 07       		.byte	0x7
 1235 044f 7B       		.byte	0x7b
 1236 0450 8E020000 		.4byte	0x28e
 1237 0454 07       		.uleb128 0x7
 1238 0455 CF000000 		.4byte	0xcf
 1239 0459 64040000 		.4byte	0x464
 1240 045d 08       		.uleb128 0x8
 1241 045e C3000000 		.4byte	0xc3
 1242 0462 0F       		.byte	0xf
 1243 0463 00       		.byte	0
 1244 0464 07       		.uleb128 0x7
 1245 0465 CF000000 		.4byte	0xcf
 1246 0469 74040000 		.4byte	0x474
 1247 046d 08       		.uleb128 0x8
 1248 046e C3000000 		.4byte	0xc3
 1249 0472 02       		.byte	0x2
 1250 0473 00       		.byte	0
 1251 0474 07       		.uleb128 0x7
 1252 0475 CF000000 		.4byte	0xcf
 1253 0479 84040000 		.4byte	0x484
 1254 047d 08       		.uleb128 0x8
 1255 047e C3000000 		.4byte	0xc3
 1256 0482 0E       		.byte	0xe
 1257 0483 00       		.byte	0
 1258 0484 0B       		.uleb128 0xb
 1259 0485 080F     		.2byte	0xf08
 1260 0487 08       		.byte	0x8
 1261 0488 21       		.byte	0x21
 1262 0489 0C070000 		.4byte	0x70c
 1263 048d 0A       		.uleb128 0xa
 1264 048e F0000000 		.4byte	.LASF45
 1265 0492 08       		.byte	0x8
 1266 0493 22       		.byte	0x22
 1267 0494 CA000000 		.4byte	0xca
 1268 0498 00       		.byte	0
 1269 0499 0A       		.uleb128 0xa
 1270 049a 960A0000 		.4byte	.LASF46
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 123


 1271 049e 08       		.byte	0x8
 1272 049f 23       		.byte	0x23
 1273 04a0 CA000000 		.4byte	0xca
 1274 04a4 04       		.byte	0x4
 1275 04a5 0A       		.uleb128 0xa
 1276 04a6 27000000 		.4byte	.LASF19
 1277 04aa 08       		.byte	0x8
 1278 04ab 24       		.byte	0x24
 1279 04ac 11070000 		.4byte	0x711
 1280 04b0 08       		.byte	0x8
 1281 04b1 0A       		.uleb128 0xa
 1282 04b2 61020000 		.4byte	.LASF47
 1283 04b6 08       		.byte	0x8
 1284 04b7 25       		.byte	0x25
 1285 04b8 CA000000 		.4byte	0xca
 1286 04bc 10       		.byte	0x10
 1287 04bd 0A       		.uleb128 0xa
 1288 04be AC040000 		.4byte	.LASF48
 1289 04c2 08       		.byte	0x8
 1290 04c3 26       		.byte	0x26
 1291 04c4 CA000000 		.4byte	0xca
 1292 04c8 14       		.byte	0x14
 1293 04c9 0A       		.uleb128 0xa
 1294 04ca 030E0000 		.4byte	.LASF49
 1295 04ce 08       		.byte	0x8
 1296 04cf 27       		.byte	0x27
 1297 04d0 CA000000 		.4byte	0xca
 1298 04d4 18       		.byte	0x18
 1299 04d5 0A       		.uleb128 0xa
 1300 04d6 E3050000 		.4byte	.LASF50
 1301 04da 08       		.byte	0x8
 1302 04db 28       		.byte	0x28
 1303 04dc CA000000 		.4byte	0xca
 1304 04e0 1C       		.byte	0x1c
 1305 04e1 0A       		.uleb128 0xa
 1306 04e2 DF000000 		.4byte	.LASF51
 1307 04e6 08       		.byte	0x8
 1308 04e7 29       		.byte	0x29
 1309 04e8 CA000000 		.4byte	0xca
 1310 04ec 20       		.byte	0x20
 1311 04ed 0A       		.uleb128 0xa
 1312 04ee 210B0000 		.4byte	.LASF52
 1313 04f2 08       		.byte	0x8
 1314 04f3 2A       		.byte	0x2a
 1315 04f4 CA000000 		.4byte	0xca
 1316 04f8 24       		.byte	0x24
 1317 04f9 0A       		.uleb128 0xa
 1318 04fa CA110000 		.4byte	.LASF22
 1319 04fe 08       		.byte	0x8
 1320 04ff 2B       		.byte	0x2b
 1321 0500 2B070000 		.4byte	0x72b
 1322 0504 28       		.byte	0x28
 1323 0505 0A       		.uleb128 0xa
 1324 0506 820F0000 		.4byte	.LASF53
 1325 050a 08       		.byte	0x8
 1326 050b 2C       		.byte	0x2c
 1327 050c 30070000 		.4byte	0x730
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 124


 1328 0510 80       		.byte	0x80
 1329 0511 0A       		.uleb128 0xa
 1330 0512 B00C0000 		.4byte	.LASF37
 1331 0516 08       		.byte	0x8
 1332 0517 2D       		.byte	0x2d
 1333 0518 3A070000 		.4byte	0x73a
 1334 051c C0       		.byte	0xc0
 1335 051d 0D       		.uleb128 0xd
 1336 051e 350E0000 		.4byte	.LASF54
 1337 0522 08       		.byte	0x8
 1338 0523 2E       		.byte	0x2e
 1339 0524 44070000 		.4byte	0x744
 1340 0528 0001     		.2byte	0x100
 1341 052a 0D       		.uleb128 0xd
 1342 052b BA0C0000 		.4byte	.LASF39
 1343 052f 08       		.byte	0x8
 1344 0530 2F       		.byte	0x2f
 1345 0531 4E070000 		.4byte	0x74e
 1346 0535 4001     		.2byte	0x140
 1347 0537 0D       		.uleb128 0xd
 1348 0538 F2090000 		.4byte	.LASF55
 1349 053c 08       		.byte	0x8
 1350 053d 30       		.byte	0x30
 1351 053e 58070000 		.4byte	0x758
 1352 0542 8001     		.2byte	0x180
 1353 0544 0D       		.uleb128 0xd
 1354 0545 C40C0000 		.4byte	.LASF42
 1355 0549 08       		.byte	0x8
 1356 054a 31       		.byte	0x31
 1357 054b 62070000 		.4byte	0x762
 1358 054f C001     		.2byte	0x1c0
 1359 0551 0D       		.uleb128 0xd
 1360 0552 42000000 		.4byte	.LASF56
 1361 0556 08       		.byte	0x8
 1362 0557 32       		.byte	0x32
 1363 0558 CF000000 		.4byte	0xcf
 1364 055c 0002     		.2byte	0x200
 1365 055e 0D       		.uleb128 0xd
 1366 055f 500F0000 		.4byte	.LASF57
 1367 0563 08       		.byte	0x8
 1368 0564 33       		.byte	0x33
 1369 0565 CF000000 		.4byte	0xcf
 1370 0569 0402     		.2byte	0x204
 1371 056b 0D       		.uleb128 0xd
 1372 056c CA010000 		.4byte	.LASF58
 1373 0570 08       		.byte	0x8
 1374 0571 34       		.byte	0x34
 1375 0572 CF000000 		.4byte	0xcf
 1376 0576 0802     		.2byte	0x208
 1377 0578 0D       		.uleb128 0xd
 1378 0579 A5070000 		.4byte	.LASF59
 1379 057d 08       		.byte	0x8
 1380 057e 35       		.byte	0x35
 1381 057f CF000000 		.4byte	0xcf
 1382 0583 0C02     		.2byte	0x20c
 1383 0585 0D       		.uleb128 0xd
 1384 0586 DC030000 		.4byte	.LASF60
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 125


 1385 058a 08       		.byte	0x8
 1386 058b 36       		.byte	0x36
 1387 058c CA000000 		.4byte	0xca
 1388 0590 1002     		.2byte	0x210
 1389 0592 0D       		.uleb128 0xd
 1390 0593 A7020000 		.4byte	.LASF61
 1391 0597 08       		.byte	0x8
 1392 0598 37       		.byte	0x37
 1393 0599 CA000000 		.4byte	0xca
 1394 059d 1402     		.2byte	0x214
 1395 059f 0D       		.uleb128 0xd
 1396 05a0 710A0000 		.4byte	.LASF62
 1397 05a4 08       		.byte	0x8
 1398 05a5 38       		.byte	0x38
 1399 05a6 CA000000 		.4byte	0xca
 1400 05aa 1802     		.2byte	0x218
 1401 05ac 0D       		.uleb128 0xd
 1402 05ad B30E0000 		.4byte	.LASF63
 1403 05b1 08       		.byte	0x8
 1404 05b2 39       		.byte	0x39
 1405 05b3 CF000000 		.4byte	0xcf
 1406 05b7 1C02     		.2byte	0x21c
 1407 05b9 0D       		.uleb128 0xd
 1408 05ba 53020000 		.4byte	.LASF64
 1409 05be 08       		.byte	0x8
 1410 05bf 3A       		.byte	0x3a
 1411 05c0 CA000000 		.4byte	0xca
 1412 05c4 2002     		.2byte	0x220
 1413 05c6 0D       		.uleb128 0xd
 1414 05c7 0D070000 		.4byte	.LASF65
 1415 05cb 08       		.byte	0x8
 1416 05cc 3B       		.byte	0x3b
 1417 05cd CA000000 		.4byte	0xca
 1418 05d1 2402     		.2byte	0x224
 1419 05d3 0D       		.uleb128 0xd
 1420 05d4 06100000 		.4byte	.LASF66
 1421 05d8 08       		.byte	0x8
 1422 05d9 3C       		.byte	0x3c
 1423 05da CA000000 		.4byte	0xca
 1424 05de 2802     		.2byte	0x228
 1425 05e0 0D       		.uleb128 0xd
 1426 05e1 ED060000 		.4byte	.LASF67
 1427 05e5 08       		.byte	0x8
 1428 05e6 3D       		.byte	0x3d
 1429 05e7 CF000000 		.4byte	0xcf
 1430 05eb 2C02     		.2byte	0x22c
 1431 05ed 0D       		.uleb128 0xd
 1432 05ee 320A0000 		.4byte	.LASF68
 1433 05f2 08       		.byte	0x8
 1434 05f3 3E       		.byte	0x3e
 1435 05f4 CA000000 		.4byte	0xca
 1436 05f8 3002     		.2byte	0x230
 1437 05fa 0D       		.uleb128 0xd
 1438 05fb 0E080000 		.4byte	.LASF69
 1439 05ff 08       		.byte	0x8
 1440 0600 3F       		.byte	0x3f
 1441 0601 CA000000 		.4byte	0xca
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 126


 1442 0605 3402     		.2byte	0x234
 1443 0607 0D       		.uleb128 0xd
 1444 0608 C3050000 		.4byte	.LASF70
 1445 060c 08       		.byte	0x8
 1446 060d 40       		.byte	0x40
 1447 060e CA000000 		.4byte	0xca
 1448 0612 3802     		.2byte	0x238
 1449 0614 0D       		.uleb128 0xd
 1450 0615 30000000 		.4byte	.LASF71
 1451 0619 08       		.byte	0x8
 1452 061a 41       		.byte	0x41
 1453 061b CF000000 		.4byte	0xcf
 1454 061f 3C02     		.2byte	0x23c
 1455 0621 0D       		.uleb128 0xd
 1456 0622 3A010000 		.4byte	.LASF72
 1457 0626 08       		.byte	0x8
 1458 0627 42       		.byte	0x42
 1459 0628 CF000000 		.4byte	0xcf
 1460 062c 4002     		.2byte	0x240
 1461 062e 0D       		.uleb128 0xd
 1462 062f CE0C0000 		.4byte	.LASF73
 1463 0633 08       		.byte	0x8
 1464 0634 43       		.byte	0x43
 1465 0635 6C070000 		.4byte	0x76c
 1466 0639 4402     		.2byte	0x244
 1467 063b 0D       		.uleb128 0xd
 1468 063c 1C050000 		.4byte	.LASF74
 1469 0640 08       		.byte	0x8
 1470 0641 44       		.byte	0x44
 1471 0642 CA000000 		.4byte	0xca
 1472 0646 8002     		.2byte	0x280
 1473 0648 0D       		.uleb128 0xd
 1474 0649 D80C0000 		.4byte	.LASF75
 1475 064d 08       		.byte	0x8
 1476 064e 45       		.byte	0x45
 1477 064f 76070000 		.4byte	0x776
 1478 0653 8402     		.2byte	0x284
 1479 0655 0D       		.uleb128 0xd
 1480 0656 86020000 		.4byte	.LASF76
 1481 065a 08       		.byte	0x8
 1482 065b 46       		.byte	0x46
 1483 065c CF000000 		.4byte	0xcf
 1484 0660 9002     		.2byte	0x290
 1485 0662 0D       		.uleb128 0xd
 1486 0663 8C040000 		.4byte	.LASF77
 1487 0667 08       		.byte	0x8
 1488 0668 47       		.byte	0x47
 1489 0669 80070000 		.4byte	0x780
 1490 066d 9402     		.2byte	0x294
 1491 066f 0D       		.uleb128 0xd
 1492 0670 E3110000 		.4byte	.LASF78
 1493 0674 08       		.byte	0x8
 1494 0675 48       		.byte	0x48
 1495 0676 CF000000 		.4byte	0xcf
 1496 067a A002     		.2byte	0x2a0
 1497 067c 0D       		.uleb128 0xd
 1498 067d BA070000 		.4byte	.LASF79
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 127


 1499 0681 08       		.byte	0x8
 1500 0682 49       		.byte	0x49
 1501 0683 CF000000 		.4byte	0xcf
 1502 0687 A402     		.2byte	0x2a4
 1503 0689 0D       		.uleb128 0xd
 1504 068a F10C0000 		.4byte	.LASF80
 1505 068e 08       		.byte	0x8
 1506 068f 4A       		.byte	0x4a
 1507 0690 8A070000 		.4byte	0x78a
 1508 0694 A802     		.2byte	0x2a8
 1509 0696 0D       		.uleb128 0xd
 1510 0697 440F0000 		.4byte	.LASF81
 1511 069b 08       		.byte	0x8
 1512 069c 4B       		.byte	0x4b
 1513 069d CA000000 		.4byte	0xca
 1514 06a1 0003     		.2byte	0x300
 1515 06a3 0D       		.uleb128 0xd
 1516 06a4 CB0A0000 		.4byte	.LASF82
 1517 06a8 08       		.byte	0x8
 1518 06a9 4C       		.byte	0x4c
 1519 06aa CA000000 		.4byte	0xca
 1520 06ae 0403     		.2byte	0x304
 1521 06b0 0D       		.uleb128 0xd
 1522 06b1 FB0C0000 		.4byte	.LASF83
 1523 06b5 08       		.byte	0x8
 1524 06b6 4D       		.byte	0x4d
 1525 06b7 A4070000 		.4byte	0x7a4
 1526 06bb 0803     		.2byte	0x308
 1527 06bd 0D       		.uleb128 0xd
 1528 06be 3E110000 		.4byte	.LASF84
 1529 06c2 08       		.byte	0x8
 1530 06c3 4E       		.byte	0x4e
 1531 06c4 CA000000 		.4byte	0xca
 1532 06c8 4003     		.2byte	0x340
 1533 06ca 0D       		.uleb128 0xd
 1534 06cb 210D0000 		.4byte	.LASF85
 1535 06cf 08       		.byte	0x8
 1536 06d0 4F       		.byte	0x4f
 1537 06d1 CA000000 		.4byte	0xca
 1538 06d5 4403     		.2byte	0x344
 1539 06d7 0D       		.uleb128 0xd
 1540 06d8 71110000 		.4byte	.LASF86
 1541 06dc 08       		.byte	0x8
 1542 06dd 50       		.byte	0x50
 1543 06de CF000000 		.4byte	0xcf
 1544 06e2 4803     		.2byte	0x348
 1545 06e4 0D       		.uleb128 0xd
 1546 06e5 21100000 		.4byte	.LASF87
 1547 06e9 08       		.byte	0x8
 1548 06ea 51       		.byte	0x51
 1549 06eb BF070000 		.4byte	0x7bf
 1550 06ef 4C03     		.2byte	0x34c
 1551 06f1 0D       		.uleb128 0xd
 1552 06f2 AF0F0000 		.4byte	.LASF88
 1553 06f6 08       		.byte	0x8
 1554 06f7 52       		.byte	0x52
 1555 06f8 CA000000 		.4byte	0xca
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 128


 1556 06fc 000F     		.2byte	0xf00
 1557 06fe 0D       		.uleb128 0xd
 1558 06ff B90F0000 		.4byte	.LASF89
 1559 0703 08       		.byte	0x8
 1560 0704 53       		.byte	0x53
 1561 0705 CA000000 		.4byte	0xca
 1562 0709 040F     		.2byte	0xf04
 1563 070b 00       		.byte	0
 1564 070c 05       		.uleb128 0x5
 1565 070d D4000000 		.4byte	0xd4
 1566 0711 06       		.uleb128 0x6
 1567 0712 0C070000 		.4byte	0x70c
 1568 0716 07       		.uleb128 0x7
 1569 0717 CF000000 		.4byte	0xcf
 1570 071b 26070000 		.4byte	0x726
 1571 071f 08       		.uleb128 0x8
 1572 0720 C3000000 		.4byte	0xc3
 1573 0724 15       		.byte	0x15
 1574 0725 00       		.byte	0
 1575 0726 05       		.uleb128 0x5
 1576 0727 16070000 		.4byte	0x716
 1577 072b 06       		.uleb128 0x6
 1578 072c 26070000 		.4byte	0x726
 1579 0730 05       		.uleb128 0x5
 1580 0731 F4000000 		.4byte	0xf4
 1581 0735 05       		.uleb128 0x5
 1582 0736 54040000 		.4byte	0x454
 1583 073a 06       		.uleb128 0x6
 1584 073b 35070000 		.4byte	0x735
 1585 073f 05       		.uleb128 0x5
 1586 0740 54040000 		.4byte	0x454
 1587 0744 06       		.uleb128 0x6
 1588 0745 3F070000 		.4byte	0x73f
 1589 0749 05       		.uleb128 0x5
 1590 074a 54040000 		.4byte	0x454
 1591 074e 06       		.uleb128 0x6
 1592 074f 49070000 		.4byte	0x749
 1593 0753 05       		.uleb128 0x5
 1594 0754 54040000 		.4byte	0x454
 1595 0758 06       		.uleb128 0x6
 1596 0759 53070000 		.4byte	0x753
 1597 075d 05       		.uleb128 0x5
 1598 075e 54040000 		.4byte	0x454
 1599 0762 06       		.uleb128 0x6
 1600 0763 5D070000 		.4byte	0x75d
 1601 0767 05       		.uleb128 0x5
 1602 0768 74040000 		.4byte	0x474
 1603 076c 06       		.uleb128 0x6
 1604 076d 67070000 		.4byte	0x767
 1605 0771 05       		.uleb128 0x5
 1606 0772 64040000 		.4byte	0x464
 1607 0776 06       		.uleb128 0x6
 1608 0777 71070000 		.4byte	0x771
 1609 077b 05       		.uleb128 0x5
 1610 077c 64040000 		.4byte	0x464
 1611 0780 06       		.uleb128 0x6
 1612 0781 7B070000 		.4byte	0x77b
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 129


 1613 0785 05       		.uleb128 0x5
 1614 0786 16070000 		.4byte	0x716
 1615 078a 06       		.uleb128 0x6
 1616 078b 85070000 		.4byte	0x785
 1617 078f 07       		.uleb128 0x7
 1618 0790 CF000000 		.4byte	0xcf
 1619 0794 9F070000 		.4byte	0x79f
 1620 0798 08       		.uleb128 0x8
 1621 0799 C3000000 		.4byte	0xc3
 1622 079d 0D       		.byte	0xd
 1623 079e 00       		.byte	0
 1624 079f 05       		.uleb128 0x5
 1625 07a0 8F070000 		.4byte	0x78f
 1626 07a4 06       		.uleb128 0x6
 1627 07a5 9F070000 		.4byte	0x79f
 1628 07a9 07       		.uleb128 0x7
 1629 07aa CF000000 		.4byte	0xcf
 1630 07ae BA070000 		.4byte	0x7ba
 1631 07b2 0E       		.uleb128 0xe
 1632 07b3 C3000000 		.4byte	0xc3
 1633 07b7 EC02     		.2byte	0x2ec
 1634 07b9 00       		.byte	0
 1635 07ba 05       		.uleb128 0x5
 1636 07bb A9070000 		.4byte	0x7a9
 1637 07bf 06       		.uleb128 0x6
 1638 07c0 BA070000 		.4byte	0x7ba
 1639 07c4 03       		.uleb128 0x3
 1640 07c5 D5060000 		.4byte	.LASF90
 1641 07c9 08       		.byte	0x8
 1642 07ca 54       		.byte	0x54
 1643 07cb 84040000 		.4byte	0x484
 1644 07cf 0F       		.uleb128 0xf
 1645 07d0 40030000 		.4byte	.LASF91
 1646 07d4 09       		.byte	0x9
 1647 07d5 5206     		.2byte	0x652
 1648 07d7 C4070000 		.4byte	0x7c4
 1649 07db 02       		.uleb128 0x2
 1650 07dc 08       		.byte	0x8
 1651 07dd 04       		.byte	0x4
 1652 07de 730B0000 		.4byte	.LASF92
 1653 07e2 09       		.uleb128 0x9
 1654 07e3 B8       		.byte	0xb8
 1655 07e4 0A       		.byte	0xa
 1656 07e5 34       		.byte	0x34
 1657 07e6 F30B0000 		.4byte	0xbf3
 1658 07ea 0A       		.uleb128 0xa
 1659 07eb DD010000 		.4byte	.LASF93
 1660 07ef 0A       		.byte	0xa
 1661 07f0 37       		.byte	0x37
 1662 07f1 B8000000 		.4byte	0xb8
 1663 07f5 00       		.byte	0
 1664 07f6 0A       		.uleb128 0xa
 1665 07f7 1F040000 		.4byte	.LASF94
 1666 07fb 0A       		.byte	0xa
 1667 07fc 38       		.byte	0x38
 1668 07fd B8000000 		.4byte	0xb8
 1669 0801 04       		.byte	0x4
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 130


 1670 0802 0A       		.uleb128 0xa
 1671 0803 E7000000 		.4byte	.LASF95
 1672 0807 0A       		.byte	0xa
 1673 0808 39       		.byte	0x39
 1674 0809 B8000000 		.4byte	0xb8
 1675 080d 08       		.byte	0x8
 1676 080e 0A       		.uleb128 0xa
 1677 080f C3000000 		.4byte	.LASF96
 1678 0813 0A       		.byte	0xa
 1679 0814 3A       		.byte	0x3a
 1680 0815 B8000000 		.4byte	0xb8
 1681 0819 0C       		.byte	0xc
 1682 081a 0A       		.uleb128 0xa
 1683 081b 880B0000 		.4byte	.LASF97
 1684 081f 0A       		.byte	0xa
 1685 0820 3B       		.byte	0x3b
 1686 0821 B8000000 		.4byte	0xb8
 1687 0825 10       		.byte	0x10
 1688 0826 0A       		.uleb128 0xa
 1689 0827 D4090000 		.4byte	.LASF98
 1690 082b 0A       		.byte	0xa
 1691 082c 3C       		.byte	0x3c
 1692 082d B8000000 		.4byte	0xb8
 1693 0831 14       		.byte	0x14
 1694 0832 0A       		.uleb128 0xa
 1695 0833 35060000 		.4byte	.LASF99
 1696 0837 0A       		.byte	0xa
 1697 0838 3D       		.byte	0x3d
 1698 0839 B8000000 		.4byte	0xb8
 1699 083d 18       		.byte	0x18
 1700 083e 0A       		.uleb128 0xa
 1701 083f B7110000 		.4byte	.LASF100
 1702 0843 0A       		.byte	0xa
 1703 0844 3E       		.byte	0x3e
 1704 0845 B8000000 		.4byte	0xb8
 1705 0849 1C       		.byte	0x1c
 1706 084a 0A       		.uleb128 0xa
 1707 084b 65080000 		.4byte	.LASF101
 1708 084f 0A       		.byte	0xa
 1709 0850 3F       		.byte	0x3f
 1710 0851 B8000000 		.4byte	0xb8
 1711 0855 20       		.byte	0x20
 1712 0856 0A       		.uleb128 0xa
 1713 0857 7C080000 		.4byte	.LASF102
 1714 085b 0A       		.byte	0xa
 1715 085c 40       		.byte	0x40
 1716 085d B8000000 		.4byte	0xb8
 1717 0861 24       		.byte	0x24
 1718 0862 0A       		.uleb128 0xa
 1719 0863 3D0D0000 		.4byte	.LASF103
 1720 0867 0A       		.byte	0xa
 1721 0868 43       		.byte	0x43
 1722 0869 97000000 		.4byte	0x97
 1723 086d 28       		.byte	0x28
 1724 086e 0A       		.uleb128 0xa
 1725 086f E7030000 		.4byte	.LASF104
 1726 0873 0A       		.byte	0xa
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 131


 1727 0874 44       		.byte	0x44
 1728 0875 97000000 		.4byte	0x97
 1729 0879 29       		.byte	0x29
 1730 087a 0A       		.uleb128 0xa
 1731 087b 060C0000 		.4byte	.LASF105
 1732 087f 0A       		.byte	0xa
 1733 0880 45       		.byte	0x45
 1734 0881 97000000 		.4byte	0x97
 1735 0885 2A       		.byte	0x2a
 1736 0886 0A       		.uleb128 0xa
 1737 0887 5E0D0000 		.4byte	.LASF106
 1738 088b 0A       		.byte	0xa
 1739 088c 46       		.byte	0x46
 1740 088d 97000000 		.4byte	0x97
 1741 0891 2B       		.byte	0x2b
 1742 0892 0A       		.uleb128 0xa
 1743 0893 4A0D0000 		.4byte	.LASF107
 1744 0897 0A       		.byte	0xa
 1745 0898 47       		.byte	0x47
 1746 0899 97000000 		.4byte	0x97
 1747 089d 2C       		.byte	0x2c
 1748 089e 0A       		.uleb128 0xa
 1749 089f F00E0000 		.4byte	.LASF108
 1750 08a3 0A       		.byte	0xa
 1751 08a4 48       		.byte	0x48
 1752 08a5 97000000 		.4byte	0x97
 1753 08a9 2D       		.byte	0x2d
 1754 08aa 0A       		.uleb128 0xa
 1755 08ab 9F120000 		.4byte	.LASF109
 1756 08af 0A       		.byte	0xa
 1757 08b0 49       		.byte	0x49
 1758 08b1 97000000 		.4byte	0x97
 1759 08b5 2E       		.byte	0x2e
 1760 08b6 0A       		.uleb128 0xa
 1761 08b7 8F110000 		.4byte	.LASF110
 1762 08bb 0A       		.byte	0xa
 1763 08bc 4A       		.byte	0x4a
 1764 08bd 97000000 		.4byte	0x97
 1765 08c1 2F       		.byte	0x2f
 1766 08c2 0A       		.uleb128 0xa
 1767 08c3 1C030000 		.4byte	.LASF111
 1768 08c7 0A       		.byte	0xa
 1769 08c8 4B       		.byte	0x4b
 1770 08c9 97000000 		.4byte	0x97
 1771 08cd 30       		.byte	0x30
 1772 08ce 0A       		.uleb128 0xa
 1773 08cf C00A0000 		.4byte	.LASF112
 1774 08d3 0A       		.byte	0xa
 1775 08d4 4E       		.byte	0x4e
 1776 08d5 97000000 		.4byte	0x97
 1777 08d9 31       		.byte	0x31
 1778 08da 0A       		.uleb128 0xa
 1779 08db 1A110000 		.4byte	.LASF113
 1780 08df 0A       		.byte	0xa
 1781 08e0 4F       		.byte	0x4f
 1782 08e1 97000000 		.4byte	0x97
 1783 08e5 32       		.byte	0x32
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 132


 1784 08e6 0A       		.uleb128 0xa
 1785 08e7 3D0A0000 		.4byte	.LASF114
 1786 08eb 0A       		.byte	0xa
 1787 08ec 50       		.byte	0x50
 1788 08ed 97000000 		.4byte	0x97
 1789 08f1 33       		.byte	0x33
 1790 08f2 0A       		.uleb128 0xa
 1791 08f3 8E010000 		.4byte	.LASF115
 1792 08f7 0A       		.byte	0xa
 1793 08f8 51       		.byte	0x51
 1794 08f9 97000000 		.4byte	0x97
 1795 08fd 34       		.byte	0x34
 1796 08fe 0A       		.uleb128 0xa
 1797 08ff 96040000 		.4byte	.LASF116
 1798 0903 0A       		.byte	0xa
 1799 0904 52       		.byte	0x52
 1800 0905 A2000000 		.4byte	0xa2
 1801 0909 36       		.byte	0x36
 1802 090a 0A       		.uleb128 0xa
 1803 090b 07020000 		.4byte	.LASF117
 1804 090f 0A       		.byte	0xa
 1805 0910 53       		.byte	0x53
 1806 0911 A2000000 		.4byte	0xa2
 1807 0915 38       		.byte	0x38
 1808 0916 0A       		.uleb128 0xa
 1809 0917 1E020000 		.4byte	.LASF118
 1810 091b 0A       		.byte	0xa
 1811 091c 54       		.byte	0x54
 1812 091d A2000000 		.4byte	0xa2
 1813 0921 3A       		.byte	0x3a
 1814 0922 0A       		.uleb128 0xa
 1815 0923 D4110000 		.4byte	.LASF119
 1816 0927 0A       		.byte	0xa
 1817 0928 55       		.byte	0x55
 1818 0929 97000000 		.4byte	0x97
 1819 092d 3C       		.byte	0x3c
 1820 092e 0A       		.uleb128 0xa
 1821 092f 40050000 		.4byte	.LASF120
 1822 0933 0A       		.byte	0xa
 1823 0934 56       		.byte	0x56
 1824 0935 97000000 		.4byte	0x97
 1825 0939 3D       		.byte	0x3d
 1826 093a 0A       		.uleb128 0xa
 1827 093b E30B0000 		.4byte	.LASF121
 1828 093f 0A       		.byte	0xa
 1829 0940 57       		.byte	0x57
 1830 0941 97000000 		.4byte	0x97
 1831 0945 3E       		.byte	0x3e
 1832 0946 0A       		.uleb128 0xa
 1833 0947 A8000000 		.4byte	.LASF122
 1834 094b 0A       		.byte	0xa
 1835 094c 58       		.byte	0x58
 1836 094d 97000000 		.4byte	0x97
 1837 0951 3F       		.byte	0x3f
 1838 0952 0A       		.uleb128 0xa
 1839 0953 45010000 		.4byte	.LASF123
 1840 0957 0A       		.byte	0xa
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 133


 1841 0958 59       		.byte	0x59
 1842 0959 97000000 		.4byte	0x97
 1843 095d 40       		.byte	0x40
 1844 095e 0A       		.uleb128 0xa
 1845 095f E20A0000 		.4byte	.LASF124
 1846 0963 0A       		.byte	0xa
 1847 0964 5A       		.byte	0x5a
 1848 0965 97000000 		.4byte	0x97
 1849 0969 41       		.byte	0x41
 1850 096a 0A       		.uleb128 0xa
 1851 096b F7100000 		.4byte	.LASF125
 1852 096f 0A       		.byte	0xa
 1853 0970 5B       		.byte	0x5b
 1854 0971 97000000 		.4byte	0x97
 1855 0975 42       		.byte	0x42
 1856 0976 0A       		.uleb128 0xa
 1857 0977 9E060000 		.4byte	.LASF126
 1858 097b 0A       		.byte	0xa
 1859 097c 5C       		.byte	0x5c
 1860 097d 97000000 		.4byte	0x97
 1861 0981 43       		.byte	0x43
 1862 0982 0A       		.uleb128 0xa
 1863 0983 94070000 		.4byte	.LASF127
 1864 0987 0A       		.byte	0xa
 1865 0988 5D       		.byte	0x5d
 1866 0989 97000000 		.4byte	0x97
 1867 098d 44       		.byte	0x44
 1868 098e 0A       		.uleb128 0xa
 1869 098f C3100000 		.4byte	.LASF128
 1870 0993 0A       		.byte	0xa
 1871 0994 5E       		.byte	0x5e
 1872 0995 B8000000 		.4byte	0xb8
 1873 0999 48       		.byte	0x48
 1874 099a 0A       		.uleb128 0xa
 1875 099b B0020000 		.4byte	.LASF129
 1876 099f 0A       		.byte	0xa
 1877 09a0 5F       		.byte	0x5f
 1878 09a1 B8000000 		.4byte	0xb8
 1879 09a5 4C       		.byte	0x4c
 1880 09a6 0A       		.uleb128 0xa
 1881 09a7 D5100000 		.4byte	.LASF130
 1882 09ab 0A       		.byte	0xa
 1883 09ac 60       		.byte	0x60
 1884 09ad 97000000 		.4byte	0x97
 1885 09b1 50       		.byte	0x50
 1886 09b2 0A       		.uleb128 0xa
 1887 09b3 B1050000 		.4byte	.LASF131
 1888 09b7 0A       		.byte	0xa
 1889 09b8 61       		.byte	0x61
 1890 09b9 97000000 		.4byte	0x97
 1891 09bd 51       		.byte	0x51
 1892 09be 0A       		.uleb128 0xa
 1893 09bf D2080000 		.4byte	.LASF132
 1894 09c3 0A       		.byte	0xa
 1895 09c4 62       		.byte	0x62
 1896 09c5 97000000 		.4byte	0x97
 1897 09c9 52       		.byte	0x52
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 134


 1898 09ca 0A       		.uleb128 0xa
 1899 09cb F5030000 		.4byte	.LASF133
 1900 09cf 0A       		.byte	0xa
 1901 09d0 63       		.byte	0x63
 1902 09d1 97000000 		.4byte	0x97
 1903 09d5 53       		.byte	0x53
 1904 09d6 0A       		.uleb128 0xa
 1905 09d7 2C100000 		.4byte	.LASF134
 1906 09db 0A       		.byte	0xa
 1907 09dc 64       		.byte	0x64
 1908 09dd 97000000 		.4byte	0x97
 1909 09e1 54       		.byte	0x54
 1910 09e2 0A       		.uleb128 0xa
 1911 09e3 EE050000 		.4byte	.LASF135
 1912 09e7 0A       		.byte	0xa
 1913 09e8 65       		.byte	0x65
 1914 09e9 97000000 		.4byte	0x97
 1915 09ed 55       		.byte	0x55
 1916 09ee 0A       		.uleb128 0xa
 1917 09ef 00000000 		.4byte	.LASF136
 1918 09f3 0A       		.byte	0xa
 1919 09f4 66       		.byte	0x66
 1920 09f5 97000000 		.4byte	0x97
 1921 09f9 56       		.byte	0x56
 1922 09fa 0A       		.uleb128 0xa
 1923 09fb 100C0000 		.4byte	.LASF137
 1924 09ff 0A       		.byte	0xa
 1925 0a00 67       		.byte	0x67
 1926 0a01 97000000 		.4byte	0x97
 1927 0a05 57       		.byte	0x57
 1928 0a06 0A       		.uleb128 0xa
 1929 0a07 2C050000 		.4byte	.LASF138
 1930 0a0b 0A       		.byte	0xa
 1931 0a0c 68       		.byte	0x68
 1932 0a0d 97000000 		.4byte	0x97
 1933 0a11 58       		.byte	0x58
 1934 0a12 0A       		.uleb128 0xa
 1935 0a13 FA110000 		.4byte	.LASF139
 1936 0a17 0A       		.byte	0xa
 1937 0a18 69       		.byte	0x69
 1938 0a19 97000000 		.4byte	0x97
 1939 0a1d 59       		.byte	0x59
 1940 0a1e 0A       		.uleb128 0xa
 1941 0a1f 0F110000 		.4byte	.LASF140
 1942 0a23 0A       		.byte	0xa
 1943 0a24 6E       		.byte	0x6e
 1944 0a25 AD000000 		.4byte	0xad
 1945 0a29 5A       		.byte	0x5a
 1946 0a2a 0A       		.uleb128 0xa
 1947 0a2b 0A010000 		.4byte	.LASF141
 1948 0a2f 0A       		.byte	0xa
 1949 0a30 6F       		.byte	0x6f
 1950 0a31 AD000000 		.4byte	0xad
 1951 0a35 5C       		.byte	0x5c
 1952 0a36 0A       		.uleb128 0xa
 1953 0a37 6D080000 		.4byte	.LASF142
 1954 0a3b 0A       		.byte	0xa
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 135


 1955 0a3c 70       		.byte	0x70
 1956 0a3d 97000000 		.4byte	0x97
 1957 0a41 5E       		.byte	0x5e
 1958 0a42 0A       		.uleb128 0xa
 1959 0a43 28110000 		.4byte	.LASF143
 1960 0a47 0A       		.byte	0xa
 1961 0a48 71       		.byte	0x71
 1962 0a49 97000000 		.4byte	0x97
 1963 0a4d 5F       		.byte	0x5f
 1964 0a4e 0A       		.uleb128 0xa
 1965 0a4f C4060000 		.4byte	.LASF144
 1966 0a53 0A       		.byte	0xa
 1967 0a54 72       		.byte	0x72
 1968 0a55 97000000 		.4byte	0x97
 1969 0a59 60       		.byte	0x60
 1970 0a5a 0A       		.uleb128 0xa
 1971 0a5b 0F060000 		.4byte	.LASF145
 1972 0a5f 0A       		.byte	0xa
 1973 0a60 73       		.byte	0x73
 1974 0a61 B8000000 		.4byte	0xb8
 1975 0a65 64       		.byte	0x64
 1976 0a66 0A       		.uleb128 0xa
 1977 0a67 B3120000 		.4byte	.LASF146
 1978 0a6b 0A       		.byte	0xa
 1979 0a6c 76       		.byte	0x76
 1980 0a6d AD000000 		.4byte	0xad
 1981 0a71 68       		.byte	0x68
 1982 0a72 0A       		.uleb128 0xa
 1983 0a73 910B0000 		.4byte	.LASF147
 1984 0a77 0A       		.byte	0xa
 1985 0a78 77       		.byte	0x77
 1986 0a79 AD000000 		.4byte	0xad
 1987 0a7d 6A       		.byte	0x6a
 1988 0a7e 0A       		.uleb128 0xa
 1989 0a7f 230A0000 		.4byte	.LASF148
 1990 0a83 0A       		.byte	0xa
 1991 0a84 78       		.byte	0x78
 1992 0a85 AD000000 		.4byte	0xad
 1993 0a89 6C       		.byte	0x6c
 1994 0a8a 0A       		.uleb128 0xa
 1995 0a8b ED020000 		.4byte	.LASF149
 1996 0a8f 0A       		.byte	0xa
 1997 0a90 79       		.byte	0x79
 1998 0a91 AD000000 		.4byte	0xad
 1999 0a95 6E       		.byte	0x6e
 2000 0a96 0A       		.uleb128 0xa
 2001 0a97 EB070000 		.4byte	.LASF150
 2002 0a9b 0A       		.byte	0xa
 2003 0a9c 7B       		.byte	0x7b
 2004 0a9d 97000000 		.4byte	0x97
 2005 0aa1 70       		.byte	0x70
 2006 0aa2 0A       		.uleb128 0xa
 2007 0aa3 49030000 		.4byte	.LASF151
 2008 0aa7 0A       		.byte	0xa
 2009 0aa8 7C       		.byte	0x7c
 2010 0aa9 97000000 		.4byte	0x97
 2011 0aad 71       		.byte	0x71
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 136


 2012 0aae 0A       		.uleb128 0xa
 2013 0aaf 91020000 		.4byte	.LASF152
 2014 0ab3 0A       		.byte	0xa
 2015 0ab4 7D       		.byte	0x7d
 2016 0ab5 97000000 		.4byte	0x97
 2017 0ab9 72       		.byte	0x72
 2018 0aba 0A       		.uleb128 0xa
 2019 0abb 6C010000 		.4byte	.LASF153
 2020 0abf 0A       		.byte	0xa
 2021 0ac0 7E       		.byte	0x7e
 2022 0ac1 97000000 		.4byte	0x97
 2023 0ac5 73       		.byte	0x73
 2024 0ac6 0A       		.uleb128 0xa
 2025 0ac7 9E0C0000 		.4byte	.LASF154
 2026 0acb 0A       		.byte	0xa
 2027 0acc 80       		.byte	0x80
 2028 0acd AD000000 		.4byte	0xad
 2029 0ad1 74       		.byte	0x74
 2030 0ad2 0A       		.uleb128 0xa
 2031 0ad3 430B0000 		.4byte	.LASF155
 2032 0ad7 0A       		.byte	0xa
 2033 0ad8 81       		.byte	0x81
 2034 0ad9 AD000000 		.4byte	0xad
 2035 0add 76       		.byte	0x76
 2036 0ade 0A       		.uleb128 0xa
 2037 0adf 73070000 		.4byte	.LASF156
 2038 0ae3 0A       		.byte	0xa
 2039 0ae4 82       		.byte	0x82
 2040 0ae5 AD000000 		.4byte	0xad
 2041 0ae9 78       		.byte	0x78
 2042 0aea 0A       		.uleb128 0xa
 2043 0aeb 63040000 		.4byte	.LASF157
 2044 0aef 0A       		.byte	0xa
 2045 0af0 83       		.byte	0x83
 2046 0af1 AD000000 		.4byte	0xad
 2047 0af5 7A       		.byte	0x7a
 2048 0af6 0A       		.uleb128 0xa
 2049 0af7 8D0E0000 		.4byte	.LASF158
 2050 0afb 0A       		.byte	0xa
 2051 0afc 86       		.byte	0x86
 2052 0afd 97000000 		.4byte	0x97
 2053 0b01 7C       		.byte	0x7c
 2054 0b02 0A       		.uleb128 0xa
 2055 0b03 E6100000 		.4byte	.LASF159
 2056 0b07 0A       		.byte	0xa
 2057 0b08 87       		.byte	0x87
 2058 0b09 97000000 		.4byte	0x97
 2059 0b0d 7D       		.byte	0x7d
 2060 0b0e 0A       		.uleb128 0xa
 2061 0b0f 32040000 		.4byte	.LASF160
 2062 0b13 0A       		.byte	0xa
 2063 0b14 88       		.byte	0x88
 2064 0b15 97000000 		.4byte	0x97
 2065 0b19 7E       		.byte	0x7e
 2066 0b1a 0A       		.uleb128 0xa
 2067 0b1b C8030000 		.4byte	.LASF161
 2068 0b1f 0A       		.byte	0xa
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 137


 2069 0b20 89       		.byte	0x89
 2070 0b21 97000000 		.4byte	0x97
 2071 0b25 7F       		.byte	0x7f
 2072 0b26 0A       		.uleb128 0xa
 2073 0b27 78040000 		.4byte	.LASF162
 2074 0b2b 0A       		.byte	0xa
 2075 0b2c 8A       		.byte	0x8a
 2076 0b2d 97000000 		.4byte	0x97
 2077 0b31 80       		.byte	0x80
 2078 0b32 0A       		.uleb128 0xa
 2079 0b33 91000000 		.4byte	.LASF163
 2080 0b37 0A       		.byte	0xa
 2081 0b38 8D       		.byte	0x8d
 2082 0b39 B8000000 		.4byte	0xb8
 2083 0b3d 84       		.byte	0x84
 2084 0b3e 0A       		.uleb128 0xa
 2085 0b3f FE090000 		.4byte	.LASF164
 2086 0b43 0A       		.byte	0xa
 2087 0b44 8E       		.byte	0x8e
 2088 0b45 B8000000 		.4byte	0xb8
 2089 0b49 88       		.byte	0x88
 2090 0b4a 0A       		.uleb128 0xa
 2091 0b4b 51110000 		.4byte	.LASF165
 2092 0b4f 0A       		.byte	0xa
 2093 0b50 8F       		.byte	0x8f
 2094 0b51 B8000000 		.4byte	0xb8
 2095 0b55 8C       		.byte	0x8c
 2096 0b56 0A       		.uleb128 0xa
 2097 0b57 890C0000 		.4byte	.LASF166
 2098 0b5b 0A       		.byte	0xa
 2099 0b5c 90       		.byte	0x90
 2100 0b5d B8000000 		.4byte	0xb8
 2101 0b61 90       		.byte	0x90
 2102 0b62 0A       		.uleb128 0xa
 2103 0b63 630E0000 		.4byte	.LASF167
 2104 0b67 0A       		.byte	0xa
 2105 0b68 91       		.byte	0x91
 2106 0b69 B8000000 		.4byte	0xb8
 2107 0b6d 94       		.byte	0x94
 2108 0b6e 0A       		.uleb128 0xa
 2109 0b6f 5E030000 		.4byte	.LASF168
 2110 0b73 0A       		.byte	0xa
 2111 0b74 92       		.byte	0x92
 2112 0b75 B8000000 		.4byte	0xb8
 2113 0b79 98       		.byte	0x98
 2114 0b7a 0A       		.uleb128 0xa
 2115 0b7b BF0E0000 		.4byte	.LASF169
 2116 0b7f 0A       		.byte	0xa
 2117 0b80 93       		.byte	0x93
 2118 0b81 B8000000 		.4byte	0xb8
 2119 0b85 9C       		.byte	0x9c
 2120 0b86 0A       		.uleb128 0xa
 2121 0b87 88060000 		.4byte	.LASF170
 2122 0b8b 0A       		.byte	0xa
 2123 0b8c 94       		.byte	0x94
 2124 0b8d B8000000 		.4byte	0xb8
 2125 0b91 A0       		.byte	0xa0
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 138


 2126 0b92 0A       		.uleb128 0xa
 2127 0b93 F5000000 		.4byte	.LASF171
 2128 0b97 0A       		.byte	0xa
 2129 0b98 95       		.byte	0x95
 2130 0b99 AD000000 		.4byte	0xad
 2131 0b9d A4       		.byte	0xa4
 2132 0b9e 0A       		.uleb128 0xa
 2133 0b9f 740C0000 		.4byte	.LASF172
 2134 0ba3 0A       		.byte	0xa
 2135 0ba4 96       		.byte	0x96
 2136 0ba5 AD000000 		.4byte	0xad
 2137 0ba9 A6       		.byte	0xa6
 2138 0baa 0A       		.uleb128 0xa
 2139 0bab 2F0F0000 		.4byte	.LASF173
 2140 0baf 0A       		.byte	0xa
 2141 0bb0 97       		.byte	0x97
 2142 0bb1 AD000000 		.4byte	0xad
 2143 0bb5 A8       		.byte	0xa8
 2144 0bb6 0A       		.uleb128 0xa
 2145 0bb7 49080000 		.4byte	.LASF174
 2146 0bbb 0A       		.byte	0xa
 2147 0bbc 98       		.byte	0x98
 2148 0bbd AD000000 		.4byte	0xad
 2149 0bc1 AA       		.byte	0xaa
 2150 0bc2 0A       		.uleb128 0xa
 2151 0bc3 150A0000 		.4byte	.LASF175
 2152 0bc7 0A       		.byte	0xa
 2153 0bc8 99       		.byte	0x99
 2154 0bc9 AD000000 		.4byte	0xad
 2155 0bcd AC       		.byte	0xac
 2156 0bce 0A       		.uleb128 0xa
 2157 0bcf F20A0000 		.4byte	.LASF176
 2158 0bd3 0A       		.byte	0xa
 2159 0bd4 9A       		.byte	0x9a
 2160 0bd5 AD000000 		.4byte	0xad
 2161 0bd9 AE       		.byte	0xae
 2162 0bda 0A       		.uleb128 0xa
 2163 0bdb FA020000 		.4byte	.LASF177
 2164 0bdf 0A       		.byte	0xa
 2165 0be0 9D       		.byte	0x9d
 2166 0be1 AD000000 		.4byte	0xad
 2167 0be5 B0       		.byte	0xb0
 2168 0be6 0A       		.uleb128 0xa
 2169 0be7 54000000 		.4byte	.LASF178
 2170 0beb 0A       		.byte	0xa
 2171 0bec 9E       		.byte	0x9e
 2172 0bed B8000000 		.4byte	0xb8
 2173 0bf1 B4       		.byte	0xb4
 2174 0bf2 00       		.byte	0
 2175 0bf3 03       		.uleb128 0x3
 2176 0bf4 74030000 		.4byte	.LASF179
 2177 0bf8 0A       		.byte	0xa
 2178 0bf9 9F       		.byte	0x9f
 2179 0bfa E2070000 		.4byte	0x7e2
 2180 0bfe 0F       		.uleb128 0xf
 2181 0bff CE0F0000 		.4byte	.LASF180
 2182 0c03 0B       		.byte	0xb
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 139


 2183 0c04 EE01     		.2byte	0x1ee
 2184 0c06 0A0C0000 		.4byte	0xc0a
 2185 0c0a 10       		.uleb128 0x10
 2186 0c0b 04       		.byte	0x4
 2187 0c0c 100C0000 		.4byte	0xc10
 2188 0c10 11       		.uleb128 0x11
 2189 0c11 0F       		.uleb128 0xf
 2190 0c12 0F0E0000 		.4byte	.LASF181
 2191 0c16 0B       		.byte	0xb
 2192 0c17 F601     		.2byte	0x1f6
 2193 0c19 1D0C0000 		.4byte	0xc1d
 2194 0c1d 02       		.uleb128 0x2
 2195 0c1e 01       		.byte	0x1
 2196 0c1f 08       		.byte	0x8
 2197 0c20 B4000000 		.4byte	.LASF182
 2198 0c24 02       		.uleb128 0x2
 2199 0c25 04       		.byte	0x4
 2200 0c26 04       		.byte	0x4
 2201 0c27 E1030000 		.4byte	.LASF183
 2202 0c2b 02       		.uleb128 0x2
 2203 0c2c 08       		.byte	0x8
 2204 0c2d 04       		.byte	0x4
 2205 0c2e 3F0E0000 		.4byte	.LASF184
 2206 0c32 0F       		.uleb128 0xf
 2207 0c33 B90A0000 		.4byte	.LASF185
 2208 0c37 0B       		.byte	0xb
 2209 0c38 EC03     		.2byte	0x3ec
 2210 0c3a B8000000 		.4byte	0xb8
 2211 0c3e 12       		.uleb128 0x12
 2212 0c3f 04       		.byte	0x4
 2213 0c40 90000000 		.4byte	0x90
 2214 0c44 03       		.byte	0x3
 2215 0c45 FE02     		.2byte	0x2fe
 2216 0c47 6D0C0000 		.4byte	0xc6d
 2217 0c4b 13       		.uleb128 0x13
 2218 0c4c FF070000 		.4byte	.LASF186
 2219 0c50 00       		.byte	0
 2220 0c51 14       		.uleb128 0x14
 2221 0c52 3E060000 		.4byte	.LASF187
 2222 0c56 01000600 		.4byte	0x60001
 2223 0c5a 14       		.uleb128 0x14
 2224 0c5b AA0A0000 		.4byte	.LASF188
 2225 0c5f 02000600 		.4byte	0x60002
 2226 0c63 14       		.uleb128 0x14
 2227 0c64 160E0000 		.4byte	.LASF189
 2228 0c68 03000600 		.4byte	0x60003
 2229 0c6c 00       		.byte	0
 2230 0c6d 0F       		.uleb128 0xf
 2231 0c6e D8070000 		.4byte	.LASF190
 2232 0c72 03       		.byte	0x3
 2233 0c73 0303     		.2byte	0x303
 2234 0c75 3E0C0000 		.4byte	0xc3e
 2235 0c79 12       		.uleb128 0x12
 2236 0c7a 01       		.byte	0x1
 2237 0c7b 2C000000 		.4byte	0x2c
 2238 0c7f 03       		.byte	0x3
 2239 0c80 0703     		.2byte	0x307
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 140


 2240 0c82 930C0000 		.4byte	0xc93
 2241 0c86 13       		.uleb128 0x13
 2242 0c87 000B0000 		.4byte	.LASF191
 2243 0c8b 00       		.byte	0
 2244 0c8c 13       		.uleb128 0x13
 2245 0c8d 6B120000 		.4byte	.LASF192
 2246 0c91 01       		.byte	0x1
 2247 0c92 00       		.byte	0
 2248 0c93 0F       		.uleb128 0xf
 2249 0c94 CF020000 		.4byte	.LASF193
 2250 0c98 03       		.byte	0x3
 2251 0c99 0A03     		.2byte	0x30a
 2252 0c9b 790C0000 		.4byte	0xc79
 2253 0c9f 12       		.uleb128 0x12
 2254 0ca0 01       		.byte	0x1
 2255 0ca1 2C000000 		.4byte	0x2c
 2256 0ca5 03       		.byte	0x3
 2257 0ca6 0E03     		.2byte	0x30e
 2258 0ca8 B90C0000 		.4byte	0xcb9
 2259 0cac 13       		.uleb128 0x13
 2260 0cad 4B050000 		.4byte	.LASF194
 2261 0cb1 00       		.byte	0
 2262 0cb2 13       		.uleb128 0x13
 2263 0cb3 6F020000 		.4byte	.LASF195
 2264 0cb7 01       		.byte	0x1
 2265 0cb8 00       		.byte	0
 2266 0cb9 0F       		.uleb128 0xf
 2267 0cba 640F0000 		.4byte	.LASF196
 2268 0cbe 03       		.byte	0x3
 2269 0cbf 1103     		.2byte	0x311
 2270 0cc1 9F0C0000 		.4byte	0xc9f
 2271 0cc5 12       		.uleb128 0x12
 2272 0cc6 01       		.byte	0x1
 2273 0cc7 2C000000 		.4byte	0x2c
 2274 0ccb 03       		.byte	0x3
 2275 0ccc 1503     		.2byte	0x315
 2276 0cce DF0C0000 		.4byte	0xcdf
 2277 0cd2 13       		.uleb128 0x13
 2278 0cd3 DC0F0000 		.4byte	.LASF197
 2279 0cd7 00       		.byte	0
 2280 0cd8 13       		.uleb128 0x13
 2281 0cd9 1C120000 		.4byte	.LASF198
 2282 0cdd 01       		.byte	0x1
 2283 0cde 00       		.byte	0
 2284 0cdf 0F       		.uleb128 0xf
 2285 0ce0 9F010000 		.4byte	.LASF199
 2286 0ce4 03       		.byte	0x3
 2287 0ce5 1803     		.2byte	0x318
 2288 0ce7 C50C0000 		.4byte	0xcc5
 2289 0ceb 12       		.uleb128 0x12
 2290 0cec 01       		.byte	0x1
 2291 0ced 2C000000 		.4byte	0x2c
 2292 0cf1 03       		.byte	0x3
 2293 0cf2 1C03     		.2byte	0x31c
 2294 0cf4 050D0000 		.4byte	0xd05
 2295 0cf8 13       		.uleb128 0x13
 2296 0cf9 86100000 		.4byte	.LASF200
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 141


 2297 0cfd 00       		.byte	0
 2298 0cfe 13       		.uleb128 0x13
 2299 0cff 390C0000 		.4byte	.LASF201
 2300 0d03 01       		.byte	0x1
 2301 0d04 00       		.byte	0
 2302 0d05 0F       		.uleb128 0xf
 2303 0d06 35070000 		.4byte	.LASF202
 2304 0d0a 03       		.byte	0x3
 2305 0d0b 1F03     		.2byte	0x31f
 2306 0d0d EB0C0000 		.4byte	0xceb
 2307 0d11 12       		.uleb128 0x12
 2308 0d12 01       		.byte	0x1
 2309 0d13 2C000000 		.4byte	0x2c
 2310 0d17 03       		.byte	0x3
 2311 0d18 2303     		.2byte	0x323
 2312 0d1a 250D0000 		.4byte	0xd25
 2313 0d1e 13       		.uleb128 0x13
 2314 0d1f 67050000 		.4byte	.LASF203
 2315 0d23 00       		.byte	0
 2316 0d24 00       		.byte	0
 2317 0d25 12       		.uleb128 0x12
 2318 0d26 01       		.byte	0x1
 2319 0d27 2C000000 		.4byte	0x2c
 2320 0d2b 03       		.byte	0x3
 2321 0d2c 1304     		.2byte	0x413
 2322 0d2e 4B0D0000 		.4byte	0xd4b
 2323 0d32 13       		.uleb128 0x13
 2324 0d33 28030000 		.4byte	.LASF204
 2325 0d37 00       		.byte	0
 2326 0d38 13       		.uleb128 0x13
 2327 0d39 D0040000 		.4byte	.LASF205
 2328 0d3d 01       		.byte	0x1
 2329 0d3e 13       		.uleb128 0x13
 2330 0d3f CD0D0000 		.4byte	.LASF206
 2331 0d43 02       		.byte	0x2
 2332 0d44 13       		.uleb128 0x13
 2333 0d45 52010000 		.4byte	.LASF207
 2334 0d49 03       		.byte	0x3
 2335 0d4a 00       		.byte	0
 2336 0d4b 0F       		.uleb128 0xf
 2337 0d4c 3C120000 		.4byte	.LASF208
 2338 0d50 03       		.byte	0x3
 2339 0d51 1804     		.2byte	0x418
 2340 0d53 250D0000 		.4byte	0xd25
 2341 0d57 12       		.uleb128 0x12
 2342 0d58 01       		.byte	0x1
 2343 0d59 2C000000 		.4byte	0x2c
 2344 0d5d 03       		.byte	0x3
 2345 0d5e 9404     		.2byte	0x494
 2346 0d60 7D0D0000 		.4byte	0xd7d
 2347 0d64 13       		.uleb128 0x13
 2348 0d65 990F0000 		.4byte	.LASF209
 2349 0d69 00       		.byte	0
 2350 0d6a 13       		.uleb128 0x13
 2351 0d6b 20060000 		.4byte	.LASF210
 2352 0d6f 01       		.byte	0x1
 2353 0d70 13       		.uleb128 0x13
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 142


 2354 0d71 87080000 		.4byte	.LASF211
 2355 0d75 02       		.byte	0x2
 2356 0d76 13       		.uleb128 0x13
 2357 0d77 B4080000 		.4byte	.LASF212
 2358 0d7b 04       		.byte	0x4
 2359 0d7c 00       		.byte	0
 2360 0d7d 15       		.uleb128 0x15
 2361 0d7e 78       		.byte	0x78
 2362 0d7f 03       		.byte	0x3
 2363 0d80 0205     		.2byte	0x502
 2364 0d82 4A0E0000 		.4byte	0xe4a
 2365 0d86 16       		.uleb128 0x16
 2366 0d87 0D050000 		.4byte	.LASF213
 2367 0d8b 03       		.byte	0x3
 2368 0d8c 0405     		.2byte	0x504
 2369 0d8e B8000000 		.4byte	0xb8
 2370 0d92 00       		.byte	0
 2371 0d93 16       		.uleb128 0x16
 2372 0d94 8E0F0000 		.4byte	.LASF214
 2373 0d98 03       		.byte	0x3
 2374 0d99 0505     		.2byte	0x505
 2375 0d9b B8000000 		.4byte	0xb8
 2376 0d9f 04       		.byte	0x4
 2377 0da0 16       		.uleb128 0x16
 2378 0da1 C70B0000 		.4byte	.LASF215
 2379 0da5 03       		.byte	0x3
 2380 0da6 0605     		.2byte	0x506
 2381 0da8 B8000000 		.4byte	0xb8
 2382 0dac 08       		.byte	0x8
 2383 0dad 16       		.uleb128 0x16
 2384 0dae D50E0000 		.4byte	.LASF216
 2385 0db2 03       		.byte	0x3
 2386 0db3 0705     		.2byte	0x507
 2387 0db5 B8000000 		.4byte	0xb8
 2388 0db9 0C       		.byte	0xc
 2389 0dba 16       		.uleb128 0x16
 2390 0dbb BA040000 		.4byte	.LASF217
 2391 0dbf 03       		.byte	0x3
 2392 0dc0 0805     		.2byte	0x508
 2393 0dc2 B8000000 		.4byte	0xb8
 2394 0dc6 10       		.byte	0x10
 2395 0dc7 16       		.uleb128 0x16
 2396 0dc8 3F080000 		.4byte	.LASF218
 2397 0dcc 03       		.byte	0x3
 2398 0dcd 0905     		.2byte	0x509
 2399 0dcf 4B0D0000 		.4byte	0xd4b
 2400 0dd3 14       		.byte	0x14
 2401 0dd4 16       		.uleb128 0x16
 2402 0dd5 6C070000 		.4byte	.LASF219
 2403 0dd9 03       		.byte	0x3
 2404 0dda 0A05     		.2byte	0x50a
 2405 0ddc B8000000 		.4byte	0xb8
 2406 0de0 18       		.byte	0x18
 2407 0de1 16       		.uleb128 0x16
 2408 0de2 66110000 		.4byte	.LASF220
 2409 0de6 03       		.byte	0x3
 2410 0de7 0B05     		.2byte	0x50b
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 143


 2411 0de9 4A0E0000 		.4byte	0xe4a
 2412 0ded 1C       		.byte	0x1c
 2413 0dee 16       		.uleb128 0x16
 2414 0def AA120000 		.4byte	.LASF221
 2415 0df3 03       		.byte	0x3
 2416 0df4 0C05     		.2byte	0x50c
 2417 0df6 B8000000 		.4byte	0xb8
 2418 0dfa 5C       		.byte	0x5c
 2419 0dfb 16       		.uleb128 0x16
 2420 0dfc C3020000 		.4byte	.LASF222
 2421 0e00 03       		.byte	0x3
 2422 0e01 0D05     		.2byte	0x50d
 2423 0e03 B8000000 		.4byte	0xb8
 2424 0e07 60       		.byte	0x60
 2425 0e08 16       		.uleb128 0x16
 2426 0e09 0E120000 		.4byte	.LASF223
 2427 0e0d 03       		.byte	0x3
 2428 0e0e 0E05     		.2byte	0x50e
 2429 0e10 B8000000 		.4byte	0xb8
 2430 0e14 64       		.byte	0x64
 2431 0e15 16       		.uleb128 0x16
 2432 0e16 560B0000 		.4byte	.LASF224
 2433 0e1a 03       		.byte	0x3
 2434 0e1b 0F05     		.2byte	0x50f
 2435 0e1d B8000000 		.4byte	0xb8
 2436 0e21 68       		.byte	0x68
 2437 0e22 16       		.uleb128 0x16
 2438 0e23 2F080000 		.4byte	.LASF225
 2439 0e27 03       		.byte	0x3
 2440 0e28 1005     		.2byte	0x510
 2441 0e2a B8000000 		.4byte	0xb8
 2442 0e2e 6C       		.byte	0x6c
 2443 0e2f 16       		.uleb128 0x16
 2444 0e30 A9110000 		.4byte	.LASF226
 2445 0e34 03       		.byte	0x3
 2446 0e35 1105     		.2byte	0x511
 2447 0e37 5A0E0000 		.4byte	0xe5a
 2448 0e3b 70       		.byte	0x70
 2449 0e3c 16       		.uleb128 0x16
 2450 0e3d E1060000 		.4byte	.LASF227
 2451 0e41 03       		.byte	0x3
 2452 0e42 1205     		.2byte	0x512
 2453 0e44 B8000000 		.4byte	0xb8
 2454 0e48 74       		.byte	0x74
 2455 0e49 00       		.byte	0
 2456 0e4a 07       		.uleb128 0x7
 2457 0e4b B8000000 		.4byte	0xb8
 2458 0e4f 5A0E0000 		.4byte	0xe5a
 2459 0e53 08       		.uleb128 0x8
 2460 0e54 C3000000 		.4byte	0xc3
 2461 0e58 0F       		.byte	0xf
 2462 0e59 00       		.byte	0
 2463 0e5a 02       		.uleb128 0x2
 2464 0e5b 01       		.byte	0x1
 2465 0e5c 02       		.byte	0x2
 2466 0e5d DD050000 		.4byte	.LASF228
 2467 0e61 0F       		.uleb128 0xf
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 144


 2468 0e62 F9040000 		.4byte	.LASF229
 2469 0e66 03       		.byte	0x3
 2470 0e67 1305     		.2byte	0x513
 2471 0e69 7D0D0000 		.4byte	0xd7d
 2472 0e6d 12       		.uleb128 0x12
 2473 0e6e 04       		.byte	0x4
 2474 0e6f 90000000 		.4byte	0x90
 2475 0e73 02       		.byte	0x2
 2476 0e74 5C02     		.2byte	0x25c
 2477 0e76 9C0E0000 		.4byte	0xe9c
 2478 0e7a 13       		.uleb128 0x13
 2479 0e7b B8010000 		.4byte	.LASF230
 2480 0e7f 00       		.byte	0
 2481 0e80 14       		.uleb128 0x14
 2482 0e81 600C0000 		.4byte	.LASF231
 2483 0e85 01004A00 		.4byte	0x4a0001
 2484 0e89 14       		.uleb128 0x14
 2485 0e8a 13010000 		.4byte	.LASF232
 2486 0e8e 02004A00 		.4byte	0x4a0002
 2487 0e92 14       		.uleb128 0x14
 2488 0e93 AF0B0000 		.4byte	.LASF233
 2489 0e97 03004A00 		.4byte	0x4a0003
 2490 0e9b 00       		.byte	0
 2491 0e9c 0F       		.uleb128 0xf
 2492 0e9d 88050000 		.4byte	.LASF234
 2493 0ea1 02       		.byte	0x2
 2494 0ea2 6102     		.2byte	0x261
 2495 0ea4 6D0E0000 		.4byte	0xe6d
 2496 0ea8 12       		.uleb128 0x12
 2497 0ea9 01       		.byte	0x1
 2498 0eaa 2C000000 		.4byte	0x2c
 2499 0eae 02       		.byte	0x2
 2500 0eaf 2107     		.2byte	0x721
 2501 0eb1 CE0E0000 		.4byte	0xece
 2502 0eb5 13       		.uleb128 0x13
 2503 0eb6 CB000000 		.4byte	.LASF235
 2504 0eba 00       		.byte	0
 2505 0ebb 13       		.uleb128 0x13
 2506 0ebc F10B0000 		.4byte	.LASF236
 2507 0ec0 01       		.byte	0x1
 2508 0ec1 13       		.uleb128 0x13
 2509 0ec2 2C0B0000 		.4byte	.LASF237
 2510 0ec6 02       		.byte	0x2
 2511 0ec7 13       		.uleb128 0x13
 2512 0ec8 EF0F0000 		.4byte	.LASF238
 2513 0ecc 03       		.byte	0x3
 2514 0ecd 00       		.byte	0
 2515 0ece 0F       		.uleb128 0xf
 2516 0ecf 33020000 		.4byte	.LASF239
 2517 0ed3 02       		.byte	0x2
 2518 0ed4 2607     		.2byte	0x726
 2519 0ed6 A80E0000 		.4byte	0xea8
 2520 0eda 09       		.uleb128 0x9
 2521 0edb 14       		.byte	0x14
 2522 0edc 04       		.byte	0x4
 2523 0edd 3B       		.byte	0x3b
 2524 0ede 1F0F0000 		.4byte	0xf1f
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 145


 2525 0ee2 0A       		.uleb128 0xa
 2526 0ee3 F4010000 		.4byte	.LASF240
 2527 0ee7 04       		.byte	0x4
 2528 0ee8 3D       		.byte	0x3d
 2529 0ee9 B8000000 		.4byte	0xb8
 2530 0eed 00       		.byte	0
 2531 0eee 0A       		.uleb128 0xa
 2532 0eef 0C040000 		.4byte	.LASF241
 2533 0ef3 04       		.byte	0x4
 2534 0ef4 3E       		.byte	0x3e
 2535 0ef5 B8000000 		.4byte	0xb8
 2536 0ef9 04       		.byte	0x4
 2537 0efa 0A       		.uleb128 0xa
 2538 0efb 12020000 		.4byte	.LASF242
 2539 0eff 04       		.byte	0x4
 2540 0f00 3F       		.byte	0x3f
 2541 0f01 1F0F0000 		.4byte	0xf1f
 2542 0f05 08       		.byte	0x8
 2543 0f06 0A       		.uleb128 0xa
 2544 0f07 820E0000 		.4byte	.LASF243
 2545 0f0b 04       		.byte	0x4
 2546 0f0c 40       		.byte	0x40
 2547 0f0d B8000000 		.4byte	0xb8
 2548 0f11 0C       		.byte	0xc
 2549 0f12 0A       		.uleb128 0xa
 2550 0f13 3C100000 		.4byte	.LASF244
 2551 0f17 04       		.byte	0x4
 2552 0f18 45       		.byte	0x45
 2553 0f19 B8000000 		.4byte	0xb8
 2554 0f1d 10       		.byte	0x10
 2555 0f1e 00       		.byte	0
 2556 0f1f 10       		.uleb128 0x10
 2557 0f20 04       		.byte	0x4
 2558 0f21 250F0000 		.4byte	0xf25
 2559 0f25 06       		.uleb128 0x6
 2560 0f26 610E0000 		.4byte	0xe61
 2561 0f2a 03       		.uleb128 0x3
 2562 0f2b 1D080000 		.4byte	.LASF245
 2563 0f2f 04       		.byte	0x4
 2564 0f30 48       		.byte	0x48
 2565 0f31 DA0E0000 		.4byte	0xeda
 2566 0f35 17       		.uleb128 0x17
 2567 0f36 68000000 		.4byte	.LASF248
 2568 0f3a 02       		.byte	0x2
 2569 0f3b 6F08     		.2byte	0x86f
 2570 0f3d 9C0E0000 		.4byte	0xe9c
 2571 0f41 03       		.byte	0x3
 2572 0f42 6B0F0000 		.4byte	0xf6b
 2573 0f46 18       		.uleb128 0x18
 2574 0f47 88070000 		.4byte	.LASF246
 2575 0f4b 02       		.byte	0x2
 2576 0f4c 6F08     		.2byte	0x86f
 2577 0f4e CE0E0000 		.4byte	0xece
 2578 0f52 18       		.uleb128 0x18
 2579 0f53 83010000 		.4byte	.LASF247
 2580 0f57 02       		.byte	0x2
 2581 0f58 6F08     		.2byte	0x86f
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 146


 2582 0f5a B8000000 		.4byte	0xb8
 2583 0f5e 19       		.uleb128 0x19
 2584 0f5f 0F0F0000 		.4byte	.LASF251
 2585 0f63 02       		.byte	0x2
 2586 0f64 7108     		.2byte	0x871
 2587 0f66 9C0E0000 		.4byte	0xe9c
 2588 0f6a 00       		.byte	0
 2589 0f6b 17       		.uleb128 0x17
 2590 0f6c 7B090000 		.4byte	.LASF249
 2591 0f70 02       		.byte	0x2
 2592 0f71 5207     		.2byte	0x752
 2593 0f73 9C0E0000 		.4byte	0xe9c
 2594 0f77 03       		.byte	0x3
 2595 0f78 AD0F0000 		.4byte	0xfad
 2596 0f7c 18       		.uleb128 0x18
 2597 0f7d 88070000 		.4byte	.LASF246
 2598 0f81 02       		.byte	0x2
 2599 0f82 5207     		.2byte	0x752
 2600 0f84 CE0E0000 		.4byte	0xece
 2601 0f88 18       		.uleb128 0x18
 2602 0f89 83010000 		.4byte	.LASF247
 2603 0f8d 02       		.byte	0x2
 2604 0f8e 5307     		.2byte	0x753
 2605 0f90 B8000000 		.4byte	0xb8
 2606 0f94 18       		.uleb128 0x18
 2607 0f95 C3070000 		.4byte	.LASF250
 2608 0f99 02       		.byte	0x2
 2609 0f9a 5307     		.2byte	0x753
 2610 0f9c B8000000 		.4byte	0xb8
 2611 0fa0 19       		.uleb128 0x19
 2612 0fa1 0F0F0000 		.4byte	.LASF251
 2613 0fa5 02       		.byte	0x2
 2614 0fa6 5507     		.2byte	0x755
 2615 0fa8 9C0E0000 		.4byte	0xe9c
 2616 0fac 00       		.byte	0
 2617 0fad 1A       		.uleb128 0x1a
 2618 0fae E20C0000 		.4byte	.LASF253
 2619 0fb2 03       		.byte	0x3
 2620 0fb3 9E05     		.2byte	0x59e
 2621 0fb5 03       		.byte	0x3
 2622 0fb6 C70F0000 		.4byte	0xfc7
 2623 0fba 18       		.uleb128 0x18
 2624 0fbb 07040000 		.4byte	.LASF252
 2625 0fbf 03       		.byte	0x3
 2626 0fc0 9E05     		.2byte	0x59e
 2627 0fc2 C70F0000 		.4byte	0xfc7
 2628 0fc6 00       		.byte	0
 2629 0fc7 10       		.uleb128 0x10
 2630 0fc8 04       		.byte	0x4
 2631 0fc9 CF070000 		.4byte	0x7cf
 2632 0fcd 1A       		.uleb128 0x1a
 2633 0fce AD030000 		.4byte	.LASF254
 2634 0fd2 03       		.byte	0x3
 2635 0fd3 1B08     		.2byte	0x81b
 2636 0fd5 03       		.byte	0x3
 2637 0fd6 F30F0000 		.4byte	0xff3
 2638 0fda 18       		.uleb128 0x18
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 147


 2639 0fdb 07040000 		.4byte	.LASF252
 2640 0fdf 03       		.byte	0x3
 2641 0fe0 1B08     		.2byte	0x81b
 2642 0fe2 C70F0000 		.4byte	0xfc7
 2643 0fe6 18       		.uleb128 0x18
 2644 0fe7 7C0F0000 		.4byte	.LASF255
 2645 0feb 03       		.byte	0x3
 2646 0fec 1B08     		.2byte	0x81b
 2647 0fee DF0C0000 		.4byte	0xcdf
 2648 0ff2 00       		.byte	0
 2649 0ff3 1B       		.uleb128 0x1b
 2650 0ff4 5A0A0000 		.4byte	.LASF257
 2651 0ff8 0C       		.byte	0xc
 2652 0ff9 3C       		.byte	0x3c
 2653 0ffa 03       		.byte	0x3
 2654 0ffb 1C       		.uleb128 0x1c
 2655 0ffc 7B0A0000 		.4byte	.LASF256
 2656 1000 0C       		.byte	0xc
 2657 1001 62       		.byte	0x62
 2658 1002 03       		.byte	0x3
 2659 1003 13100000 		.4byte	0x1013
 2660 1007 1D       		.uleb128 0x1d
 2661 1008 C3070000 		.4byte	.LASF250
 2662 100c 0C       		.byte	0xc
 2663 100d 62       		.byte	0x62
 2664 100e B8000000 		.4byte	0xb8
 2665 1012 00       		.byte	0
 2666 1013 1B       		.uleb128 0x1b
 2667 1014 A0090000 		.4byte	.LASF258
 2668 1018 0C       		.byte	0xc
 2669 1019 4C       		.byte	0x4c
 2670 101a 03       		.byte	0x3
 2671 101b 1A       		.uleb128 0x1a
 2672 101c 160F0000 		.4byte	.LASF259
 2673 1020 03       		.byte	0x3
 2674 1021 3608     		.2byte	0x836
 2675 1023 03       		.byte	0x3
 2676 1024 41100000 		.4byte	0x1041
 2677 1028 18       		.uleb128 0x18
 2678 1029 07040000 		.4byte	.LASF252
 2679 102d 03       		.byte	0x3
 2680 102e 3608     		.2byte	0x836
 2681 1030 C70F0000 		.4byte	0xfc7
 2682 1034 18       		.uleb128 0x18
 2683 1035 0D050000 		.4byte	.LASF213
 2684 1039 03       		.byte	0x3
 2685 103a 3608     		.2byte	0x836
 2686 103c 050D0000 		.4byte	0xd05
 2687 1040 00       		.byte	0
 2688 1041 1A       		.uleb128 0x1a
 2689 1042 5E100000 		.4byte	.LASF260
 2690 1046 03       		.byte	0x3
 2691 1047 6D06     		.2byte	0x66d
 2692 1049 03       		.byte	0x3
 2693 104a 67100000 		.4byte	0x1067
 2694 104e 18       		.uleb128 0x18
 2695 104f 07040000 		.4byte	.LASF252
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 148


 2696 1053 03       		.byte	0x3
 2697 1054 6D06     		.2byte	0x66d
 2698 1056 C70F0000 		.4byte	0xfc7
 2699 105a 18       		.uleb128 0x18
 2700 105b AA120000 		.4byte	.LASF221
 2701 105f 03       		.byte	0x3
 2702 1060 6D06     		.2byte	0x66d
 2703 1062 B8000000 		.4byte	0xb8
 2704 1066 00       		.byte	0
 2705 1067 1A       		.uleb128 0x1a
 2706 1068 A1080000 		.4byte	.LASF261
 2707 106c 03       		.byte	0x3
 2708 106d DB05     		.2byte	0x5db
 2709 106f 03       		.byte	0x3
 2710 1070 8D100000 		.4byte	0x108d
 2711 1074 18       		.uleb128 0x18
 2712 1075 07040000 		.4byte	.LASF252
 2713 1079 03       		.byte	0x3
 2714 107a DB05     		.2byte	0x5db
 2715 107c C70F0000 		.4byte	0xfc7
 2716 1080 18       		.uleb128 0x18
 2717 1081 7D060000 		.4byte	.LASF262
 2718 1085 03       		.byte	0x3
 2719 1086 DB05     		.2byte	0x5db
 2720 1088 B8000000 		.4byte	0xb8
 2721 108c 00       		.byte	0
 2722 108d 1E       		.uleb128 0x1e
 2723 108e DA120000 		.4byte	.LASF263
 2724 1092 04       		.byte	0x4
 2725 1093 9203     		.2byte	0x392
 2726 1095 03       		.byte	0x3
 2727 1096 1E       		.uleb128 0x1e
 2728 1097 3B0F0000 		.4byte	.LASF264
 2729 109b 04       		.byte	0x4
 2730 109c AE03     		.2byte	0x3ae
 2731 109e 03       		.byte	0x3
 2732 109f 17       		.uleb128 0x17
 2733 10a0 E50D0000 		.4byte	.LASF265
 2734 10a4 02       		.byte	0x2
 2735 10a5 4908     		.2byte	0x849
 2736 10a7 9C0E0000 		.4byte	0xe9c
 2737 10ab 03       		.byte	0x3
 2738 10ac D5100000 		.4byte	0x10d5
 2739 10b0 18       		.uleb128 0x18
 2740 10b1 88070000 		.4byte	.LASF246
 2741 10b5 02       		.byte	0x2
 2742 10b6 4908     		.2byte	0x849
 2743 10b8 CE0E0000 		.4byte	0xece
 2744 10bc 18       		.uleb128 0x18
 2745 10bd 83010000 		.4byte	.LASF247
 2746 10c1 02       		.byte	0x2
 2747 10c2 4908     		.2byte	0x849
 2748 10c4 B8000000 		.4byte	0xb8
 2749 10c8 19       		.uleb128 0x19
 2750 10c9 0F0F0000 		.4byte	.LASF251
 2751 10cd 02       		.byte	0x2
 2752 10ce 4B08     		.2byte	0x84b
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 149


 2753 10d0 9C0E0000 		.4byte	0xe9c
 2754 10d4 00       		.byte	0
 2755 10d5 1F       		.uleb128 0x1f
 2756 10d6 4F060000 		.4byte	.LASF266
 2757 10da 01       		.byte	0x1
 2758 10db 80       		.byte	0x80
 2759 10dc 00000000 		.4byte	.LFB188
 2760 10e0 9C000000 		.4byte	.LFE188-.LFB188
 2761 10e4 01       		.uleb128 0x1
 2762 10e5 9C       		.byte	0x9c
 2763 10e6 A5120000 		.4byte	0x12a5
 2764 10ea 20       		.uleb128 0x20
 2765 10eb 320C0000 		.4byte	.LASF269
 2766 10ef 01       		.byte	0x1
 2767 10f0 80       		.byte	0x80
 2768 10f1 A5120000 		.4byte	0x12a5
 2769 10f5 00000000 		.4byte	.LLST0
 2770 10f9 21       		.uleb128 0x21
 2771 10fa 9B110000 		.4byte	.LASF275
 2772 10fe 01       		.byte	0x1
 2773 10ff 82       		.byte	0x82
 2774 1100 5A0E0000 		.4byte	0xe5a
 2775 1104 00       		.byte	0
 2776 1105 22       		.uleb128 0x22
 2777 1106 13100000 		.4byte	0x1013
 2778 110a 04000000 		.4byte	.LBB46
 2779 110e 10000000 		.4byte	.LBE46-.LBB46
 2780 1112 01       		.byte	0x1
 2781 1113 86       		.byte	0x86
 2782 1114 4E110000 		.4byte	0x114e
 2783 1118 23       		.uleb128 0x23
 2784 1119 350F0000 		.4byte	0xf35
 2785 111d 04000000 		.4byte	.LBB47
 2786 1121 10000000 		.4byte	.LBE47-.LBB47
 2787 1125 0C       		.byte	0xc
 2788 1126 4E       		.byte	0x4e
 2789 1127 24       		.uleb128 0x24
 2790 1128 520F0000 		.4byte	0xf52
 2791 112c 2C000000 		.4byte	.LLST1
 2792 1130 24       		.uleb128 0x24
 2793 1131 460F0000 		.4byte	0xf46
 2794 1135 2C000000 		.4byte	.LLST1
 2795 1139 25       		.uleb128 0x25
 2796 113a 04000000 		.4byte	.LBB48
 2797 113e 10000000 		.4byte	.LBE48-.LBB48
 2798 1142 26       		.uleb128 0x26
 2799 1143 5E0F0000 		.4byte	0xf5e
 2800 1147 40000000 		.4byte	.LLST3
 2801 114b 00       		.byte	0
 2802 114c 00       		.byte	0
 2803 114d 00       		.byte	0
 2804 114e 22       		.uleb128 0x22
 2805 114f FB0F0000 		.4byte	0xffb
 2806 1153 16000000 		.4byte	.LBB49
 2807 1157 1A000000 		.4byte	.LBE49-.LBB49
 2808 115b 01       		.byte	0x1
 2809 115c 87       		.byte	0x87
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 150


 2810 115d A9110000 		.4byte	0x11a9
 2811 1161 24       		.uleb128 0x24
 2812 1162 07100000 		.4byte	0x1007
 2813 1166 58000000 		.4byte	.LLST4
 2814 116a 23       		.uleb128 0x23
 2815 116b 6B0F0000 		.4byte	0xf6b
 2816 116f 16000000 		.4byte	.LBB50
 2817 1173 1A000000 		.4byte	.LBE50-.LBB50
 2818 1177 0C       		.byte	0xc
 2819 1178 64       		.byte	0x64
 2820 1179 24       		.uleb128 0x24
 2821 117a 940F0000 		.4byte	0xf94
 2822 117e 58000000 		.4byte	.LLST4
 2823 1182 24       		.uleb128 0x24
 2824 1183 880F0000 		.4byte	0xf88
 2825 1187 77000000 		.4byte	.LLST6
 2826 118b 24       		.uleb128 0x24
 2827 118c 7C0F0000 		.4byte	0xf7c
 2828 1190 77000000 		.4byte	.LLST6
 2829 1194 25       		.uleb128 0x25
 2830 1195 16000000 		.4byte	.LBB51
 2831 1199 1A000000 		.4byte	.LBE51-.LBB51
 2832 119d 26       		.uleb128 0x26
 2833 119e A00F0000 		.4byte	0xfa0
 2834 11a2 8B000000 		.4byte	.LLST8
 2835 11a6 00       		.byte	0
 2836 11a7 00       		.byte	0
 2837 11a8 00       		.byte	0
 2838 11a9 22       		.uleb128 0x22
 2839 11aa F30F0000 		.4byte	0xff3
 2840 11ae 30000000 		.4byte	.LBB52
 2841 11b2 2C000000 		.4byte	.LBE52-.LBB52
 2842 11b6 01       		.byte	0x1
 2843 11b7 88       		.byte	0x88
 2844 11b8 F2110000 		.4byte	0x11f2
 2845 11bc 23       		.uleb128 0x23
 2846 11bd 9F100000 		.4byte	0x109f
 2847 11c1 30000000 		.4byte	.LBB53
 2848 11c5 2C000000 		.4byte	.LBE53-.LBB53
 2849 11c9 0C       		.byte	0xc
 2850 11ca 3E       		.byte	0x3e
 2851 11cb 24       		.uleb128 0x24
 2852 11cc BC100000 		.4byte	0x10bc
 2853 11d0 A3000000 		.4byte	.LLST9
 2854 11d4 24       		.uleb128 0x24
 2855 11d5 B0100000 		.4byte	0x10b0
 2856 11d9 A3000000 		.4byte	.LLST9
 2857 11dd 25       		.uleb128 0x25
 2858 11de 30000000 		.4byte	.LBB54
 2859 11e2 2C000000 		.4byte	.LBE54-.LBB54
 2860 11e6 26       		.uleb128 0x26
 2861 11e7 C8100000 		.4byte	0x10c8
 2862 11eb B7000000 		.4byte	.LLST11
 2863 11ef 00       		.byte	0
 2864 11f0 00       		.byte	0
 2865 11f1 00       		.byte	0
 2866 11f2 22       		.uleb128 0x22
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 151


 2867 11f3 CD0F0000 		.4byte	0xfcd
 2868 11f7 6E000000 		.4byte	.LBB55
 2869 11fb 0E000000 		.4byte	.LBE55-.LBB55
 2870 11ff 01       		.byte	0x1
 2871 1200 92       		.byte	0x92
 2872 1201 39120000 		.4byte	0x1239
 2873 1205 24       		.uleb128 0x24
 2874 1206 E60F0000 		.4byte	0xfe6
 2875 120a CF000000 		.4byte	.LLST12
 2876 120e 24       		.uleb128 0x24
 2877 120f DA0F0000 		.4byte	0xfda
 2878 1213 E3000000 		.4byte	.LLST13
 2879 1217 27       		.uleb128 0x27
 2880 1218 7C000000 		.4byte	.LVL10
 2881 121c 18160000 		.4byte	0x1618
 2882 1220 28       		.uleb128 0x28
 2883 1221 01       		.uleb128 0x1
 2884 1222 50       		.byte	0x50
 2885 1223 02       		.uleb128 0x2
 2886 1224 75       		.byte	0x75
 2887 1225 00       		.sleb128 0
 2888 1226 28       		.uleb128 0x28
 2889 1227 01       		.uleb128 0x1
 2890 1228 51       		.byte	0x51
 2891 1229 01       		.uleb128 0x1
 2892 122a 30       		.byte	0x30
 2893 122b 28       		.uleb128 0x28
 2894 122c 01       		.uleb128 0x1
 2895 122d 52       		.byte	0x52
 2896 122e 03       		.uleb128 0x3
 2897 122f 40       		.byte	0x40
 2898 1230 3C       		.byte	0x3c
 2899 1231 24       		.byte	0x24
 2900 1232 28       		.uleb128 0x28
 2901 1233 01       		.uleb128 0x1
 2902 1234 53       		.byte	0x53
 2903 1235 01       		.uleb128 0x1
 2904 1236 31       		.byte	0x31
 2905 1237 00       		.byte	0
 2906 1238 00       		.byte	0
 2907 1239 22       		.uleb128 0x22
 2908 123a 1B100000 		.4byte	0x101b
 2909 123e 82000000 		.4byte	.LBB57
 2910 1242 0C000000 		.4byte	.LBE57-.LBB57
 2911 1246 01       		.byte	0x1
 2912 1247 97       		.byte	0x97
 2913 1248 7B120000 		.4byte	0x127b
 2914 124c 24       		.uleb128 0x24
 2915 124d 34100000 		.4byte	0x1034
 2916 1251 FB000000 		.4byte	.LLST14
 2917 1255 24       		.uleb128 0x24
 2918 1256 28100000 		.4byte	0x1028
 2919 125a 0F010000 		.4byte	.LLST15
 2920 125e 27       		.uleb128 0x27
 2921 125f 8E000000 		.4byte	.LVL12
 2922 1263 24160000 		.4byte	0x1624
 2923 1267 28       		.uleb128 0x28
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 152


 2924 1268 01       		.uleb128 0x1
 2925 1269 50       		.byte	0x50
 2926 126a 02       		.uleb128 0x2
 2927 126b 75       		.byte	0x75
 2928 126c 00       		.sleb128 0
 2929 126d 28       		.uleb128 0x28
 2930 126e 01       		.uleb128 0x1
 2931 126f 51       		.byte	0x51
 2932 1270 03       		.uleb128 0x3
 2933 1271 40       		.byte	0x40
 2934 1272 3C       		.byte	0x3c
 2935 1273 24       		.byte	0x24
 2936 1274 28       		.uleb128 0x28
 2937 1275 01       		.uleb128 0x1
 2938 1276 52       		.byte	0x52
 2939 1277 01       		.uleb128 0x1
 2940 1278 31       		.byte	0x31
 2941 1279 00       		.byte	0
 2942 127a 00       		.byte	0
 2943 127b 29       		.uleb128 0x29
 2944 127c 66000000 		.4byte	.LVL8
 2945 1280 30160000 		.4byte	0x1630
 2946 1284 94120000 		.4byte	0x1294
 2947 1288 28       		.uleb128 0x28
 2948 1289 01       		.uleb128 0x1
 2949 128a 50       		.byte	0x50
 2950 128b 02       		.uleb128 0x2
 2951 128c 75       		.byte	0x75
 2952 128d 00       		.sleb128 0
 2953 128e 28       		.uleb128 0x28
 2954 128f 01       		.uleb128 0x1
 2955 1290 51       		.byte	0x51
 2956 1291 01       		.uleb128 0x1
 2957 1292 30       		.byte	0x30
 2958 1293 00       		.byte	0
 2959 1294 27       		.uleb128 0x27
 2960 1295 6E000000 		.4byte	.LVL9
 2961 1299 3C160000 		.4byte	0x163c
 2962 129d 28       		.uleb128 0x28
 2963 129e 01       		.uleb128 0x1
 2964 129f 50       		.byte	0x50
 2965 12a0 02       		.uleb128 0x2
 2966 12a1 75       		.byte	0x75
 2967 12a2 00       		.sleb128 0
 2968 12a3 00       		.byte	0
 2969 12a4 00       		.byte	0
 2970 12a5 10       		.uleb128 0x10
 2971 12a6 04       		.byte	0x4
 2972 12a7 AB120000 		.4byte	0x12ab
 2973 12ab 06       		.uleb128 0x6
 2974 12ac 2A0F0000 		.4byte	0xf2a
 2975 12b0 1F       		.uleb128 0x1f
 2976 12b1 A20E0000 		.4byte	.LASF267
 2977 12b5 01       		.byte	0x1
 2978 12b6 E3       		.byte	0xe3
 2979 12b7 00000000 		.4byte	.LFB190
 2980 12bb 24000000 		.4byte	.LFE190-.LFB190
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 153


 2981 12bf 01       		.uleb128 0x1
 2982 12c0 9C       		.byte	0x9c
 2983 12c1 FA120000 		.4byte	0x12fa
 2984 12c5 29       		.uleb128 0x29
 2985 12c6 12000000 		.4byte	.LVL14
 2986 12ca 48160000 		.4byte	0x1648
 2987 12ce E1120000 		.4byte	0x12e1
 2988 12d2 28       		.uleb128 0x28
 2989 12d3 01       		.uleb128 0x1
 2990 12d4 50       		.byte	0x50
 2991 12d5 05       		.uleb128 0x5
 2992 12d6 0C       		.byte	0xc
 2993 12d7 00001D41 		.4byte	0x411d0000
 2994 12db 28       		.uleb128 0x28
 2995 12dc 01       		.uleb128 0x1
 2996 12dd 51       		.byte	0x51
 2997 12de 01       		.uleb128 0x1
 2998 12df 31       		.byte	0x31
 2999 12e0 00       		.byte	0
 3000 12e1 27       		.uleb128 0x27
 3001 12e2 1C000000 		.4byte	.LVL15
 3002 12e6 48160000 		.4byte	0x1648
 3003 12ea 28       		.uleb128 0x28
 3004 12eb 01       		.uleb128 0x1
 3005 12ec 50       		.byte	0x50
 3006 12ed 05       		.uleb128 0x5
 3007 12ee 0C       		.byte	0xc
 3008 12ef 00001D41 		.4byte	0x411d0000
 3009 12f3 28       		.uleb128 0x28
 3010 12f4 01       		.uleb128 0x1
 3011 12f5 51       		.byte	0x51
 3012 12f6 01       		.uleb128 0x1
 3013 12f7 30       		.byte	0x30
 3014 12f8 00       		.byte	0
 3015 12f9 00       		.byte	0
 3016 12fa 1F       		.uleb128 0x1f
 3017 12fb 600B0000 		.4byte	.LASF268
 3018 12ff 01       		.byte	0x1
 3019 1300 FE       		.byte	0xfe
 3020 1301 00000000 		.4byte	.LFB191
 3021 1305 28000000 		.4byte	.LFE191-.LFB191
 3022 1309 01       		.uleb128 0x1
 3023 130a 9C       		.byte	0x9c
 3024 130b 1D130000 		.4byte	0x131d
 3025 130f 2A       		.uleb128 0x2a
 3026 1310 BE020000 		.4byte	.LASF270
 3027 1314 01       		.byte	0x1
 3028 1315 FE       		.byte	0xfe
 3029 1316 930C0000 		.4byte	0xc93
 3030 131a 01       		.uleb128 0x1
 3031 131b 50       		.byte	0x50
 3032 131c 00       		.byte	0
 3033 131d 2B       		.uleb128 0x2b
 3034 131e B8090000 		.4byte	.LASF271
 3035 1322 01       		.byte	0x1
 3036 1323 1A01     		.2byte	0x11a
 3037 1325 00000000 		.4byte	.LFB192
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 154


 3038 1329 02000000 		.4byte	.LFE192-.LFB192
 3039 132d 01       		.uleb128 0x1
 3040 132e 9C       		.byte	0x9c
 3041 132f 2B       		.uleb128 0x2b
 3042 1330 E9040000 		.4byte	.LASF272
 3043 1334 01       		.byte	0x1
 3044 1335 3601     		.2byte	0x136
 3045 1337 00000000 		.4byte	.LFB193
 3046 133b 02000000 		.4byte	.LFE193-.LFB193
 3047 133f 01       		.uleb128 0x1
 3048 1340 9C       		.byte	0x9c
 3049 1341 2C       		.uleb128 0x2c
 3050 1342 D40B0000 		.4byte	.LASF273
 3051 1346 01       		.byte	0x1
 3052 1347 5201     		.2byte	0x152
 3053 1349 00000000 		.4byte	.LFB194
 3054 134d 2C000000 		.4byte	.LFE194-.LFB194
 3055 1351 01       		.uleb128 0x1
 3056 1352 9C       		.byte	0x9c
 3057 1353 B5130000 		.4byte	0x13b5
 3058 1357 2D       		.uleb128 0x2d
 3059 1358 DD0A0000 		.4byte	.LASF274
 3060 135c 01       		.byte	0x1
 3061 135d 5201     		.2byte	0x152
 3062 135f B8000000 		.4byte	0xb8
 3063 1363 27010000 		.4byte	.LLST16
 3064 1367 2E       		.uleb128 0x2e
 3065 1368 30120000 		.4byte	.LASF276
 3066 136c 01       		.byte	0x1
 3067 136d 5401     		.2byte	0x154
 3068 136f B8000000 		.4byte	0xb8
 3069 1373 48010000 		.4byte	.LLST17
 3070 1377 2F       		.uleb128 0x2f
 3071 1378 41100000 		.4byte	0x1041
 3072 137c 08000000 		.4byte	.LBB59
 3073 1380 14000000 		.4byte	.LBE59-.LBB59
 3074 1384 01       		.byte	0x1
 3075 1385 5801     		.2byte	0x158
 3076 1387 24       		.uleb128 0x24
 3077 1388 5A100000 		.4byte	0x105a
 3078 138c 6A010000 		.4byte	.LLST18
 3079 1390 24       		.uleb128 0x24
 3080 1391 4E100000 		.4byte	0x104e
 3081 1395 7D010000 		.4byte	.LLST19
 3082 1399 27       		.uleb128 0x27
 3083 139a 14000000 		.4byte	.LVL20
 3084 139e 54160000 		.4byte	0x1654
 3085 13a2 28       		.uleb128 0x28
 3086 13a3 01       		.uleb128 0x1
 3087 13a4 50       		.byte	0x50
 3088 13a5 05       		.uleb128 0x5
 3089 13a6 03       		.byte	0x3
 3090 13a7 00000000 		.4byte	.LC1
 3091 13ab 28       		.uleb128 0x28
 3092 13ac 01       		.uleb128 0x1
 3093 13ad 51       		.byte	0x51
 3094 13ae 03       		.uleb128 0x3
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 155


 3095 13af 0A       		.byte	0xa
 3096 13b0 6F06     		.2byte	0x66f
 3097 13b2 00       		.byte	0
 3098 13b3 00       		.byte	0
 3099 13b4 00       		.byte	0
 3100 13b5 2C       		.uleb128 0x2c
 3101 13b6 25070000 		.4byte	.LASF277
 3102 13ba 01       		.byte	0x1
 3103 13bb 6901     		.2byte	0x169
 3104 13bd 00000000 		.4byte	.LFB195
 3105 13c1 48000000 		.4byte	.LFE195-.LFB195
 3106 13c5 01       		.uleb128 0x1
 3107 13c6 9C       		.byte	0x9c
 3108 13c7 29140000 		.4byte	0x1429
 3109 13cb 2D       		.uleb128 0x2d
 3110 13cc 7D060000 		.4byte	.LASF262
 3111 13d0 01       		.byte	0x1
 3112 13d1 6901     		.2byte	0x169
 3113 13d3 B8000000 		.4byte	0xb8
 3114 13d7 95010000 		.4byte	.LLST20
 3115 13db 2E       		.uleb128 0x2e
 3116 13dc 5E060000 		.4byte	.LASF278
 3117 13e0 01       		.byte	0x1
 3118 13e1 6B01     		.2byte	0x16b
 3119 13e3 320C0000 		.4byte	0xc32
 3120 13e7 BF010000 		.4byte	.LLST21
 3121 13eb 2F       		.uleb128 0x2f
 3122 13ec 67100000 		.4byte	0x1067
 3123 13f0 1A000000 		.4byte	.LBB61
 3124 13f4 12000000 		.4byte	.LBE61-.LBB61
 3125 13f8 01       		.byte	0x1
 3126 13f9 6E01     		.2byte	0x16e
 3127 13fb 24       		.uleb128 0x24
 3128 13fc 80100000 		.4byte	0x1080
 3129 1400 DE010000 		.4byte	.LLST22
 3130 1404 24       		.uleb128 0x24
 3131 1405 74100000 		.4byte	0x1074
 3132 1409 F1010000 		.4byte	.LLST23
 3133 140d 27       		.uleb128 0x27
 3134 140e 28000000 		.4byte	.LVL27
 3135 1412 54160000 		.4byte	0x1654
 3136 1416 28       		.uleb128 0x28
 3137 1417 01       		.uleb128 0x1
 3138 1418 50       		.byte	0x50
 3139 1419 05       		.uleb128 0x5
 3140 141a 03       		.byte	0x3
 3141 141b 00000000 		.4byte	.LC1
 3142 141f 28       		.uleb128 0x28
 3143 1420 01       		.uleb128 0x1
 3144 1421 51       		.byte	0x51
 3145 1422 03       		.uleb128 0x3
 3146 1423 0A       		.byte	0xa
 3147 1424 DD05     		.2byte	0x5dd
 3148 1426 00       		.byte	0
 3149 1427 00       		.byte	0
 3150 1428 00       		.byte	0
 3151 1429 30       		.uleb128 0x30
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 156


 3152 142a 08030000 		.4byte	.LASF305
 3153 142e 01       		.byte	0x1
 3154 142f 8201     		.2byte	0x182
 3155 1431 B8000000 		.4byte	0xb8
 3156 1435 00000000 		.4byte	.LFB196
 3157 1439 1C000000 		.4byte	.LFE196-.LFB196
 3158 143d 01       		.uleb128 0x1
 3159 143e 9C       		.byte	0x9c
 3160 143f 87140000 		.4byte	0x1487
 3161 1443 2D       		.uleb128 0x2d
 3162 1444 19100000 		.4byte	.LASF279
 3163 1448 01       		.byte	0x1
 3164 1449 8201     		.2byte	0x182
 3165 144b B90C0000 		.4byte	0xcb9
 3166 144f 09020000 		.4byte	.LLST24
 3167 1453 2E       		.uleb128 0x2e
 3168 1454 76100000 		.4byte	.LASF280
 3169 1458 01       		.byte	0x1
 3170 1459 8401     		.2byte	0x184
 3171 145b 320C0000 		.4byte	0xc32
 3172 145f 2A020000 		.4byte	.LLST25
 3173 1463 2E       		.uleb128 0x2e
 3174 1464 45040000 		.4byte	.LASF281
 3175 1468 01       		.byte	0x1
 3176 1469 8501     		.2byte	0x185
 3177 146b 6D0C0000 		.4byte	0xc6d
 3178 146f 49020000 		.4byte	.LLST26
 3179 1473 27       		.uleb128 0x27
 3180 1474 0A000000 		.4byte	.LVL33
 3181 1478 60160000 		.4byte	0x1660
 3182 147c 28       		.uleb128 0x28
 3183 147d 01       		.uleb128 0x1
 3184 147e 50       		.byte	0x50
 3185 147f 05       		.uleb128 0x5
 3186 1480 0C       		.byte	0xc
 3187 1481 00001D41 		.4byte	0x411d0000
 3188 1485 00       		.byte	0
 3189 1486 00       		.byte	0
 3190 1487 2C       		.uleb128 0x2c
 3191 1488 A3040000 		.4byte	.LASF282
 3192 148c 01       		.byte	0x1
 3193 148d 9F01     		.2byte	0x19f
 3194 148f 00000000 		.4byte	.LFB197
 3195 1493 28000000 		.4byte	.LFE197-.LFB197
 3196 1497 01       		.uleb128 0x1
 3197 1498 9C       		.byte	0x9c
 3198 1499 B4140000 		.4byte	0x14b4
 3199 149d 31       		.uleb128 0x31
 3200 149e D3050000 		.4byte	.LASF283
 3201 14a2 01       		.byte	0x1
 3202 14a3 A101     		.2byte	0x1a1
 3203 14a5 B8000000 		.4byte	0xb8
 3204 14a9 00       		.byte	0
 3205 14aa 32       		.uleb128 0x32
 3206 14ab 1E000000 		.4byte	.LVL38
 3207 14af D5100000 		.4byte	0x10d5
 3208 14b3 00       		.byte	0
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 157


 3209 14b4 1F       		.uleb128 0x1f
 3210 14b5 12050000 		.4byte	.LASF284
 3211 14b9 01       		.byte	0x1
 3212 14ba 41       		.byte	0x41
 3213 14bb 00000000 		.4byte	.LFB186
 3214 14bf 28000000 		.4byte	.LFE186-.LFB186
 3215 14c3 01       		.uleb128 0x1
 3216 14c4 9C       		.byte	0x9c
 3217 14c5 FA140000 		.4byte	0x14fa
 3218 14c9 22       		.uleb128 0x22
 3219 14ca 8D100000 		.4byte	0x108d
 3220 14ce 18000000 		.4byte	.LBB63
 3221 14d2 06000000 		.4byte	.LBE63-.LBB63
 3222 14d6 01       		.byte	0x1
 3223 14d7 49       		.byte	0x49
 3224 14d8 F0140000 		.4byte	0x14f0
 3225 14dc 27       		.uleb128 0x27
 3226 14dd 1E000000 		.4byte	.LVL40
 3227 14e1 6C160000 		.4byte	0x166c
 3228 14e5 28       		.uleb128 0x28
 3229 14e6 01       		.uleb128 0x1
 3230 14e7 50       		.byte	0x50
 3231 14e8 05       		.uleb128 0x5
 3232 14e9 0C       		.byte	0xc
 3233 14ea 00001D41 		.4byte	0x411d0000
 3234 14ee 00       		.byte	0
 3235 14ef 00       		.byte	0
 3236 14f0 32       		.uleb128 0x32
 3237 14f1 0E000000 		.4byte	.LVL39
 3238 14f5 87140000 		.4byte	0x1487
 3239 14f9 00       		.byte	0
 3240 14fa 1F       		.uleb128 0x1f
 3241 14fb A30B0000 		.4byte	.LASF285
 3242 14ff 01       		.byte	0x1
 3243 1500 5E       		.byte	0x5e
 3244 1501 00000000 		.4byte	.LFB187
 3245 1505 08000000 		.4byte	.LFE187-.LFB187
 3246 1509 01       		.uleb128 0x1
 3247 150a 9C       		.byte	0x9c
 3248 150b 28150000 		.4byte	0x1528
 3249 150f 20       		.uleb128 0x20
 3250 1510 A20A0000 		.4byte	.LASF286
 3251 1514 01       		.byte	0x1
 3252 1515 5E       		.byte	0x5e
 3253 1516 FE0B0000 		.4byte	0xbfe
 3254 151a 67020000 		.4byte	.LLST27
 3255 151e 32       		.uleb128 0x32
 3256 151f 06000000 		.4byte	.LVL42
 3257 1523 B4140000 		.4byte	0x14b4
 3258 1527 00       		.byte	0
 3259 1528 1F       		.uleb128 0x1f
 3260 1529 490A0000 		.4byte	.LASF287
 3261 152d 01       		.byte	0x1
 3262 152e AA       		.byte	0xaa
 3263 152f 00000000 		.4byte	.LFB189
 3264 1533 5C000000 		.4byte	.LFE189-.LFB189
 3265 1537 01       		.uleb128 0x1
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 158


 3266 1538 9C       		.byte	0x9c
 3267 1539 AE150000 		.4byte	0x15ae
 3268 153d 20       		.uleb128 0x20
 3269 153e 320C0000 		.4byte	.LASF269
 3270 1542 01       		.byte	0x1
 3271 1543 AA       		.byte	0xaa
 3272 1544 B8000000 		.4byte	0xb8
 3273 1548 88020000 		.4byte	.LLST28
 3274 154c 20       		.uleb128 0x20
 3275 154d 32010000 		.4byte	.LASF288
 3276 1551 01       		.byte	0x1
 3277 1552 AA       		.byte	0xaa
 3278 1553 B8000000 		.4byte	0xb8
 3279 1557 B4020000 		.4byte	.LLST29
 3280 155b 22       		.uleb128 0x22
 3281 155c 96100000 		.4byte	0x1096
 3282 1560 0A000000 		.4byte	.LBB65
 3283 1564 0A000000 		.4byte	.LBE65-.LBB65
 3284 1568 01       		.byte	0x1
 3285 1569 B0       		.byte	0xb0
 3286 156a 89150000 		.4byte	0x1589
 3287 156e 2F       		.uleb128 0x2f
 3288 156f AD0F0000 		.4byte	0xfad
 3289 1573 0A000000 		.4byte	.LBB66
 3290 1577 0A000000 		.4byte	.LBE66-.LBB66
 3291 157b 04       		.byte	0x4
 3292 157c B003     		.2byte	0x3b0
 3293 157e 24       		.uleb128 0x24
 3294 157f BA0F0000 		.4byte	0xfba
 3295 1583 E0020000 		.4byte	.LLST30
 3296 1587 00       		.byte	0
 3297 1588 00       		.byte	0
 3298 1589 32       		.uleb128 0x32
 3299 158a 24000000 		.4byte	.LVL46
 3300 158e 87140000 		.4byte	0x1487
 3301 1592 32       		.uleb128 0x32
 3302 1593 3C000000 		.4byte	.LVL47
 3303 1597 D5100000 		.4byte	0x10d5
 3304 159b 32       		.uleb128 0x32
 3305 159c 48000000 		.4byte	.LVL48
 3306 15a0 B4140000 		.4byte	0x14b4
 3307 15a4 32       		.uleb128 0x32
 3308 15a5 4C000000 		.4byte	.LVL49
 3309 15a9 B0120000 		.4byte	0x12b0
 3310 15ad 00       		.byte	0
 3311 15ae 33       		.uleb128 0x33
 3312 15af 87000000 		.4byte	.LASF289
 3313 15b3 0A       		.byte	0xa
 3314 15b4 A7       		.byte	0xa7
 3315 15b5 B9150000 		.4byte	0x15b9
 3316 15b9 10       		.uleb128 0x10
 3317 15ba 04       		.byte	0x4
 3318 15bb BF150000 		.4byte	0x15bf
 3319 15bf 06       		.uleb128 0x6
 3320 15c0 F30B0000 		.4byte	0xbf3
 3321 15c4 34       		.uleb128 0x34
 3322 15c5 98030000 		.4byte	.LASF290
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 159


 3323 15c9 01       		.byte	0x1
 3324 15ca 2B       		.byte	0x2b
 3325 15cb 97000000 		.4byte	0x97
 3326 15cf 05       		.uleb128 0x5
 3327 15d0 03       		.byte	0x3
 3328 15d1 00000000 		.4byte	ADC_initVar
 3329 15d5 34       		.uleb128 0x34
 3330 15d6 C7090000 		.4byte	.LASF291
 3331 15da 01       		.byte	0x1
 3332 15db 2C       		.byte	0x2c
 3333 15dc 97000000 		.4byte	0x97
 3334 15e0 05       		.uleb128 0x5
 3335 15e1 03       		.byte	0x3
 3336 15e2 00000000 		.4byte	ADC_selected
 3337 15e6 34       		.uleb128 0x34
 3338 15e7 A5100000 		.4byte	.LASF292
 3339 15eb 01       		.byte	0x1
 3340 15ec 2D       		.byte	0x2d
 3341 15ed B8000000 		.4byte	0xb8
 3342 15f1 05       		.uleb128 0x5
 3343 15f2 03       		.byte	0x3
 3344 15f3 00000000 		.4byte	ADC_currentConfig
 3345 15f7 07       		.uleb128 0x7
 3346 15f8 AB120000 		.4byte	0x12ab
 3347 15fc 07160000 		.4byte	0x1607
 3348 1600 08       		.uleb128 0x8
 3349 1601 C3000000 		.4byte	0xc3
 3350 1605 00       		.byte	0
 3351 1606 00       		.byte	0
 3352 1607 35       		.uleb128 0x35
 3353 1608 050D0000 		.4byte	.LASF293
 3354 160c 04       		.byte	0x4
 3355 160d 6401     		.2byte	0x164
 3356 160f 13160000 		.4byte	0x1613
 3357 1613 06       		.uleb128 0x6
 3358 1614 F7150000 		.4byte	0x15f7
 3359 1618 36       		.uleb128 0x36
 3360 1619 47100000 		.4byte	.LASF294
 3361 161d 47100000 		.4byte	.LASF294
 3362 1621 03       		.byte	0x3
 3363 1622 6005     		.2byte	0x560
 3364 1624 36       		.uleb128 0x36
 3365 1625 A9060000 		.4byte	.LASF295
 3366 1629 A9060000 		.4byte	.LASF295
 3367 162d 03       		.byte	0x3
 3368 162e 6305     		.2byte	0x563
 3369 1630 36       		.uleb128 0x36
 3370 1631 7A050000 		.4byte	.LASF296
 3371 1635 7A050000 		.4byte	.LASF296
 3372 1639 03       		.byte	0x3
 3373 163a 3005     		.2byte	0x530
 3374 163c 36       		.uleb128 0x36
 3375 163d B7100000 		.4byte	.LASF297
 3376 1641 B7100000 		.4byte	.LASF297
 3377 1645 03       		.byte	0x3
 3378 1646 2F05     		.2byte	0x52f
 3379 1648 36       		.uleb128 0x36
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 160


 3380 1649 DE090000 		.4byte	.LASF298
 3381 164d DE090000 		.4byte	.LASF298
 3382 1651 03       		.byte	0x3
 3383 1652 3305     		.2byte	0x533
 3384 1654 36       		.uleb128 0x36
 3385 1655 55070000 		.4byte	.LASF299
 3386 1659 55070000 		.4byte	.LASF299
 3387 165d 0B       		.byte	0xb
 3388 165e 9203     		.2byte	0x392
 3389 1660 36       		.uleb128 0x36
 3390 1661 C3120000 		.4byte	.LASF300
 3391 1665 C3120000 		.4byte	.LASF300
 3392 1669 03       		.byte	0x3
 3393 166a 3505     		.2byte	0x535
 3394 166c 36       		.uleb128 0x36
 3395 166d E20E0000 		.4byte	.LASF301
 3396 1671 E20E0000 		.4byte	.LASF301
 3397 1675 03       		.byte	0x3
 3398 1676 3105     		.2byte	0x531
 3399 1678 00       		.byte	0
 3400              		.section	.debug_abbrev,"",%progbits
 3401              	.Ldebug_abbrev0:
 3402 0000 01       		.uleb128 0x1
 3403 0001 11       		.uleb128 0x11
 3404 0002 01       		.byte	0x1
 3405 0003 25       		.uleb128 0x25
 3406 0004 0E       		.uleb128 0xe
 3407 0005 13       		.uleb128 0x13
 3408 0006 0B       		.uleb128 0xb
 3409 0007 03       		.uleb128 0x3
 3410 0008 0E       		.uleb128 0xe
 3411 0009 1B       		.uleb128 0x1b
 3412 000a 0E       		.uleb128 0xe
 3413 000b 55       		.uleb128 0x55
 3414 000c 17       		.uleb128 0x17
 3415 000d 11       		.uleb128 0x11
 3416 000e 01       		.uleb128 0x1
 3417 000f 10       		.uleb128 0x10
 3418 0010 17       		.uleb128 0x17
 3419 0011 00       		.byte	0
 3420 0012 00       		.byte	0
 3421 0013 02       		.uleb128 0x2
 3422 0014 24       		.uleb128 0x24
 3423 0015 00       		.byte	0
 3424 0016 0B       		.uleb128 0xb
 3425 0017 0B       		.uleb128 0xb
 3426 0018 3E       		.uleb128 0x3e
 3427 0019 0B       		.uleb128 0xb
 3428 001a 03       		.uleb128 0x3
 3429 001b 0E       		.uleb128 0xe
 3430 001c 00       		.byte	0
 3431 001d 00       		.byte	0
 3432 001e 03       		.uleb128 0x3
 3433 001f 16       		.uleb128 0x16
 3434 0020 00       		.byte	0
 3435 0021 03       		.uleb128 0x3
 3436 0022 0E       		.uleb128 0xe
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 161


 3437 0023 3A       		.uleb128 0x3a
 3438 0024 0B       		.uleb128 0xb
 3439 0025 3B       		.uleb128 0x3b
 3440 0026 0B       		.uleb128 0xb
 3441 0027 49       		.uleb128 0x49
 3442 0028 13       		.uleb128 0x13
 3443 0029 00       		.byte	0
 3444 002a 00       		.byte	0
 3445 002b 04       		.uleb128 0x4
 3446 002c 24       		.uleb128 0x24
 3447 002d 00       		.byte	0
 3448 002e 0B       		.uleb128 0xb
 3449 002f 0B       		.uleb128 0xb
 3450 0030 3E       		.uleb128 0x3e
 3451 0031 0B       		.uleb128 0xb
 3452 0032 03       		.uleb128 0x3
 3453 0033 08       		.uleb128 0x8
 3454 0034 00       		.byte	0
 3455 0035 00       		.byte	0
 3456 0036 05       		.uleb128 0x5
 3457 0037 35       		.uleb128 0x35
 3458 0038 00       		.byte	0
 3459 0039 49       		.uleb128 0x49
 3460 003a 13       		.uleb128 0x13
 3461 003b 00       		.byte	0
 3462 003c 00       		.byte	0
 3463 003d 06       		.uleb128 0x6
 3464 003e 26       		.uleb128 0x26
 3465 003f 00       		.byte	0
 3466 0040 49       		.uleb128 0x49
 3467 0041 13       		.uleb128 0x13
 3468 0042 00       		.byte	0
 3469 0043 00       		.byte	0
 3470 0044 07       		.uleb128 0x7
 3471 0045 01       		.uleb128 0x1
 3472 0046 01       		.byte	0x1
 3473 0047 49       		.uleb128 0x49
 3474 0048 13       		.uleb128 0x13
 3475 0049 01       		.uleb128 0x1
 3476 004a 13       		.uleb128 0x13
 3477 004b 00       		.byte	0
 3478 004c 00       		.byte	0
 3479 004d 08       		.uleb128 0x8
 3480 004e 21       		.uleb128 0x21
 3481 004f 00       		.byte	0
 3482 0050 49       		.uleb128 0x49
 3483 0051 13       		.uleb128 0x13
 3484 0052 2F       		.uleb128 0x2f
 3485 0053 0B       		.uleb128 0xb
 3486 0054 00       		.byte	0
 3487 0055 00       		.byte	0
 3488 0056 09       		.uleb128 0x9
 3489 0057 13       		.uleb128 0x13
 3490 0058 01       		.byte	0x1
 3491 0059 0B       		.uleb128 0xb
 3492 005a 0B       		.uleb128 0xb
 3493 005b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 162


 3494 005c 0B       		.uleb128 0xb
 3495 005d 3B       		.uleb128 0x3b
 3496 005e 0B       		.uleb128 0xb
 3497 005f 01       		.uleb128 0x1
 3498 0060 13       		.uleb128 0x13
 3499 0061 00       		.byte	0
 3500 0062 00       		.byte	0
 3501 0063 0A       		.uleb128 0xa
 3502 0064 0D       		.uleb128 0xd
 3503 0065 00       		.byte	0
 3504 0066 03       		.uleb128 0x3
 3505 0067 0E       		.uleb128 0xe
 3506 0068 3A       		.uleb128 0x3a
 3507 0069 0B       		.uleb128 0xb
 3508 006a 3B       		.uleb128 0x3b
 3509 006b 0B       		.uleb128 0xb
 3510 006c 49       		.uleb128 0x49
 3511 006d 13       		.uleb128 0x13
 3512 006e 38       		.uleb128 0x38
 3513 006f 0B       		.uleb128 0xb
 3514 0070 00       		.byte	0
 3515 0071 00       		.byte	0
 3516 0072 0B       		.uleb128 0xb
 3517 0073 13       		.uleb128 0x13
 3518 0074 01       		.byte	0x1
 3519 0075 0B       		.uleb128 0xb
 3520 0076 05       		.uleb128 0x5
 3521 0077 3A       		.uleb128 0x3a
 3522 0078 0B       		.uleb128 0xb
 3523 0079 3B       		.uleb128 0x3b
 3524 007a 0B       		.uleb128 0xb
 3525 007b 01       		.uleb128 0x1
 3526 007c 13       		.uleb128 0x13
 3527 007d 00       		.byte	0
 3528 007e 00       		.byte	0
 3529 007f 0C       		.uleb128 0xc
 3530 0080 0D       		.uleb128 0xd
 3531 0081 00       		.byte	0
 3532 0082 03       		.uleb128 0x3
 3533 0083 08       		.uleb128 0x8
 3534 0084 3A       		.uleb128 0x3a
 3535 0085 0B       		.uleb128 0xb
 3536 0086 3B       		.uleb128 0x3b
 3537 0087 0B       		.uleb128 0xb
 3538 0088 49       		.uleb128 0x49
 3539 0089 13       		.uleb128 0x13
 3540 008a 38       		.uleb128 0x38
 3541 008b 0B       		.uleb128 0xb
 3542 008c 00       		.byte	0
 3543 008d 00       		.byte	0
 3544 008e 0D       		.uleb128 0xd
 3545 008f 0D       		.uleb128 0xd
 3546 0090 00       		.byte	0
 3547 0091 03       		.uleb128 0x3
 3548 0092 0E       		.uleb128 0xe
 3549 0093 3A       		.uleb128 0x3a
 3550 0094 0B       		.uleb128 0xb
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 163


 3551 0095 3B       		.uleb128 0x3b
 3552 0096 0B       		.uleb128 0xb
 3553 0097 49       		.uleb128 0x49
 3554 0098 13       		.uleb128 0x13
 3555 0099 38       		.uleb128 0x38
 3556 009a 05       		.uleb128 0x5
 3557 009b 00       		.byte	0
 3558 009c 00       		.byte	0
 3559 009d 0E       		.uleb128 0xe
 3560 009e 21       		.uleb128 0x21
 3561 009f 00       		.byte	0
 3562 00a0 49       		.uleb128 0x49
 3563 00a1 13       		.uleb128 0x13
 3564 00a2 2F       		.uleb128 0x2f
 3565 00a3 05       		.uleb128 0x5
 3566 00a4 00       		.byte	0
 3567 00a5 00       		.byte	0
 3568 00a6 0F       		.uleb128 0xf
 3569 00a7 16       		.uleb128 0x16
 3570 00a8 00       		.byte	0
 3571 00a9 03       		.uleb128 0x3
 3572 00aa 0E       		.uleb128 0xe
 3573 00ab 3A       		.uleb128 0x3a
 3574 00ac 0B       		.uleb128 0xb
 3575 00ad 3B       		.uleb128 0x3b
 3576 00ae 05       		.uleb128 0x5
 3577 00af 49       		.uleb128 0x49
 3578 00b0 13       		.uleb128 0x13
 3579 00b1 00       		.byte	0
 3580 00b2 00       		.byte	0
 3581 00b3 10       		.uleb128 0x10
 3582 00b4 0F       		.uleb128 0xf
 3583 00b5 00       		.byte	0
 3584 00b6 0B       		.uleb128 0xb
 3585 00b7 0B       		.uleb128 0xb
 3586 00b8 49       		.uleb128 0x49
 3587 00b9 13       		.uleb128 0x13
 3588 00ba 00       		.byte	0
 3589 00bb 00       		.byte	0
 3590 00bc 11       		.uleb128 0x11
 3591 00bd 15       		.uleb128 0x15
 3592 00be 00       		.byte	0
 3593 00bf 27       		.uleb128 0x27
 3594 00c0 19       		.uleb128 0x19
 3595 00c1 00       		.byte	0
 3596 00c2 00       		.byte	0
 3597 00c3 12       		.uleb128 0x12
 3598 00c4 04       		.uleb128 0x4
 3599 00c5 01       		.byte	0x1
 3600 00c6 0B       		.uleb128 0xb
 3601 00c7 0B       		.uleb128 0xb
 3602 00c8 49       		.uleb128 0x49
 3603 00c9 13       		.uleb128 0x13
 3604 00ca 3A       		.uleb128 0x3a
 3605 00cb 0B       		.uleb128 0xb
 3606 00cc 3B       		.uleb128 0x3b
 3607 00cd 05       		.uleb128 0x5
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 164


 3608 00ce 01       		.uleb128 0x1
 3609 00cf 13       		.uleb128 0x13
 3610 00d0 00       		.byte	0
 3611 00d1 00       		.byte	0
 3612 00d2 13       		.uleb128 0x13
 3613 00d3 28       		.uleb128 0x28
 3614 00d4 00       		.byte	0
 3615 00d5 03       		.uleb128 0x3
 3616 00d6 0E       		.uleb128 0xe
 3617 00d7 1C       		.uleb128 0x1c
 3618 00d8 0B       		.uleb128 0xb
 3619 00d9 00       		.byte	0
 3620 00da 00       		.byte	0
 3621 00db 14       		.uleb128 0x14
 3622 00dc 28       		.uleb128 0x28
 3623 00dd 00       		.byte	0
 3624 00de 03       		.uleb128 0x3
 3625 00df 0E       		.uleb128 0xe
 3626 00e0 1C       		.uleb128 0x1c
 3627 00e1 06       		.uleb128 0x6
 3628 00e2 00       		.byte	0
 3629 00e3 00       		.byte	0
 3630 00e4 15       		.uleb128 0x15
 3631 00e5 13       		.uleb128 0x13
 3632 00e6 01       		.byte	0x1
 3633 00e7 0B       		.uleb128 0xb
 3634 00e8 0B       		.uleb128 0xb
 3635 00e9 3A       		.uleb128 0x3a
 3636 00ea 0B       		.uleb128 0xb
 3637 00eb 3B       		.uleb128 0x3b
 3638 00ec 05       		.uleb128 0x5
 3639 00ed 01       		.uleb128 0x1
 3640 00ee 13       		.uleb128 0x13
 3641 00ef 00       		.byte	0
 3642 00f0 00       		.byte	0
 3643 00f1 16       		.uleb128 0x16
 3644 00f2 0D       		.uleb128 0xd
 3645 00f3 00       		.byte	0
 3646 00f4 03       		.uleb128 0x3
 3647 00f5 0E       		.uleb128 0xe
 3648 00f6 3A       		.uleb128 0x3a
 3649 00f7 0B       		.uleb128 0xb
 3650 00f8 3B       		.uleb128 0x3b
 3651 00f9 05       		.uleb128 0x5
 3652 00fa 49       		.uleb128 0x49
 3653 00fb 13       		.uleb128 0x13
 3654 00fc 38       		.uleb128 0x38
 3655 00fd 0B       		.uleb128 0xb
 3656 00fe 00       		.byte	0
 3657 00ff 00       		.byte	0
 3658 0100 17       		.uleb128 0x17
 3659 0101 2E       		.uleb128 0x2e
 3660 0102 01       		.byte	0x1
 3661 0103 03       		.uleb128 0x3
 3662 0104 0E       		.uleb128 0xe
 3663 0105 3A       		.uleb128 0x3a
 3664 0106 0B       		.uleb128 0xb
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 165


 3665 0107 3B       		.uleb128 0x3b
 3666 0108 05       		.uleb128 0x5
 3667 0109 27       		.uleb128 0x27
 3668 010a 19       		.uleb128 0x19
 3669 010b 49       		.uleb128 0x49
 3670 010c 13       		.uleb128 0x13
 3671 010d 20       		.uleb128 0x20
 3672 010e 0B       		.uleb128 0xb
 3673 010f 01       		.uleb128 0x1
 3674 0110 13       		.uleb128 0x13
 3675 0111 00       		.byte	0
 3676 0112 00       		.byte	0
 3677 0113 18       		.uleb128 0x18
 3678 0114 05       		.uleb128 0x5
 3679 0115 00       		.byte	0
 3680 0116 03       		.uleb128 0x3
 3681 0117 0E       		.uleb128 0xe
 3682 0118 3A       		.uleb128 0x3a
 3683 0119 0B       		.uleb128 0xb
 3684 011a 3B       		.uleb128 0x3b
 3685 011b 05       		.uleb128 0x5
 3686 011c 49       		.uleb128 0x49
 3687 011d 13       		.uleb128 0x13
 3688 011e 00       		.byte	0
 3689 011f 00       		.byte	0
 3690 0120 19       		.uleb128 0x19
 3691 0121 34       		.uleb128 0x34
 3692 0122 00       		.byte	0
 3693 0123 03       		.uleb128 0x3
 3694 0124 0E       		.uleb128 0xe
 3695 0125 3A       		.uleb128 0x3a
 3696 0126 0B       		.uleb128 0xb
 3697 0127 3B       		.uleb128 0x3b
 3698 0128 05       		.uleb128 0x5
 3699 0129 49       		.uleb128 0x49
 3700 012a 13       		.uleb128 0x13
 3701 012b 00       		.byte	0
 3702 012c 00       		.byte	0
 3703 012d 1A       		.uleb128 0x1a
 3704 012e 2E       		.uleb128 0x2e
 3705 012f 01       		.byte	0x1
 3706 0130 03       		.uleb128 0x3
 3707 0131 0E       		.uleb128 0xe
 3708 0132 3A       		.uleb128 0x3a
 3709 0133 0B       		.uleb128 0xb
 3710 0134 3B       		.uleb128 0x3b
 3711 0135 05       		.uleb128 0x5
 3712 0136 27       		.uleb128 0x27
 3713 0137 19       		.uleb128 0x19
 3714 0138 20       		.uleb128 0x20
 3715 0139 0B       		.uleb128 0xb
 3716 013a 01       		.uleb128 0x1
 3717 013b 13       		.uleb128 0x13
 3718 013c 00       		.byte	0
 3719 013d 00       		.byte	0
 3720 013e 1B       		.uleb128 0x1b
 3721 013f 2E       		.uleb128 0x2e
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 166


 3722 0140 00       		.byte	0
 3723 0141 03       		.uleb128 0x3
 3724 0142 0E       		.uleb128 0xe
 3725 0143 3A       		.uleb128 0x3a
 3726 0144 0B       		.uleb128 0xb
 3727 0145 3B       		.uleb128 0x3b
 3728 0146 0B       		.uleb128 0xb
 3729 0147 27       		.uleb128 0x27
 3730 0148 19       		.uleb128 0x19
 3731 0149 20       		.uleb128 0x20
 3732 014a 0B       		.uleb128 0xb
 3733 014b 00       		.byte	0
 3734 014c 00       		.byte	0
 3735 014d 1C       		.uleb128 0x1c
 3736 014e 2E       		.uleb128 0x2e
 3737 014f 01       		.byte	0x1
 3738 0150 03       		.uleb128 0x3
 3739 0151 0E       		.uleb128 0xe
 3740 0152 3A       		.uleb128 0x3a
 3741 0153 0B       		.uleb128 0xb
 3742 0154 3B       		.uleb128 0x3b
 3743 0155 0B       		.uleb128 0xb
 3744 0156 27       		.uleb128 0x27
 3745 0157 19       		.uleb128 0x19
 3746 0158 20       		.uleb128 0x20
 3747 0159 0B       		.uleb128 0xb
 3748 015a 01       		.uleb128 0x1
 3749 015b 13       		.uleb128 0x13
 3750 015c 00       		.byte	0
 3751 015d 00       		.byte	0
 3752 015e 1D       		.uleb128 0x1d
 3753 015f 05       		.uleb128 0x5
 3754 0160 00       		.byte	0
 3755 0161 03       		.uleb128 0x3
 3756 0162 0E       		.uleb128 0xe
 3757 0163 3A       		.uleb128 0x3a
 3758 0164 0B       		.uleb128 0xb
 3759 0165 3B       		.uleb128 0x3b
 3760 0166 0B       		.uleb128 0xb
 3761 0167 49       		.uleb128 0x49
 3762 0168 13       		.uleb128 0x13
 3763 0169 00       		.byte	0
 3764 016a 00       		.byte	0
 3765 016b 1E       		.uleb128 0x1e
 3766 016c 2E       		.uleb128 0x2e
 3767 016d 00       		.byte	0
 3768 016e 03       		.uleb128 0x3
 3769 016f 0E       		.uleb128 0xe
 3770 0170 3A       		.uleb128 0x3a
 3771 0171 0B       		.uleb128 0xb
 3772 0172 3B       		.uleb128 0x3b
 3773 0173 05       		.uleb128 0x5
 3774 0174 27       		.uleb128 0x27
 3775 0175 19       		.uleb128 0x19
 3776 0176 20       		.uleb128 0x20
 3777 0177 0B       		.uleb128 0xb
 3778 0178 00       		.byte	0
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 167


 3779 0179 00       		.byte	0
 3780 017a 1F       		.uleb128 0x1f
 3781 017b 2E       		.uleb128 0x2e
 3782 017c 01       		.byte	0x1
 3783 017d 3F       		.uleb128 0x3f
 3784 017e 19       		.uleb128 0x19
 3785 017f 03       		.uleb128 0x3
 3786 0180 0E       		.uleb128 0xe
 3787 0181 3A       		.uleb128 0x3a
 3788 0182 0B       		.uleb128 0xb
 3789 0183 3B       		.uleb128 0x3b
 3790 0184 0B       		.uleb128 0xb
 3791 0185 27       		.uleb128 0x27
 3792 0186 19       		.uleb128 0x19
 3793 0187 11       		.uleb128 0x11
 3794 0188 01       		.uleb128 0x1
 3795 0189 12       		.uleb128 0x12
 3796 018a 06       		.uleb128 0x6
 3797 018b 40       		.uleb128 0x40
 3798 018c 18       		.uleb128 0x18
 3799 018d 9742     		.uleb128 0x2117
 3800 018f 19       		.uleb128 0x19
 3801 0190 01       		.uleb128 0x1
 3802 0191 13       		.uleb128 0x13
 3803 0192 00       		.byte	0
 3804 0193 00       		.byte	0
 3805 0194 20       		.uleb128 0x20
 3806 0195 05       		.uleb128 0x5
 3807 0196 00       		.byte	0
 3808 0197 03       		.uleb128 0x3
 3809 0198 0E       		.uleb128 0xe
 3810 0199 3A       		.uleb128 0x3a
 3811 019a 0B       		.uleb128 0xb
 3812 019b 3B       		.uleb128 0x3b
 3813 019c 0B       		.uleb128 0xb
 3814 019d 49       		.uleb128 0x49
 3815 019e 13       		.uleb128 0x13
 3816 019f 02       		.uleb128 0x2
 3817 01a0 17       		.uleb128 0x17
 3818 01a1 00       		.byte	0
 3819 01a2 00       		.byte	0
 3820 01a3 21       		.uleb128 0x21
 3821 01a4 34       		.uleb128 0x34
 3822 01a5 00       		.byte	0
 3823 01a6 03       		.uleb128 0x3
 3824 01a7 0E       		.uleb128 0xe
 3825 01a8 3A       		.uleb128 0x3a
 3826 01a9 0B       		.uleb128 0xb
 3827 01aa 3B       		.uleb128 0x3b
 3828 01ab 0B       		.uleb128 0xb
 3829 01ac 49       		.uleb128 0x49
 3830 01ad 13       		.uleb128 0x13
 3831 01ae 1C       		.uleb128 0x1c
 3832 01af 0B       		.uleb128 0xb
 3833 01b0 00       		.byte	0
 3834 01b1 00       		.byte	0
 3835 01b2 22       		.uleb128 0x22
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 168


 3836 01b3 1D       		.uleb128 0x1d
 3837 01b4 01       		.byte	0x1
 3838 01b5 31       		.uleb128 0x31
 3839 01b6 13       		.uleb128 0x13
 3840 01b7 11       		.uleb128 0x11
 3841 01b8 01       		.uleb128 0x1
 3842 01b9 12       		.uleb128 0x12
 3843 01ba 06       		.uleb128 0x6
 3844 01bb 58       		.uleb128 0x58
 3845 01bc 0B       		.uleb128 0xb
 3846 01bd 59       		.uleb128 0x59
 3847 01be 0B       		.uleb128 0xb
 3848 01bf 01       		.uleb128 0x1
 3849 01c0 13       		.uleb128 0x13
 3850 01c1 00       		.byte	0
 3851 01c2 00       		.byte	0
 3852 01c3 23       		.uleb128 0x23
 3853 01c4 1D       		.uleb128 0x1d
 3854 01c5 01       		.byte	0x1
 3855 01c6 31       		.uleb128 0x31
 3856 01c7 13       		.uleb128 0x13
 3857 01c8 11       		.uleb128 0x11
 3858 01c9 01       		.uleb128 0x1
 3859 01ca 12       		.uleb128 0x12
 3860 01cb 06       		.uleb128 0x6
 3861 01cc 58       		.uleb128 0x58
 3862 01cd 0B       		.uleb128 0xb
 3863 01ce 59       		.uleb128 0x59
 3864 01cf 0B       		.uleb128 0xb
 3865 01d0 00       		.byte	0
 3866 01d1 00       		.byte	0
 3867 01d2 24       		.uleb128 0x24
 3868 01d3 05       		.uleb128 0x5
 3869 01d4 00       		.byte	0
 3870 01d5 31       		.uleb128 0x31
 3871 01d6 13       		.uleb128 0x13
 3872 01d7 02       		.uleb128 0x2
 3873 01d8 17       		.uleb128 0x17
 3874 01d9 00       		.byte	0
 3875 01da 00       		.byte	0
 3876 01db 25       		.uleb128 0x25
 3877 01dc 0B       		.uleb128 0xb
 3878 01dd 01       		.byte	0x1
 3879 01de 11       		.uleb128 0x11
 3880 01df 01       		.uleb128 0x1
 3881 01e0 12       		.uleb128 0x12
 3882 01e1 06       		.uleb128 0x6
 3883 01e2 00       		.byte	0
 3884 01e3 00       		.byte	0
 3885 01e4 26       		.uleb128 0x26
 3886 01e5 34       		.uleb128 0x34
 3887 01e6 00       		.byte	0
 3888 01e7 31       		.uleb128 0x31
 3889 01e8 13       		.uleb128 0x13
 3890 01e9 02       		.uleb128 0x2
 3891 01ea 17       		.uleb128 0x17
 3892 01eb 00       		.byte	0
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 169


 3893 01ec 00       		.byte	0
 3894 01ed 27       		.uleb128 0x27
 3895 01ee 898201   		.uleb128 0x4109
 3896 01f1 01       		.byte	0x1
 3897 01f2 11       		.uleb128 0x11
 3898 01f3 01       		.uleb128 0x1
 3899 01f4 31       		.uleb128 0x31
 3900 01f5 13       		.uleb128 0x13
 3901 01f6 00       		.byte	0
 3902 01f7 00       		.byte	0
 3903 01f8 28       		.uleb128 0x28
 3904 01f9 8A8201   		.uleb128 0x410a
 3905 01fc 00       		.byte	0
 3906 01fd 02       		.uleb128 0x2
 3907 01fe 18       		.uleb128 0x18
 3908 01ff 9142     		.uleb128 0x2111
 3909 0201 18       		.uleb128 0x18
 3910 0202 00       		.byte	0
 3911 0203 00       		.byte	0
 3912 0204 29       		.uleb128 0x29
 3913 0205 898201   		.uleb128 0x4109
 3914 0208 01       		.byte	0x1
 3915 0209 11       		.uleb128 0x11
 3916 020a 01       		.uleb128 0x1
 3917 020b 31       		.uleb128 0x31
 3918 020c 13       		.uleb128 0x13
 3919 020d 01       		.uleb128 0x1
 3920 020e 13       		.uleb128 0x13
 3921 020f 00       		.byte	0
 3922 0210 00       		.byte	0
 3923 0211 2A       		.uleb128 0x2a
 3924 0212 05       		.uleb128 0x5
 3925 0213 00       		.byte	0
 3926 0214 03       		.uleb128 0x3
 3927 0215 0E       		.uleb128 0xe
 3928 0216 3A       		.uleb128 0x3a
 3929 0217 0B       		.uleb128 0xb
 3930 0218 3B       		.uleb128 0x3b
 3931 0219 0B       		.uleb128 0xb
 3932 021a 49       		.uleb128 0x49
 3933 021b 13       		.uleb128 0x13
 3934 021c 02       		.uleb128 0x2
 3935 021d 18       		.uleb128 0x18
 3936 021e 00       		.byte	0
 3937 021f 00       		.byte	0
 3938 0220 2B       		.uleb128 0x2b
 3939 0221 2E       		.uleb128 0x2e
 3940 0222 00       		.byte	0
 3941 0223 3F       		.uleb128 0x3f
 3942 0224 19       		.uleb128 0x19
 3943 0225 03       		.uleb128 0x3
 3944 0226 0E       		.uleb128 0xe
 3945 0227 3A       		.uleb128 0x3a
 3946 0228 0B       		.uleb128 0xb
 3947 0229 3B       		.uleb128 0x3b
 3948 022a 05       		.uleb128 0x5
 3949 022b 27       		.uleb128 0x27
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 170


 3950 022c 19       		.uleb128 0x19
 3951 022d 11       		.uleb128 0x11
 3952 022e 01       		.uleb128 0x1
 3953 022f 12       		.uleb128 0x12
 3954 0230 06       		.uleb128 0x6
 3955 0231 40       		.uleb128 0x40
 3956 0232 18       		.uleb128 0x18
 3957 0233 9742     		.uleb128 0x2117
 3958 0235 19       		.uleb128 0x19
 3959 0236 00       		.byte	0
 3960 0237 00       		.byte	0
 3961 0238 2C       		.uleb128 0x2c
 3962 0239 2E       		.uleb128 0x2e
 3963 023a 01       		.byte	0x1
 3964 023b 3F       		.uleb128 0x3f
 3965 023c 19       		.uleb128 0x19
 3966 023d 03       		.uleb128 0x3
 3967 023e 0E       		.uleb128 0xe
 3968 023f 3A       		.uleb128 0x3a
 3969 0240 0B       		.uleb128 0xb
 3970 0241 3B       		.uleb128 0x3b
 3971 0242 05       		.uleb128 0x5
 3972 0243 27       		.uleb128 0x27
 3973 0244 19       		.uleb128 0x19
 3974 0245 11       		.uleb128 0x11
 3975 0246 01       		.uleb128 0x1
 3976 0247 12       		.uleb128 0x12
 3977 0248 06       		.uleb128 0x6
 3978 0249 40       		.uleb128 0x40
 3979 024a 18       		.uleb128 0x18
 3980 024b 9742     		.uleb128 0x2117
 3981 024d 19       		.uleb128 0x19
 3982 024e 01       		.uleb128 0x1
 3983 024f 13       		.uleb128 0x13
 3984 0250 00       		.byte	0
 3985 0251 00       		.byte	0
 3986 0252 2D       		.uleb128 0x2d
 3987 0253 05       		.uleb128 0x5
 3988 0254 00       		.byte	0
 3989 0255 03       		.uleb128 0x3
 3990 0256 0E       		.uleb128 0xe
 3991 0257 3A       		.uleb128 0x3a
 3992 0258 0B       		.uleb128 0xb
 3993 0259 3B       		.uleb128 0x3b
 3994 025a 05       		.uleb128 0x5
 3995 025b 49       		.uleb128 0x49
 3996 025c 13       		.uleb128 0x13
 3997 025d 02       		.uleb128 0x2
 3998 025e 17       		.uleb128 0x17
 3999 025f 00       		.byte	0
 4000 0260 00       		.byte	0
 4001 0261 2E       		.uleb128 0x2e
 4002 0262 34       		.uleb128 0x34
 4003 0263 00       		.byte	0
 4004 0264 03       		.uleb128 0x3
 4005 0265 0E       		.uleb128 0xe
 4006 0266 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 171


 4007 0267 0B       		.uleb128 0xb
 4008 0268 3B       		.uleb128 0x3b
 4009 0269 05       		.uleb128 0x5
 4010 026a 49       		.uleb128 0x49
 4011 026b 13       		.uleb128 0x13
 4012 026c 02       		.uleb128 0x2
 4013 026d 17       		.uleb128 0x17
 4014 026e 00       		.byte	0
 4015 026f 00       		.byte	0
 4016 0270 2F       		.uleb128 0x2f
 4017 0271 1D       		.uleb128 0x1d
 4018 0272 01       		.byte	0x1
 4019 0273 31       		.uleb128 0x31
 4020 0274 13       		.uleb128 0x13
 4021 0275 11       		.uleb128 0x11
 4022 0276 01       		.uleb128 0x1
 4023 0277 12       		.uleb128 0x12
 4024 0278 06       		.uleb128 0x6
 4025 0279 58       		.uleb128 0x58
 4026 027a 0B       		.uleb128 0xb
 4027 027b 59       		.uleb128 0x59
 4028 027c 05       		.uleb128 0x5
 4029 027d 00       		.byte	0
 4030 027e 00       		.byte	0
 4031 027f 30       		.uleb128 0x30
 4032 0280 2E       		.uleb128 0x2e
 4033 0281 01       		.byte	0x1
 4034 0282 3F       		.uleb128 0x3f
 4035 0283 19       		.uleb128 0x19
 4036 0284 03       		.uleb128 0x3
 4037 0285 0E       		.uleb128 0xe
 4038 0286 3A       		.uleb128 0x3a
 4039 0287 0B       		.uleb128 0xb
 4040 0288 3B       		.uleb128 0x3b
 4041 0289 05       		.uleb128 0x5
 4042 028a 27       		.uleb128 0x27
 4043 028b 19       		.uleb128 0x19
 4044 028c 49       		.uleb128 0x49
 4045 028d 13       		.uleb128 0x13
 4046 028e 11       		.uleb128 0x11
 4047 028f 01       		.uleb128 0x1
 4048 0290 12       		.uleb128 0x12
 4049 0291 06       		.uleb128 0x6
 4050 0292 40       		.uleb128 0x40
 4051 0293 18       		.uleb128 0x18
 4052 0294 9742     		.uleb128 0x2117
 4053 0296 19       		.uleb128 0x19
 4054 0297 01       		.uleb128 0x1
 4055 0298 13       		.uleb128 0x13
 4056 0299 00       		.byte	0
 4057 029a 00       		.byte	0
 4058 029b 31       		.uleb128 0x31
 4059 029c 34       		.uleb128 0x34
 4060 029d 00       		.byte	0
 4061 029e 03       		.uleb128 0x3
 4062 029f 0E       		.uleb128 0xe
 4063 02a0 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 172


 4064 02a1 0B       		.uleb128 0xb
 4065 02a2 3B       		.uleb128 0x3b
 4066 02a3 05       		.uleb128 0x5
 4067 02a4 49       		.uleb128 0x49
 4068 02a5 13       		.uleb128 0x13
 4069 02a6 1C       		.uleb128 0x1c
 4070 02a7 0B       		.uleb128 0xb
 4071 02a8 00       		.byte	0
 4072 02a9 00       		.byte	0
 4073 02aa 32       		.uleb128 0x32
 4074 02ab 898201   		.uleb128 0x4109
 4075 02ae 00       		.byte	0
 4076 02af 11       		.uleb128 0x11
 4077 02b0 01       		.uleb128 0x1
 4078 02b1 31       		.uleb128 0x31
 4079 02b2 13       		.uleb128 0x13
 4080 02b3 00       		.byte	0
 4081 02b4 00       		.byte	0
 4082 02b5 33       		.uleb128 0x33
 4083 02b6 34       		.uleb128 0x34
 4084 02b7 00       		.byte	0
 4085 02b8 03       		.uleb128 0x3
 4086 02b9 0E       		.uleb128 0xe
 4087 02ba 3A       		.uleb128 0x3a
 4088 02bb 0B       		.uleb128 0xb
 4089 02bc 3B       		.uleb128 0x3b
 4090 02bd 0B       		.uleb128 0xb
 4091 02be 49       		.uleb128 0x49
 4092 02bf 13       		.uleb128 0x13
 4093 02c0 3F       		.uleb128 0x3f
 4094 02c1 19       		.uleb128 0x19
 4095 02c2 3C       		.uleb128 0x3c
 4096 02c3 19       		.uleb128 0x19
 4097 02c4 00       		.byte	0
 4098 02c5 00       		.byte	0
 4099 02c6 34       		.uleb128 0x34
 4100 02c7 34       		.uleb128 0x34
 4101 02c8 00       		.byte	0
 4102 02c9 03       		.uleb128 0x3
 4103 02ca 0E       		.uleb128 0xe
 4104 02cb 3A       		.uleb128 0x3a
 4105 02cc 0B       		.uleb128 0xb
 4106 02cd 3B       		.uleb128 0x3b
 4107 02ce 0B       		.uleb128 0xb
 4108 02cf 49       		.uleb128 0x49
 4109 02d0 13       		.uleb128 0x13
 4110 02d1 3F       		.uleb128 0x3f
 4111 02d2 19       		.uleb128 0x19
 4112 02d3 02       		.uleb128 0x2
 4113 02d4 18       		.uleb128 0x18
 4114 02d5 00       		.byte	0
 4115 02d6 00       		.byte	0
 4116 02d7 35       		.uleb128 0x35
 4117 02d8 34       		.uleb128 0x34
 4118 02d9 00       		.byte	0
 4119 02da 03       		.uleb128 0x3
 4120 02db 0E       		.uleb128 0xe
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 173


 4121 02dc 3A       		.uleb128 0x3a
 4122 02dd 0B       		.uleb128 0xb
 4123 02de 3B       		.uleb128 0x3b
 4124 02df 05       		.uleb128 0x5
 4125 02e0 49       		.uleb128 0x49
 4126 02e1 13       		.uleb128 0x13
 4127 02e2 3F       		.uleb128 0x3f
 4128 02e3 19       		.uleb128 0x19
 4129 02e4 3C       		.uleb128 0x3c
 4130 02e5 19       		.uleb128 0x19
 4131 02e6 00       		.byte	0
 4132 02e7 00       		.byte	0
 4133 02e8 36       		.uleb128 0x36
 4134 02e9 2E       		.uleb128 0x2e
 4135 02ea 00       		.byte	0
 4136 02eb 3F       		.uleb128 0x3f
 4137 02ec 19       		.uleb128 0x19
 4138 02ed 3C       		.uleb128 0x3c
 4139 02ee 19       		.uleb128 0x19
 4140 02ef 6E       		.uleb128 0x6e
 4141 02f0 0E       		.uleb128 0xe
 4142 02f1 03       		.uleb128 0x3
 4143 02f2 0E       		.uleb128 0xe
 4144 02f3 3A       		.uleb128 0x3a
 4145 02f4 0B       		.uleb128 0xb
 4146 02f5 3B       		.uleb128 0x3b
 4147 02f6 05       		.uleb128 0x5
 4148 02f7 00       		.byte	0
 4149 02f8 00       		.byte	0
 4150 02f9 00       		.byte	0
 4151              		.section	.debug_loc,"",%progbits
 4152              	.Ldebug_loc0:
 4153              	.LLST0:
 4154 0000 00000000 		.4byte	.LVL0
 4155 0004 12000000 		.4byte	.LVL2
 4156 0008 0100     		.2byte	0x1
 4157 000a 50       		.byte	0x50
 4158 000b 12000000 		.4byte	.LVL2
 4159 000f 8E000000 		.4byte	.LVL13
 4160 0013 0100     		.2byte	0x1
 4161 0015 54       		.byte	0x54
 4162 0016 8E000000 		.4byte	.LVL13
 4163 001a 9C000000 		.4byte	.LFE188
 4164 001e 0400     		.2byte	0x4
 4165 0020 F3       		.byte	0xf3
 4166 0021 01       		.uleb128 0x1
 4167 0022 50       		.byte	0x50
 4168 0023 9F       		.byte	0x9f
 4169 0024 00000000 		.4byte	0
 4170 0028 00000000 		.4byte	0
 4171              	.LLST1:
 4172 002c 04000000 		.4byte	.LVL1
 4173 0030 14000000 		.4byte	.LVL3
 4174 0034 0200     		.2byte	0x2
 4175 0036 30       		.byte	0x30
 4176 0037 9F       		.byte	0x9f
 4177 0038 00000000 		.4byte	0
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 174


 4178 003c 00000000 		.4byte	0
 4179              	.LLST3:
 4180 0040 04000000 		.4byte	.LVL1
 4181 0044 14000000 		.4byte	.LVL3
 4182 0048 0600     		.2byte	0x6
 4183 004a 0C       		.byte	0xc
 4184 004b 01004A00 		.4byte	0x4a0001
 4185 004f 9F       		.byte	0x9f
 4186 0050 00000000 		.4byte	0
 4187 0054 00000000 		.4byte	0
 4188              	.LLST4:
 4189 0058 16000000 		.4byte	.LVL4
 4190 005c 2A000000 		.4byte	.LVL5
 4191 0060 0100     		.2byte	0x1
 4192 0062 53       		.byte	0x53
 4193 0063 2A000000 		.4byte	.LVL5
 4194 0067 30000000 		.4byte	.LVL6
 4195 006b 0200     		.2byte	0x2
 4196 006d 74       		.byte	0x74
 4197 006e 10       		.sleb128 16
 4198 006f 00000000 		.4byte	0
 4199 0073 00000000 		.4byte	0
 4200              	.LLST6:
 4201 0077 16000000 		.4byte	.LVL4
 4202 007b 30000000 		.4byte	.LVL6
 4203 007f 0200     		.2byte	0x2
 4204 0081 30       		.byte	0x30
 4205 0082 9F       		.byte	0x9f
 4206 0083 00000000 		.4byte	0
 4207 0087 00000000 		.4byte	0
 4208              	.LLST8:
 4209 008b 16000000 		.4byte	.LVL4
 4210 008f 30000000 		.4byte	.LVL6
 4211 0093 0600     		.2byte	0x6
 4212 0095 0C       		.byte	0xc
 4213 0096 01004A00 		.4byte	0x4a0001
 4214 009a 9F       		.byte	0x9f
 4215 009b 00000000 		.4byte	0
 4216 009f 00000000 		.4byte	0
 4217              	.LLST9:
 4218 00a3 30000000 		.4byte	.LVL6
 4219 00a7 5C000000 		.4byte	.LVL7
 4220 00ab 0200     		.2byte	0x2
 4221 00ad 30       		.byte	0x30
 4222 00ae 9F       		.byte	0x9f
 4223 00af 00000000 		.4byte	0
 4224 00b3 00000000 		.4byte	0
 4225              	.LLST11:
 4226 00b7 30000000 		.4byte	.LVL6
 4227 00bb 5C000000 		.4byte	.LVL7
 4228 00bf 0600     		.2byte	0x6
 4229 00c1 0C       		.byte	0xc
 4230 00c2 01004A00 		.4byte	0x4a0001
 4231 00c6 9F       		.byte	0x9f
 4232 00c7 00000000 		.4byte	0
 4233 00cb 00000000 		.4byte	0
 4234              	.LLST12:
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 175


 4235 00cf 6E000000 		.4byte	.LVL9
 4236 00d3 7C000000 		.4byte	.LVL10
 4237 00d7 0200     		.2byte	0x2
 4238 00d9 31       		.byte	0x31
 4239 00da 9F       		.byte	0x9f
 4240 00db 00000000 		.4byte	0
 4241 00df 00000000 		.4byte	0
 4242              	.LLST13:
 4243 00e3 6E000000 		.4byte	.LVL9
 4244 00e7 7C000000 		.4byte	.LVL10
 4245 00eb 0600     		.2byte	0x6
 4246 00ed 0C       		.byte	0xc
 4247 00ee 00001D41 		.4byte	0x411d0000
 4248 00f2 9F       		.byte	0x9f
 4249 00f3 00000000 		.4byte	0
 4250 00f7 00000000 		.4byte	0
 4251              	.LLST14:
 4252 00fb 82000000 		.4byte	.LVL11
 4253 00ff 8E000000 		.4byte	.LVL12
 4254 0103 0200     		.2byte	0x2
 4255 0105 31       		.byte	0x31
 4256 0106 9F       		.byte	0x9f
 4257 0107 00000000 		.4byte	0
 4258 010b 00000000 		.4byte	0
 4259              	.LLST15:
 4260 010f 82000000 		.4byte	.LVL11
 4261 0113 8E000000 		.4byte	.LVL12
 4262 0117 0600     		.2byte	0x6
 4263 0119 0C       		.byte	0xc
 4264 011a 00001D41 		.4byte	0x411d0000
 4265 011e 9F       		.byte	0x9f
 4266 011f 00000000 		.4byte	0
 4267 0123 00000000 		.4byte	0
 4268              	.LLST16:
 4269 0127 00000000 		.4byte	.LVL17
 4270 012b 06000000 		.4byte	.LVL18
 4271 012f 0100     		.2byte	0x1
 4272 0131 50       		.byte	0x50
 4273 0132 06000000 		.4byte	.LVL18
 4274 0136 2C000000 		.4byte	.LFE194
 4275 013a 0400     		.2byte	0x4
 4276 013c F3       		.byte	0xf3
 4277 013d 01       		.uleb128 0x1
 4278 013e 50       		.byte	0x50
 4279 013f 9F       		.byte	0x9f
 4280 0140 00000000 		.4byte	0
 4281 0144 00000000 		.4byte	0
 4282              	.LLST17:
 4283 0148 08000000 		.4byte	.LVL19
 4284 014c 1C000000 		.4byte	.LVL22
 4285 0150 0100     		.2byte	0x1
 4286 0152 54       		.byte	0x54
 4287 0153 1C000000 		.4byte	.LVL22
 4288 0157 2C000000 		.4byte	.LFE194
 4289 015b 0500     		.2byte	0x5
 4290 015d 72       		.byte	0x72
 4291 015e 00       		.sleb128 0
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 176


 4292 015f 73       		.byte	0x73
 4293 0160 00       		.sleb128 0
 4294 0161 22       		.byte	0x22
 4295 0162 00000000 		.4byte	0
 4296 0166 00000000 		.4byte	0
 4297              	.LLST18:
 4298 016a 08000000 		.4byte	.LVL19
 4299 016e 1C000000 		.4byte	.LVL21
 4300 0172 0100     		.2byte	0x1
 4301 0174 54       		.byte	0x54
 4302 0175 00000000 		.4byte	0
 4303 0179 00000000 		.4byte	0
 4304              	.LLST19:
 4305 017d 08000000 		.4byte	.LVL19
 4306 0181 1C000000 		.4byte	.LVL21
 4307 0185 0600     		.2byte	0x6
 4308 0187 0C       		.byte	0xc
 4309 0188 00001D41 		.4byte	0x411d0000
 4310 018c 9F       		.byte	0x9f
 4311 018d 00000000 		.4byte	0
 4312 0191 00000000 		.4byte	0
 4313              	.LLST20:
 4314 0195 00000000 		.4byte	.LVL23
 4315 0199 1A000000 		.4byte	.LVL25
 4316 019d 0100     		.2byte	0x1
 4317 019f 50       		.byte	0x50
 4318 01a0 1A000000 		.4byte	.LVL25
 4319 01a4 2C000000 		.4byte	.LVL29
 4320 01a8 0100     		.2byte	0x1
 4321 01aa 54       		.byte	0x54
 4322 01ab 2C000000 		.4byte	.LVL29
 4323 01af 48000000 		.4byte	.LFE195
 4324 01b3 0200     		.2byte	0x2
 4325 01b5 73       		.byte	0x73
 4326 01b6 20       		.sleb128 32
 4327 01b7 00000000 		.4byte	0
 4328 01bb 00000000 		.4byte	0
 4329              	.LLST21:
 4330 01bf 12000000 		.4byte	.LVL24
 4331 01c3 1C000000 		.4byte	.LVL26
 4332 01c7 0100     		.2byte	0x1
 4333 01c9 53       		.byte	0x53
 4334 01ca 1C000000 		.4byte	.LVL26
 4335 01ce 27000000 		.4byte	.LVL27-1
 4336 01d2 0200     		.2byte	0x2
 4337 01d4 72       		.byte	0x72
 4338 01d5 04       		.sleb128 4
 4339 01d6 00000000 		.4byte	0
 4340 01da 00000000 		.4byte	0
 4341              	.LLST22:
 4342 01de 1A000000 		.4byte	.LVL25
 4343 01e2 2C000000 		.4byte	.LVL28
 4344 01e6 0100     		.2byte	0x1
 4345 01e8 54       		.byte	0x54
 4346 01e9 00000000 		.4byte	0
 4347 01ed 00000000 		.4byte	0
 4348              	.LLST23:
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 177


 4349 01f1 1A000000 		.4byte	.LVL25
 4350 01f5 2C000000 		.4byte	.LVL28
 4351 01f9 0600     		.2byte	0x6
 4352 01fb 0C       		.byte	0xc
 4353 01fc 00001D41 		.4byte	0x411d0000
 4354 0200 9F       		.byte	0x9f
 4355 0201 00000000 		.4byte	0
 4356 0205 00000000 		.4byte	0
 4357              	.LLST24:
 4358 0209 00000000 		.4byte	.LVL30
 4359 020d 06000000 		.4byte	.LVL32
 4360 0211 0100     		.2byte	0x1
 4361 0213 50       		.byte	0x50
 4362 0214 06000000 		.4byte	.LVL32
 4363 0218 1C000000 		.4byte	.LFE196
 4364 021c 0400     		.2byte	0x4
 4365 021e F3       		.byte	0xf3
 4366 021f 01       		.uleb128 0x1
 4367 0220 50       		.byte	0x50
 4368 0221 9F       		.byte	0x9f
 4369 0222 00000000 		.4byte	0
 4370 0226 00000000 		.4byte	0
 4371              	.LLST25:
 4372 022a 04000000 		.4byte	.LVL31
 4373 022e 14000000 		.4byte	.LVL36
 4374 0232 0200     		.2byte	0x2
 4375 0234 30       		.byte	0x30
 4376 0235 9F       		.byte	0x9f
 4377 0236 14000000 		.4byte	.LVL36
 4378 023a 1C000000 		.4byte	.LFE196
 4379 023e 0100     		.2byte	0x1
 4380 0240 50       		.byte	0x50
 4381 0241 00000000 		.4byte	0
 4382 0245 00000000 		.4byte	0
 4383              	.LLST26:
 4384 0249 0A000000 		.4byte	.LVL33
 4385 024d 10000000 		.4byte	.LVL34
 4386 0251 0100     		.2byte	0x1
 4387 0253 50       		.byte	0x50
 4388 0254 12000000 		.4byte	.LVL35
 4389 0258 14000000 		.4byte	.LVL36
 4390 025c 0100     		.2byte	0x1
 4391 025e 50       		.byte	0x50
 4392 025f 00000000 		.4byte	0
 4393 0263 00000000 		.4byte	0
 4394              	.LLST27:
 4395 0267 00000000 		.4byte	.LVL41
 4396 026b 05000000 		.4byte	.LVL42-1
 4397 026f 0100     		.2byte	0x1
 4398 0271 50       		.byte	0x50
 4399 0272 05000000 		.4byte	.LVL42-1
 4400 0276 08000000 		.4byte	.LFE187
 4401 027a 0400     		.2byte	0x4
 4402 027c F3       		.byte	0xf3
 4403 027d 01       		.uleb128 0x1
 4404 027e 50       		.byte	0x50
 4405 027f 9F       		.byte	0x9f
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 178


 4406 0280 00000000 		.4byte	0
 4407 0284 00000000 		.4byte	0
 4408              	.LLST28:
 4409 0288 00000000 		.4byte	.LVL43
 4410 028c 23000000 		.4byte	.LVL46-1
 4411 0290 0100     		.2byte	0x1
 4412 0292 50       		.byte	0x50
 4413 0293 23000000 		.4byte	.LVL46-1
 4414 0297 4C000000 		.4byte	.LVL50
 4415 029b 0100     		.2byte	0x1
 4416 029d 54       		.byte	0x54
 4417 029e 4C000000 		.4byte	.LVL50
 4418 02a2 5C000000 		.4byte	.LFE189
 4419 02a6 0400     		.2byte	0x4
 4420 02a8 F3       		.byte	0xf3
 4421 02a9 01       		.uleb128 0x1
 4422 02aa 50       		.byte	0x50
 4423 02ab 9F       		.byte	0x9f
 4424 02ac 00000000 		.4byte	0
 4425 02b0 00000000 		.4byte	0
 4426              	.LLST29:
 4427 02b4 00000000 		.4byte	.LVL43
 4428 02b8 23000000 		.4byte	.LVL46-1
 4429 02bc 0100     		.2byte	0x1
 4430 02be 51       		.byte	0x51
 4431 02bf 23000000 		.4byte	.LVL46-1
 4432 02c3 4C000000 		.4byte	.LVL51
 4433 02c7 0100     		.2byte	0x1
 4434 02c9 55       		.byte	0x55
 4435 02ca 4C000000 		.4byte	.LVL51
 4436 02ce 5C000000 		.4byte	.LFE189
 4437 02d2 0400     		.2byte	0x4
 4438 02d4 F3       		.byte	0xf3
 4439 02d5 01       		.uleb128 0x1
 4440 02d6 51       		.byte	0x51
 4441 02d7 9F       		.byte	0x9f
 4442 02d8 00000000 		.4byte	0
 4443 02dc 00000000 		.4byte	0
 4444              	.LLST30:
 4445 02e0 0A000000 		.4byte	.LVL44
 4446 02e4 14000000 		.4byte	.LVL45
 4447 02e8 0600     		.2byte	0x6
 4448 02ea 0C       		.byte	0xc
 4449 02eb 00001D41 		.4byte	0x411d0000
 4450 02ef 9F       		.byte	0x9f
 4451 02f0 00000000 		.4byte	0
 4452 02f4 00000000 		.4byte	0
 4453              		.section	.debug_aranges,"",%progbits
 4454 0000 74000000 		.4byte	0x74
 4455 0004 0200     		.2byte	0x2
 4456 0006 00000000 		.4byte	.Ldebug_info0
 4457 000a 04       		.byte	0x4
 4458 000b 00       		.byte	0
 4459 000c 0000     		.2byte	0
 4460 000e 0000     		.2byte	0
 4461 0010 00000000 		.4byte	.LFB188
 4462 0014 9C000000 		.4byte	.LFE188-.LFB188
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 179


 4463 0018 00000000 		.4byte	.LFB190
 4464 001c 24000000 		.4byte	.LFE190-.LFB190
 4465 0020 00000000 		.4byte	.LFB191
 4466 0024 28000000 		.4byte	.LFE191-.LFB191
 4467 0028 00000000 		.4byte	.LFB192
 4468 002c 02000000 		.4byte	.LFE192-.LFB192
 4469 0030 00000000 		.4byte	.LFB193
 4470 0034 02000000 		.4byte	.LFE193-.LFB193
 4471 0038 00000000 		.4byte	.LFB194
 4472 003c 2C000000 		.4byte	.LFE194-.LFB194
 4473 0040 00000000 		.4byte	.LFB195
 4474 0044 48000000 		.4byte	.LFE195-.LFB195
 4475 0048 00000000 		.4byte	.LFB196
 4476 004c 1C000000 		.4byte	.LFE196-.LFB196
 4477 0050 00000000 		.4byte	.LFB197
 4478 0054 28000000 		.4byte	.LFE197-.LFB197
 4479 0058 00000000 		.4byte	.LFB186
 4480 005c 28000000 		.4byte	.LFE186-.LFB186
 4481 0060 00000000 		.4byte	.LFB187
 4482 0064 08000000 		.4byte	.LFE187-.LFB187
 4483 0068 00000000 		.4byte	.LFB189
 4484 006c 5C000000 		.4byte	.LFE189-.LFB189
 4485 0070 00000000 		.4byte	0
 4486 0074 00000000 		.4byte	0
 4487              		.section	.debug_ranges,"",%progbits
 4488              	.Ldebug_ranges0:
 4489 0000 00000000 		.4byte	.LFB188
 4490 0004 9C000000 		.4byte	.LFE188
 4491 0008 00000000 		.4byte	.LFB190
 4492 000c 24000000 		.4byte	.LFE190
 4493 0010 00000000 		.4byte	.LFB191
 4494 0014 28000000 		.4byte	.LFE191
 4495 0018 00000000 		.4byte	.LFB192
 4496 001c 02000000 		.4byte	.LFE192
 4497 0020 00000000 		.4byte	.LFB193
 4498 0024 02000000 		.4byte	.LFE193
 4499 0028 00000000 		.4byte	.LFB194
 4500 002c 2C000000 		.4byte	.LFE194
 4501 0030 00000000 		.4byte	.LFB195
 4502 0034 48000000 		.4byte	.LFE195
 4503 0038 00000000 		.4byte	.LFB196
 4504 003c 1C000000 		.4byte	.LFE196
 4505 0040 00000000 		.4byte	.LFB197
 4506 0044 28000000 		.4byte	.LFE197
 4507 0048 00000000 		.4byte	.LFB186
 4508 004c 28000000 		.4byte	.LFE186
 4509 0050 00000000 		.4byte	.LFB187
 4510 0054 08000000 		.4byte	.LFE187
 4511 0058 00000000 		.4byte	.LFB189
 4512 005c 5C000000 		.4byte	.LFE189
 4513 0060 00000000 		.4byte	0
 4514 0064 00000000 		.4byte	0
 4515              		.section	.debug_line,"",%progbits
 4516              	.Ldebug_line0:
 4517 0000 5A040000 		.section	.debug_str,"MS",%progbits,1
 4517      0200F702 
 4517      00000201 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 180


 4517      FB0E0D00 
 4517      01010101 
 4518              	.LASF136:
 4519 0000 666C6173 		.ascii	"flashCtlMainWs1Freq\000"
 4519      6843746C 
 4519      4D61696E 
 4519      57733146 
 4519      72657100 
 4520              	.LASF25:
 4521 0014 50455249 		.ascii	"PERI_TR_GR_V1_Type\000"
 4521      5F54525F 
 4521      47525F56 
 4521      315F5479 
 4521      706500
 4522              	.LASF19:
 4523 0027 52455345 		.ascii	"RESERVED\000"
 4523      52564544 
 4523      00
 4524              	.LASF71:
 4525 0030 52414E47 		.ascii	"RANGE_INTR_MASKED\000"
 4525      455F494E 
 4525      54525F4D 
 4525      41534B45 
 4525      4400
 4526              	.LASF56:
 4527 0042 4348414E 		.ascii	"CHAN_WORK_UPDATED\000"
 4527      5F574F52 
 4527      4B5F5550 
 4527      44415445 
 4527      4400
 4528              	.LASF178:
 4529 0054 6970634C 		.ascii	"ipcLockStatusOffset\000"
 4529      6F636B53 
 4529      74617475 
 4529      734F6666 
 4529      73657400 
 4530              	.LASF248:
 4531 0068 43795F53 		.ascii	"Cy_SysClk_PeriphDisableDivider\000"
 4531      7973436C 
 4531      6B5F5065 
 4531      72697068 
 4531      44697361 
 4532              	.LASF289:
 4533 0087 63795F64 		.ascii	"cy_device\000"
 4533      65766963 
 4533      6500
 4534              	.LASF163:
 4535 0091 63707573 		.ascii	"cpussCm0ClockCtlOffset\000"
 4535      73436D30 
 4535      436C6F63 
 4535      6B43746C 
 4535      4F666673 
 4536              	.LASF122:
 4537 00a8 70657269 		.ascii	"periClockNr\000"
 4537      436C6F63 
 4537      6B4E7200 
 4538              	.LASF182:
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 181


 4539 00b4 63686172 		.ascii	"char\000"
 4539      00
 4540              	.LASF33:
 4541 00b9 4449565F 		.ascii	"DIV_8_CTL\000"
 4541      385F4354 
 4541      4C00
 4542              	.LASF96:
 4543 00c3 75646242 		.ascii	"udbBase\000"
 4543      61736500 
 4544              	.LASF235:
 4545 00cb 43595F53 		.ascii	"CY_SYSCLK_DIV_8_BIT\000"
 4545      5953434C 
 4545      4B5F4449 
 4545      565F385F 
 4545      42495400 
 4546              	.LASF51:
 4547 00df 4348414E 		.ascii	"CHAN_EN\000"
 4547      5F454E00 
 4548              	.LASF95:
 4549 00e7 70657269 		.ascii	"periBase\000"
 4549      42617365 
 4549      00
 4550              	.LASF45:
 4551 00f0 4354524C 		.ascii	"CTRL\000"
 4551      00
 4552              	.LASF171:
 4553 00f5 63707573 		.ascii	"cpussCm0NmiCtlOffset\000"
 4553      73436D30 
 4553      4E6D6943 
 4553      746C4F66 
 4553      66736574 
 4554              	.LASF141:
 4555 010a 64774368 		.ascii	"dwChSize\000"
 4555      53697A65 
 4555      00
 4556              	.LASF232:
 4557 0113 43595F53 		.ascii	"CY_SYSCLK_TIMEOUT\000"
 4557      5953434C 
 4557      4B5F5449 
 4557      4D454F55 
 4557      5400
 4558              	.LASF12:
 4559 0125 756E7369 		.ascii	"unsigned int\000"
 4559      676E6564 
 4559      20696E74 
 4559      00
 4560              	.LASF288:
 4561 0132 72657374 		.ascii	"restart\000"
 4561      61727400 
 4562              	.LASF72:
 4563 013a 494E5452 		.ascii	"INTR_CAUSE\000"
 4563      5F434155 
 4563      534500
 4564              	.LASF123:
 4565 0145 736D6966 		.ascii	"smifDeviceNr\000"
 4565      44657669 
 4565      63654E72 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 182


 4565      00
 4566              	.LASF207:
 4567 0152 43595F53 		.ascii	"CY_SAR_RANGE_COND_OUTSIDE\000"
 4567      41525F52 
 4567      414E4745 
 4567      5F434F4E 
 4567      445F4F55 
 4568              	.LASF153:
 4569 016c 70657269 		.ascii	"periDivCmdPaTypeSelPos\000"
 4569      44697643 
 4569      6D645061 
 4569      54797065 
 4569      53656C50 
 4570              	.LASF247:
 4571 0183 64697669 		.ascii	"dividerNum\000"
 4571      6465724E 
 4571      756D00
 4572              	.LASF115:
 4573 018e 63707573 		.ascii	"cpussFlashPaSize\000"
 4573      73466C61 
 4573      73685061 
 4573      53697A65 
 4573      00
 4574              	.LASF199:
 4575 019f 63795F65 		.ascii	"cy_en_sar_switch_state_t\000"
 4575      6E5F7361 
 4575      725F7377 
 4575      69746368 
 4575      5F737461 
 4576              	.LASF230:
 4577 01b8 43595F53 		.ascii	"CY_SYSCLK_SUCCESS\000"
 4577      5953434C 
 4577      4B5F5355 
 4577      43434553 
 4577      5300
 4578              	.LASF58:
 4579 01ca 4348414E 		.ascii	"CHAN_WORK_NEWVALUE\000"
 4579      5F574F52 
 4579      4B5F4E45 
 4579      5756414C 
 4579      554500
 4580              	.LASF93:
 4581 01dd 63707573 		.ascii	"cpussBase\000"
 4581      73426173 
 4581      6500
 4582              	.LASF35:
 4583 01e7 4449565F 		.ascii	"DIV_16_5_CTL\000"
 4583      31365F35 
 4583      5F43544C 
 4583      00
 4584              	.LASF240:
 4585 01f4 6368616E 		.ascii	"channelBase\000"
 4585      6E656C42 
 4585      61736500 
 4586              	.LASF41:
 4587 0200 5050555F 		.ascii	"PPU_PR\000"
 4587      505200
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 183


 4588              	.LASF117:
 4589 0207 63707573 		.ascii	"cpussFmIrq\000"
 4589      73466D49 
 4589      727100
 4590              	.LASF242:
 4591 0212 6877436F 		.ascii	"hwConfigStc\000"
 4591      6E666967 
 4591      53746300 
 4592              	.LASF118:
 4593 021e 63707573 		.ascii	"cpussNotConnectedIrq\000"
 4593      734E6F74 
 4593      436F6E6E 
 4593      65637465 
 4593      64497271 
 4594              	.LASF239:
 4595 0233 63795F65 		.ascii	"cy_en_divider_types_t\000"
 4595      6E5F6469 
 4595      76696465 
 4595      725F7479 
 4595      7065735F 
 4596              	.LASF0:
 4597 0249 73686F72 		.ascii	"short int\000"
 4597      7420696E 
 4597      7400
 4598              	.LASF64:
 4599 0253 53415455 		.ascii	"SATURATE_INTR\000"
 4599      52415445 
 4599      5F494E54 
 4599      5200
 4600              	.LASF47:
 4601 0261 53414D50 		.ascii	"SAMPLE_TIME01\000"
 4601      4C455F54 
 4601      494D4530 
 4601      3100
 4602              	.LASF195:
 4603 026f 43595F53 		.ascii	"CY_SAR_WAIT_FOR_RESULT\000"
 4603      41525F57 
 4603      4149545F 
 4603      464F525F 
 4603      52455355 
 4604              	.LASF76:
 4605 0286 494E4A5F 		.ascii	"INJ_RESULT\000"
 4605      52455355 
 4605      4C5400
 4606              	.LASF152:
 4607 0291 70657269 		.ascii	"periDivCmdPaDivSelPos\000"
 4607      44697643 
 4607      6D645061 
 4607      44697653 
 4607      656C506F 
 4608              	.LASF61:
 4609 02a7 494E5452 		.ascii	"INTR_SET\000"
 4609      5F534554 
 4609      00
 4610              	.LASF129:
 4611 02b0 63727970 		.ascii	"cryptoMemSize\000"
 4611      746F4D65 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 184


 4611      6D53697A 
 4611      6500
 4612              	.LASF270:
 4613 02be 6D6F6465 		.ascii	"mode\000"
 4613      00
 4614              	.LASF222:
 4615 02c3 73617449 		.ascii	"satIntrMask\000"
 4615      6E74724D 
 4615      61736B00 
 4616              	.LASF193:
 4617 02cf 63795F65 		.ascii	"cy_en_sar_start_convert_sel_t\000"
 4617      6E5F7361 
 4617      725F7374 
 4617      6172745F 
 4617      636F6E76 
 4618              	.LASF149:
 4619 02ed 70657269 		.ascii	"periTrGrSize\000"
 4619      54724772 
 4619      53697A65 
 4619      00
 4620              	.LASF177:
 4621 02fa 69706353 		.ascii	"ipcStructSize\000"
 4621      74727563 
 4621      7453697A 
 4621      6500
 4622              	.LASF305:
 4623 0308 4144435F 		.ascii	"ADC_IsEndConversion\000"
 4623      4973456E 
 4623      64436F6E 
 4623      76657273 
 4623      696F6E00 
 4624              	.LASF111:
 4625 031c 70726F74 		.ascii	"protVersion\000"
 4625      56657273 
 4625      696F6E00 
 4626              	.LASF204:
 4627 0328 43595F53 		.ascii	"CY_SAR_RANGE_COND_BELOW\000"
 4627      41525F52 
 4627      414E4745 
 4627      5F434F4E 
 4627      445F4245 
 4628              	.LASF91:
 4629 0340 5341525F 		.ascii	"SAR_Type\000"
 4629      54797065 
 4629      00
 4630              	.LASF151:
 4631 0349 70657269 		.ascii	"periDivCmdTypeSelPos\000"
 4631      44697643 
 4631      6D645479 
 4631      70655365 
 4631      6C506F73 
 4632              	.LASF168:
 4633 035e 63707573 		.ascii	"cpussTrimRamCtlOffset\000"
 4633      73547269 
 4633      6D52616D 
 4633      43746C4F 
 4633      66667365 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 185


 4634              	.LASF179:
 4635 0374 63795F73 		.ascii	"cy_stc_device_t\000"
 4635      74635F64 
 4635      65766963 
 4635      655F7400 
 4636              	.LASF30:
 4637 0384 50455249 		.ascii	"PERI_PPU_PR_V1_Type\000"
 4637      5F505055 
 4637      5F50525F 
 4637      56315F54 
 4637      79706500 
 4638              	.LASF290:
 4639 0398 4144435F 		.ascii	"ADC_initVar\000"
 4639      696E6974 
 4639      56617200 
 4640              	.LASF16:
 4641 03a4 75696E74 		.ascii	"uint32_t\000"
 4641      33325F74 
 4641      00
 4642              	.LASF254:
 4643 03ad 43795F53 		.ascii	"Cy_SAR_SetVssaVminusSwitch\000"
 4643      41525F53 
 4643      65745673 
 4643      7361566D 
 4643      696E7573 
 4644              	.LASF161:
 4645 03c8 6770696F 		.ascii	"gpioPrtCfgOutOffset\000"
 4645      50727443 
 4645      66674F75 
 4645      744F6666 
 4645      73657400 
 4646              	.LASF60:
 4647 03dc 494E5452 		.ascii	"INTR\000"
 4647      00
 4648              	.LASF183:
 4649 03e1 666C6F61 		.ascii	"float\000"
 4649      7400
 4650              	.LASF104:
 4651 03e7 63727970 		.ascii	"cryptoVersion\000"
 4651      746F5665 
 4651      7273696F 
 4651      6E00
 4652              	.LASF133:
 4653 03f5 666C6173 		.ascii	"flashProgramDelay\000"
 4653      6850726F 
 4653      6772616D 
 4653      44656C61 
 4653      7900
 4654              	.LASF252:
 4655 0407 62617365 		.ascii	"base\000"
 4655      00
 4656              	.LASF241:
 4657 040c 6E756D43 		.ascii	"numChannels\000"
 4657      68616E6E 
 4657      656C7300 
 4658              	.LASF20:
 4659 0418 534C5F43 		.ascii	"SL_CTL\000"
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 186


 4659      544C00
 4660              	.LASF94:
 4661 041f 666C6173 		.ascii	"flashcBase\000"
 4661      68634261 
 4661      736500
 4662              	.LASF14:
 4663 042a 696E7431 		.ascii	"int16_t\000"
 4663      365F7400 
 4664              	.LASF160:
 4665 0432 6770696F 		.ascii	"gpioPrtCfgInOffset\000"
 4665      50727443 
 4665      6667496E 
 4665      4F666673 
 4665      657400
 4666              	.LASF281:
 4667 0445 72657375 		.ascii	"result\000"
 4667      6C7400
 4668              	.LASF11:
 4669 044c 6C6F6E67 		.ascii	"long long unsigned int\000"
 4669      206C6F6E 
 4669      6720756E 
 4669      7369676E 
 4669      65642069 
 4670              	.LASF157:
 4671 0463 70657269 		.ascii	"periDiv24_5CtlOffset\000"
 4671      44697632 
 4671      345F3543 
 4671      746C4F66 
 4671      66736574 
 4672              	.LASF162:
 4673 0478 6770696F 		.ascii	"gpioPrtCfgSioOffset\000"
 4673      50727443 
 4673      66675369 
 4673      6F4F6666 
 4673      73657400 
 4674              	.LASF77:
 4675 048c 52455345 		.ascii	"RESERVED7\000"
 4675      52564544 
 4675      3700
 4676              	.LASF116:
 4677 0496 63707573 		.ascii	"cpussIpc0Irq\000"
 4677      73497063 
 4677      30497271 
 4677      00
 4678              	.LASF282:
 4679 04a3 4144435F 		.ascii	"ADC_Init\000"
 4679      496E6974 
 4679      00
 4680              	.LASF48:
 4681 04ac 53414D50 		.ascii	"SAMPLE_TIME23\000"
 4681      4C455F54 
 4681      494D4532 
 4681      3300
 4682              	.LASF217:
 4683 04ba 72616E67 		.ascii	"rangeThres\000"
 4683      65546872 
 4683      657300
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 187


 4684              	.LASF5:
 4685 04c5 5F5F7569 		.ascii	"__uint16_t\000"
 4685      6E743136 
 4685      5F7400
 4686              	.LASF205:
 4687 04d0 43595F53 		.ascii	"CY_SAR_RANGE_COND_INSIDE\000"
 4687      41525F52 
 4687      414E4745 
 4687      5F434F4E 
 4687      445F494E 
 4688              	.LASF272:
 4689 04e9 4144435F 		.ascii	"ADC_IRQ_Disable\000"
 4689      4952515F 
 4689      44697361 
 4689      626C6500 
 4690              	.LASF229:
 4691 04f9 63795F73 		.ascii	"cy_stc_sar_config_t\000"
 4691      74635F73 
 4691      61725F63 
 4691      6F6E6669 
 4691      675F7400 
 4692              	.LASF213:
 4693 050d 6374726C 		.ascii	"ctrl\000"
 4693      00
 4694              	.LASF284:
 4695 0512 4144435F 		.ascii	"ADC_Start\000"
 4695      53746172 
 4695      7400
 4696              	.LASF74:
 4697 051c 494E4A5F 		.ascii	"INJ_CHAN_CONFIG\000"
 4697      4348414E 
 4697      5F434F4E 
 4697      46494700 
 4698              	.LASF138:
 4699 052c 666C6173 		.ascii	"flashCtlMainWs3Freq\000"
 4699      6843746C 
 4699      4D61696E 
 4699      57733346 
 4699      72657100 
 4700              	.LASF120:
 4701 0540 73727373 		.ascii	"srssNumPll\000"
 4701      4E756D50 
 4701      6C6C00
 4702              	.LASF194:
 4703 054b 43595F53 		.ascii	"CY_SAR_RETURN_STATUS\000"
 4703      41525F52 
 4703      45545552 
 4703      4E5F5354 
 4703      41545553 
 4704              	.LASF38:
 4705 0560 54525F43 		.ascii	"TR_CMD\000"
 4705      4D4400
 4706              	.LASF203:
 4707 0567 43595F53 		.ascii	"CY_SAR_MUX_SWITCH0\000"
 4707      41525F4D 
 4707      55585F53 
 4707      57495443 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 188


 4707      483000
 4708              	.LASF296:
 4709 057a 43795F53 		.ascii	"Cy_SAR_DeInit\000"
 4709      41525F44 
 4709      65496E69 
 4709      7400
 4710              	.LASF234:
 4711 0588 63795F65 		.ascii	"cy_en_sysclk_status_t\000"
 4711      6E5F7379 
 4711      73636C6B 
 4711      5F737461 
 4711      7475735F 
 4712              	.LASF6:
 4713 059e 73686F72 		.ascii	"short unsigned int\000"
 4713      7420756E 
 4713      7369676E 
 4713      65642069 
 4713      6E7400
 4714              	.LASF131:
 4715 05b1 666C6173 		.ascii	"flashPipeRequired\000"
 4715      68506970 
 4715      65526571 
 4715      75697265 
 4715      6400
 4716              	.LASF70:
 4717 05c3 52414E47 		.ascii	"RANGE_INTR_MASK\000"
 4717      455F494E 
 4717      54525F4D 
 4717      41534B00 
 4718              	.LASF283:
 4719 05d3 636F6E66 		.ascii	"configNum\000"
 4719      69674E75 
 4719      6D00
 4720              	.LASF228:
 4721 05dd 5F426F6F 		.ascii	"_Bool\000"
 4721      6C00
 4722              	.LASF50:
 4723 05e3 52414E47 		.ascii	"RANGE_COND\000"
 4723      455F434F 
 4723      4E4400
 4724              	.LASF135:
 4725 05ee 666C6173 		.ascii	"flashCtlMainWs0Freq\000"
 4725      6843746C 
 4725      4D61696E 
 4725      57733046 
 4725      72657100 
 4726              	.LASF36:
 4727 0602 4449565F 		.ascii	"DIV_24_5_CTL\000"
 4727      32345F35 
 4727      5F43544C 
 4727      00
 4728              	.LASF145:
 4729 060f 64775374 		.ascii	"dwStatusChIdxMsk\000"
 4729      61747573 
 4729      43684964 
 4729      784D736B 
 4729      00
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 189


 4730              	.LASF210:
 4731 0620 43595F53 		.ascii	"CY_SAR_INTR_EOS_MASK\000"
 4731      41525F49 
 4731      4E54525F 
 4731      454F535F 
 4731      4D41534B 
 4732              	.LASF99:
 4733 0635 6770696F 		.ascii	"gpioBase\000"
 4733      42617365 
 4733      00
 4734              	.LASF187:
 4735 063e 43595F53 		.ascii	"CY_SAR_BAD_PARAM\000"
 4735      41525F42 
 4735      41445F50 
 4735      4152414D 
 4735      00
 4736              	.LASF266:
 4737 064f 4144435F 		.ascii	"ADC_InitConfig\000"
 4737      496E6974 
 4737      436F6E66 
 4737      696700
 4738              	.LASF278:
 4739 065e 6368616E 		.ascii	"chanCount\000"
 4739      436F756E 
 4739      7400
 4740              	.LASF34:
 4741 0668 4449565F 		.ascii	"DIV_16_CTL\000"
 4741      31365F43 
 4741      544C00
 4742              	.LASF18:
 4743 0673 434C4F43 		.ascii	"CLOCK_CTL\000"
 4743      4B5F4354 
 4743      4C00
 4744              	.LASF262:
 4745 067d 656E6162 		.ascii	"enableMask\000"
 4745      6C654D61 
 4745      736B00
 4746              	.LASF170:
 4747 0688 63707573 		.ascii	"cpussSysTickCtlOffset\000"
 4747      73537973 
 4747      5469636B 
 4747      43746C4F 
 4747      66667365 
 4748              	.LASF126:
 4749 069e 75646250 		.ascii	"udbPresent\000"
 4749      72657365 
 4749      6E7400
 4750              	.LASF295:
 4751 06a9 43795F53 		.ascii	"Cy_SAR_SetSwitchSarSeqCtrl\000"
 4751      41525F53 
 4751      65745377 
 4751      69746368 
 4751      53617253 
 4752              	.LASF144:
 4753 06c4 64775374 		.ascii	"dwStatusChIdxPos\000"
 4753      61747573 
 4753      43684964 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 190


 4753      78506F73 
 4753      00
 4754              	.LASF90:
 4755 06d5 5341525F 		.ascii	"SAR_V1_Type\000"
 4755      56315F54 
 4755      79706500 
 4756              	.LASF227:
 4757 06e1 76726566 		.ascii	"vrefMvValue\000"
 4757      4D765661 
 4757      6C756500 
 4758              	.LASF67:
 4759 06ed 53415455 		.ascii	"SATURATE_INTR_MASKED\000"
 4759      52415445 
 4759      5F494E54 
 4759      525F4D41 
 4759      534B4544 
 4760              	.LASF24:
 4761 0702 54525F4F 		.ascii	"TR_OUT_CTL\000"
 4761      55545F43 
 4761      544C00
 4762              	.LASF65:
 4763 070d 53415455 		.ascii	"SATURATE_INTR_SET\000"
 4763      52415445 
 4763      5F494E54 
 4763      525F5345 
 4763      5400
 4764              	.LASF40:
 4765 071f 54525F47 		.ascii	"TR_GR\000"
 4765      5200
 4766              	.LASF277:
 4767 0725 4144435F 		.ascii	"ADC_SetChanMask\000"
 4767      53657443 
 4767      68616E4D 
 4767      61736B00 
 4768              	.LASF202:
 4769 0735 63795F65 		.ascii	"cy_en_sar_switch_sar_seq_ctrl_t\000"
 4769      6E5F7361 
 4769      725F7377 
 4769      69746368 
 4769      5F736172 
 4770              	.LASF299:
 4771 0755 43795F53 		.ascii	"Cy_SysLib_AssertFailed\000"
 4771      79734C69 
 4771      625F4173 
 4771      73657274 
 4771      4661696C 
 4772              	.LASF219:
 4773 076c 6368616E 		.ascii	"chanEn\000"
 4773      456E00
 4774              	.LASF156:
 4775 0773 70657269 		.ascii	"periDiv16_5CtlOffset\000"
 4775      44697631 
 4775      365F3543 
 4775      746C4F66 
 4775      66736574 
 4776              	.LASF246:
 4777 0788 64697669 		.ascii	"dividerType\000"
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 191


 4777      64657254 
 4777      79706500 
 4778              	.LASF127:
 4779 0794 73797350 		.ascii	"sysPmSimoPresent\000"
 4779      6D53696D 
 4779      6F507265 
 4779      73656E74 
 4779      00
 4780              	.LASF59:
 4781 07a5 4348414E 		.ascii	"CHAN_RESULT_NEWVALUE\000"
 4781      5F524553 
 4781      554C545F 
 4781      4E455756 
 4781      414C5545 
 4782              	.LASF79:
 4783 07ba 4156475F 		.ascii	"AVG_STAT\000"
 4783      53544154 
 4783      00
 4784              	.LASF250:
 4785 07c3 64697669 		.ascii	"dividerValue\000"
 4785      64657256 
 4785      616C7565 
 4785      00
 4786              	.LASF13:
 4787 07d0 75696E74 		.ascii	"uint8_t\000"
 4787      385F7400 
 4788              	.LASF190:
 4789 07d8 63795F65 		.ascii	"cy_en_sar_status_t\000"
 4789      6E5F7361 
 4789      725F7374 
 4789      61747573 
 4789      5F7400
 4790              	.LASF150:
 4791 07eb 70657269 		.ascii	"periDivCmdDivSelMsk\000"
 4791      44697643 
 4791      6D644469 
 4791      7653656C 
 4791      4D736B00 
 4792              	.LASF186:
 4793 07ff 43595F53 		.ascii	"CY_SAR_SUCCESS\000"
 4793      41525F53 
 4793      55434345 
 4793      535300
 4794              	.LASF69:
 4795 080e 52414E47 		.ascii	"RANGE_INTR_SET\000"
 4795      455F494E 
 4795      54525F53 
 4795      455400
 4796              	.LASF245:
 4797 081d 4144435F 		.ascii	"ADC_CONFIG_STRUCT\000"
 4797      434F4E46 
 4797      49475F53 
 4797      54525543 
 4797      5400
 4798              	.LASF225:
 4799 082f 6D757853 		.ascii	"muxSwitchSqCtrl\000"
 4799      77697463 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 192


 4799      68537143 
 4799      74726C00 
 4800              	.LASF218:
 4801 083f 72616E67 		.ascii	"rangeCond\000"
 4801      65436F6E 
 4801      6400
 4802              	.LASF174:
 4803 0849 63707573 		.ascii	"cpussRam0Ctl0\000"
 4803      7352616D 
 4803      3043746C 
 4803      3000
 4804              	.LASF10:
 4805 0857 6C6F6E67 		.ascii	"long long int\000"
 4805      206C6F6E 
 4805      6720696E 
 4805      7400
 4806              	.LASF101:
 4807 0865 69706342 		.ascii	"ipcBase\000"
 4807      61736500 
 4808              	.LASF142:
 4809 086d 64774368 		.ascii	"dwChCtlPrioPos\000"
 4809      43746C50 
 4809      72696F50 
 4809      6F7300
 4810              	.LASF102:
 4811 087c 63727970 		.ascii	"cryptoBase\000"
 4811      746F4261 
 4811      736500
 4812              	.LASF211:
 4813 0887 43595F53 		.ascii	"CY_SAR_INTR_OVERFLOW_MASK\000"
 4813      41525F49 
 4813      4E54525F 
 4813      4F564552 
 4813      464C4F57 
 4814              	.LASF261:
 4815 08a1 43795F53 		.ascii	"Cy_SAR_SetChanMask\000"
 4815      41525F53 
 4815      65744368 
 4815      616E4D61 
 4815      736B00
 4816              	.LASF212:
 4817 08b4 43595F53 		.ascii	"CY_SAR_INTR_FW_COLLISION_MASK\000"
 4817      41525F49 
 4817      4E54525F 
 4817      46575F43 
 4817      4F4C4C49 
 4818              	.LASF132:
 4819 08d2 666C6173 		.ascii	"flashWriteDelay\000"
 4819      68577269 
 4819      74654465 
 4819      6C617900 
 4820              	.LASF302:
 4821 08e2 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4821      43313120 
 4821      352E342E 
 4821      31203230 
 4821      31363036 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 193


 4822 0915 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0plus -mthumb -"
 4822      20726576 
 4822      6973696F 
 4822      6E203233 
 4822      37373135 
 4823 0948 67202D4F 		.ascii	"g -Og -ffunction-sections -ffat-lto-objects\000"
 4823      67202D66 
 4823      66756E63 
 4823      74696F6E 
 4823      2D736563 
 4824              	.LASF43:
 4825 0974 5050555F 		.ascii	"PPU_GR\000"
 4825      475200
 4826              	.LASF249:
 4827 097b 43795F53 		.ascii	"Cy_SysClk_PeriphSetDivider\000"
 4827      7973436C 
 4827      6B5F5065 
 4827      72697068 
 4827      53657444 
 4828              	.LASF4:
 4829 0996 5F5F696E 		.ascii	"__int16_t\000"
 4829      7431365F 
 4829      7400
 4830              	.LASF258:
 4831 09a0 4144435F 		.ascii	"ADC_intSarClock_Disable\000"
 4831      696E7453 
 4831      6172436C 
 4831      6F636B5F 
 4831      44697361 
 4832              	.LASF271:
 4833 09b8 4144435F 		.ascii	"ADC_IRQ_Enable\000"
 4833      4952515F 
 4833      456E6162 
 4833      6C6500
 4834              	.LASF291:
 4835 09c7 4144435F 		.ascii	"ADC_selected\000"
 4835      73656C65 
 4835      63746564 
 4835      00
 4836              	.LASF98:
 4837 09d4 6873696F 		.ascii	"hsiomBase\000"
 4837      6D426173 
 4837      6500
 4838              	.LASF298:
 4839 09de 43795F53 		.ascii	"Cy_SAR_StartConvert\000"
 4839      41525F53 
 4839      74617274 
 4839      436F6E76 
 4839      65727400 
 4840              	.LASF55:
 4841 09f2 4348414E 		.ascii	"CHAN_RESULT\000"
 4841      5F524553 
 4841      554C5400 
 4842              	.LASF164:
 4843 09fe 63707573 		.ascii	"cpussCm4ClockCtlOffset\000"
 4843      73436D34 
 4843      436C6F63 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 194


 4843      6B43746C 
 4843      4F666673 
 4844              	.LASF175:
 4845 0a15 63707573 		.ascii	"cpussRam1Ctl0\000"
 4845      7352616D 
 4845      3143746C 
 4845      3000
 4846              	.LASF148:
 4847 0a23 70657269 		.ascii	"periTrGrOffset\000"
 4847      54724772 
 4847      4F666673 
 4847      657400
 4848              	.LASF68:
 4849 0a32 52414E47 		.ascii	"RANGE_INTR\000"
 4849      455F494E 
 4849      545200
 4850              	.LASF114:
 4851 0a3d 63707573 		.ascii	"cpussDwChNr\000"
 4851      73447743 
 4851      684E7200 
 4852              	.LASF287:
 4853 0a49 4144435F 		.ascii	"ADC_SelectConfig\000"
 4853      53656C65 
 4853      6374436F 
 4853      6E666967 
 4853      00
 4854              	.LASF257:
 4855 0a5a 4144435F 		.ascii	"ADC_intSarClock_Enable\000"
 4855      696E7453 
 4855      6172436C 
 4855      6F636B5F 
 4855      456E6162 
 4856              	.LASF62:
 4857 0a71 494E5452 		.ascii	"INTR_MASK\000"
 4857      5F4D4153 
 4857      4B00
 4858              	.LASF256:
 4859 0a7b 4144435F 		.ascii	"ADC_intSarClock_SetDivider\000"
 4859      696E7453 
 4859      6172436C 
 4859      6F636B5F 
 4859      53657444 
 4860              	.LASF46:
 4861 0a96 53414D50 		.ascii	"SAMPLE_CTRL\000"
 4861      4C455F43 
 4861      54524C00 
 4862              	.LASF286:
 4863 0aa2 75736572 		.ascii	"userIsr\000"
 4863      49737200 
 4864              	.LASF188:
 4865 0aaa 43595F53 		.ascii	"CY_SAR_TIMEOUT\000"
 4865      41525F54 
 4865      494D454F 
 4865      555400
 4866              	.LASF185:
 4867 0ab9 75696E74 		.ascii	"uint32\000"
 4867      333200
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 195


 4868              	.LASF112:
 4869 0ac0 63707573 		.ascii	"cpussIpcNr\000"
 4869      73497063 
 4869      4E7200
 4870              	.LASF82:
 4871 0acb 4D55585F 		.ascii	"MUX_SWITCH_CLEAR0\000"
 4871      53574954 
 4871      43485F43 
 4871      4C454152 
 4871      3000
 4872              	.LASF274:
 4873 0add 6D61736B 		.ascii	"mask\000"
 4873      00
 4874              	.LASF124:
 4875 0ae2 70617373 		.ascii	"passSarChannels\000"
 4875      53617243 
 4875      68616E6E 
 4875      656C7300 
 4876              	.LASF176:
 4877 0af2 63707573 		.ascii	"cpussRam2Ctl0\000"
 4877      7352616D 
 4877      3243746C 
 4877      3000
 4878              	.LASF191:
 4879 0b00 43595F53 		.ascii	"CY_SAR_START_CONVERT_SINGLE_SHOT\000"
 4879      41525F53 
 4879      54415254 
 4879      5F434F4E 
 4879      56455254 
 4880              	.LASF52:
 4881 0b21 53544152 		.ascii	"START_CTRL\000"
 4881      545F4354 
 4881      524C00
 4882              	.LASF237:
 4883 0b2c 43595F53 		.ascii	"CY_SYSCLK_DIV_16_5_BIT\000"
 4883      5953434C 
 4883      4B5F4449 
 4883      565F3136 
 4883      5F355F42 
 4884              	.LASF155:
 4885 0b43 70657269 		.ascii	"periDiv16CtlOffset\000"
 4885      44697631 
 4885      3643746C 
 4885      4F666673 
 4885      657400
 4886              	.LASF224:
 4887 0b56 6D757853 		.ascii	"muxSwitch\000"
 4887      77697463 
 4887      6800
 4888              	.LASF268:
 4889 0b60 4144435F 		.ascii	"ADC_SetConvertMode\000"
 4889      53657443 
 4889      6F6E7665 
 4889      72744D6F 
 4889      646500
 4890              	.LASF92:
 4891 0b73 6C6F6E67 		.ascii	"long double\000"
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 196


 4891      20646F75 
 4891      626C6500 
 4892              	.LASF15:
 4893 0b7f 75696E74 		.ascii	"uint16_t\000"
 4893      31365F74 
 4893      00
 4894              	.LASF97:
 4895 0b88 70726F74 		.ascii	"protBase\000"
 4895      42617365 
 4895      00
 4896              	.LASF147:
 4897 0b91 70657269 		.ascii	"periTrCmdGrSelMsk\000"
 4897      5472436D 
 4897      64477253 
 4897      656C4D73 
 4897      6B00
 4898              	.LASF285:
 4899 0ba3 4144435F 		.ascii	"ADC_StartEx\000"
 4899      53746172 
 4899      74457800 
 4900              	.LASF233:
 4901 0baf 43595F53 		.ascii	"CY_SYSCLK_INVALID_STATE\000"
 4901      5953434C 
 4901      4B5F494E 
 4901      56414C49 
 4901      445F5354 
 4902              	.LASF215:
 4903 0bc7 73616D70 		.ascii	"sampleTime01\000"
 4903      6C655469 
 4903      6D653031 
 4903      00
 4904              	.LASF273:
 4905 0bd4 4144435F 		.ascii	"ADC_SetEosMask\000"
 4905      53657445 
 4905      6F734D61 
 4905      736B00
 4906              	.LASF121:
 4907 0be3 73727373 		.ascii	"srssNumHfroot\000"
 4907      4E756D48 
 4907      66726F6F 
 4907      7400
 4908              	.LASF236:
 4909 0bf1 43595F53 		.ascii	"CY_SYSCLK_DIV_16_BIT\000"
 4909      5953434C 
 4909      4B5F4449 
 4909      565F3136 
 4909      5F424954 
 4910              	.LASF105:
 4911 0c06 64775665 		.ascii	"dwVersion\000"
 4911      7273696F 
 4911      6E00
 4912              	.LASF137:
 4913 0c10 666C6173 		.ascii	"flashCtlMainWs2Freq\000"
 4913      6843746C 
 4913      4D61696E 
 4913      57733246 
 4913      72657100 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 197


 4914              	.LASF1:
 4915 0c24 756E7369 		.ascii	"unsigned char\000"
 4915      676E6564 
 4915      20636861 
 4915      7200
 4916              	.LASF269:
 4917 0c32 636F6E66 		.ascii	"config\000"
 4917      696700
 4918              	.LASF201:
 4919 0c39 43595F53 		.ascii	"CY_SAR_SWITCH_SEQ_CTRL_ENABLE\000"
 4919      41525F53 
 4919      57495443 
 4919      485F5345 
 4919      515F4354 
 4920              	.LASF17:
 4921 0c57 73697A65 		.ascii	"sizetype\000"
 4921      74797065 
 4921      00
 4922              	.LASF231:
 4923 0c60 43595F53 		.ascii	"CY_SYSCLK_BAD_PARAM\000"
 4923      5953434C 
 4923      4B5F4241 
 4923      445F5041 
 4923      52414D00 
 4924              	.LASF172:
 4925 0c74 63707573 		.ascii	"cpussCm4NmiCtlOffset\000"
 4925      73436D34 
 4925      4E6D6943 
 4925      746C4F66 
 4925      66736574 
 4926              	.LASF166:
 4927 0c89 63707573 		.ascii	"cpussCm0StatusOffset\000"
 4927      73436D30 
 4927      53746174 
 4927      75734F66 
 4927      66736574 
 4928              	.LASF154:
 4929 0c9e 70657269 		.ascii	"periDiv8CtlOffset\000"
 4929      44697638 
 4929      43746C4F 
 4929      66667365 
 4929      7400
 4930              	.LASF37:
 4931 0cb0 52455345 		.ascii	"RESERVED2\000"
 4931      52564544 
 4931      3200
 4932              	.LASF39:
 4933 0cba 52455345 		.ascii	"RESERVED3\000"
 4933      52564544 
 4933      3300
 4934              	.LASF42:
 4935 0cc4 52455345 		.ascii	"RESERVED4\000"
 4935      52564544 
 4935      3400
 4936              	.LASF73:
 4937 0cce 52455345 		.ascii	"RESERVED5\000"
 4937      52564544 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 198


 4937      3500
 4938              	.LASF75:
 4939 0cd8 52455345 		.ascii	"RESERVED6\000"
 4939      52564544 
 4939      3600
 4940              	.LASF253:
 4941 0ce2 43795F53 		.ascii	"Cy_SAR_Disable\000"
 4941      41525F44 
 4941      69736162 
 4941      6C6500
 4942              	.LASF80:
 4943 0cf1 52455345 		.ascii	"RESERVED8\000"
 4943      52564544 
 4943      3800
 4944              	.LASF83:
 4945 0cfb 52455345 		.ascii	"RESERVED9\000"
 4945      52564544 
 4945      3900
 4946              	.LASF293:
 4947 0d05 4144435F 		.ascii	"ADC_allConfigs\000"
 4947      616C6C43 
 4947      6F6E6669 
 4947      677300
 4948              	.LASF44:
 4949 0d14 50455249 		.ascii	"PERI_V1_Type\000"
 4949      5F56315F 
 4949      54797065 
 4949      00
 4950              	.LASF85:
 4951 0d21 4D55585F 		.ascii	"MUX_SWITCH_SQ_CTRL\000"
 4951      53574954 
 4951      43485F53 
 4951      515F4354 
 4951      524C00
 4952              	.LASF7:
 4953 0d34 6C6F6E67 		.ascii	"long int\000"
 4953      20696E74 
 4953      00
 4954              	.LASF103:
 4955 0d3d 63707573 		.ascii	"cpussVersion\000"
 4955      73566572 
 4955      73696F6E 
 4955      00
 4956              	.LASF107:
 4957 0d4a 6770696F 		.ascii	"gpioVersion\000"
 4957      56657273 
 4957      696F6E00 
 4958              	.LASF32:
 4959 0d56 4449565F 		.ascii	"DIV_CMD\000"
 4959      434D4400 
 4960              	.LASF106:
 4961 0d5e 666C6173 		.ascii	"flashcVersion\000"
 4961      68635665 
 4961      7273696F 
 4961      6E00
 4962              	.LASF304:
 4963 0d6c 5C5C4D61 		.ascii	"\\\\Mac\\Data\\VScode\\GIT\\Onethinx_Project_Exampl"
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 199


 4963      635C4461 
 4963      74615C56 
 4963      53636F64 
 4963      655C4749 
 4964 0d99 65735C45 		.ascii	"es\\Example_DevKitLightSensor\\Onethinx_Creator.cyd"
 4964      78616D70 
 4964      6C655F44 
 4964      65764B69 
 4964      744C6967 
 4965 0dca 736E00   		.ascii	"sn\000"
 4966              	.LASF206:
 4967 0dcd 43595F53 		.ascii	"CY_SAR_RANGE_COND_ABOVE\000"
 4967      41525F52 
 4967      414E4745 
 4967      5F434F4E 
 4967      445F4142 
 4968              	.LASF265:
 4969 0de5 43795F53 		.ascii	"Cy_SysClk_PeriphEnableDivider\000"
 4969      7973436C 
 4969      6B5F5065 
 4969      72697068 
 4969      456E6162 
 4970              	.LASF49:
 4971 0e03 52414E47 		.ascii	"RANGE_THRES\000"
 4971      455F5448 
 4971      52455300 
 4972              	.LASF181:
 4973 0e0f 63686172 		.ascii	"char_t\000"
 4973      5F7400
 4974              	.LASF189:
 4975 0e16 43595F53 		.ascii	"CY_SAR_CONVERSION_NOT_COMPLETE\000"
 4975      41525F43 
 4975      4F4E5645 
 4975      5253494F 
 4975      4E5F4E4F 
 4976              	.LASF54:
 4977 0e35 4348414E 		.ascii	"CHAN_WORK\000"
 4977      5F574F52 
 4977      4B00
 4978              	.LASF184:
 4979 0e3f 646F7562 		.ascii	"double\000"
 4979      6C6500
 4980              	.LASF303:
 4981 0e46 47656E65 		.ascii	"Generated_Source\\PSoC6\\ADC.c\000"
 4981      72617465 
 4981      645F536F 
 4981      75726365 
 4981      5C50536F 
 4982              	.LASF167:
 4983 0e63 63707573 		.ascii	"cpussCm4PwrCtlOffset\000"
 4983      73436D34 
 4983      50777243 
 4983      746C4F66 
 4983      66736574 
 4984              	.LASF3:
 4985 0e78 5F5F7569 		.ascii	"__uint8_t\000"
 4985      6E74385F 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 200


 4985      7400
 4986              	.LASF243:
 4987 0e82 6D697363 		.ascii	"miscConfig\000"
 4987      436F6E66 
 4987      696700
 4988              	.LASF158:
 4989 0e8d 6770696F 		.ascii	"gpioPrtIntrCfgOffset\000"
 4989      50727449 
 4989      6E747243 
 4989      66674F66 
 4989      66736574 
 4990              	.LASF267:
 4991 0ea2 4144435F 		.ascii	"ADC_StartConvert\000"
 4991      53746172 
 4991      74436F6E 
 4991      76657274 
 4991      00
 4992              	.LASF63:
 4993 0eb3 494E5452 		.ascii	"INTR_MASKED\000"
 4993      5F4D4153 
 4993      4B454400 
 4994              	.LASF169:
 4995 0ebf 63707573 		.ascii	"cpussTrimRomCtlOffset\000"
 4995      73547269 
 4995      6D526F6D 
 4995      43746C4F 
 4995      66667365 
 4996              	.LASF216:
 4997 0ed5 73616D70 		.ascii	"sampleTime23\000"
 4997      6C655469 
 4997      6D653233 
 4997      00
 4998              	.LASF301:
 4999 0ee2 43795F53 		.ascii	"Cy_SAR_Enable\000"
 4999      41525F45 
 4999      6E61626C 
 4999      6500
 5000              	.LASF108:
 5001 0ef0 6873696F 		.ascii	"hsiomVersion\000"
 5001      6D566572 
 5001      73696F6E 
 5001      00
 5002              	.LASF9:
 5003 0efd 6C6F6E67 		.ascii	"long unsigned int\000"
 5003      20756E73 
 5003      69676E65 
 5003      6420696E 
 5003      7400
 5004              	.LASF251:
 5005 0f0f 72657456 		.ascii	"retVal\000"
 5005      616C00
 5006              	.LASF259:
 5007 0f16 43795F53 		.ascii	"Cy_SAR_SetVssaSarSeqCtrl\000"
 5007      41525F53 
 5007      65745673 
 5007      73615361 
 5007      72536571 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 201


 5008              	.LASF173:
 5009 0f2f 63707573 		.ascii	"cpussRomCtl\000"
 5009      73526F6D 
 5009      43746C00 
 5010              	.LASF264:
 5011 0f3b 4144435F 		.ascii	"ADC_Stop\000"
 5011      53746F70 
 5011      00
 5012              	.LASF81:
 5013 0f44 4D55585F 		.ascii	"MUX_SWITCH0\000"
 5013      53574954 
 5013      43483000 
 5014              	.LASF57:
 5015 0f50 4348414E 		.ascii	"CHAN_RESULT_UPDATED\000"
 5015      5F524553 
 5015      554C545F 
 5015      55504441 
 5015      54454400 
 5016              	.LASF196:
 5017 0f64 63795F65 		.ascii	"cy_en_sar_return_mode_t\000"
 5017      6E5F7361 
 5017      725F7265 
 5017      7475726E 
 5017      5F6D6F64 
 5018              	.LASF255:
 5019 0f7c 73746174 		.ascii	"state\000"
 5019      6500
 5020              	.LASF53:
 5021 0f82 4348414E 		.ascii	"CHAN_CONFIG\000"
 5021      5F434F4E 
 5021      46494700 
 5022              	.LASF214:
 5023 0f8e 73616D70 		.ascii	"sampleCtrl\000"
 5023      6C654374 
 5023      726C00
 5024              	.LASF209:
 5025 0f99 43595F53 		.ascii	"CY_SAR_INTR_MASK_NONE\000"
 5025      41525F49 
 5025      4E54525F 
 5025      4D41534B 
 5025      5F4E4F4E 
 5026              	.LASF88:
 5027 0faf 414E415F 		.ascii	"ANA_TRIM0\000"
 5027      5452494D 
 5027      3000
 5028              	.LASF89:
 5029 0fb9 414E415F 		.ascii	"ANA_TRIM1\000"
 5029      5452494D 
 5029      3100
 5030              	.LASF8:
 5031 0fc3 5F5F7569 		.ascii	"__uint32_t\000"
 5031      6E743332 
 5031      5F7400
 5032              	.LASF180:
 5033 0fce 63795F69 		.ascii	"cy_israddress\000"
 5033      73726164 
 5033      64726573 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 202


 5033      7300
 5034              	.LASF197:
 5035 0fdc 43595F53 		.ascii	"CY_SAR_SWITCH_OPEN\000"
 5035      41525F53 
 5035      57495443 
 5035      485F4F50 
 5035      454E00
 5036              	.LASF238:
 5037 0fef 43595F53 		.ascii	"CY_SYSCLK_DIV_24_5_BIT\000"
 5037      5953434C 
 5037      4B5F4449 
 5037      565F3234 
 5037      5F355F42 
 5038              	.LASF66:
 5039 1006 53415455 		.ascii	"SATURATE_INTR_MASK\000"
 5039      52415445 
 5039      5F494E54 
 5039      525F4D41 
 5039      534B00
 5040              	.LASF279:
 5041 1019 7265744D 		.ascii	"retMode\000"
 5041      6F646500 
 5042              	.LASF87:
 5043 1021 52455345 		.ascii	"RESERVED10\000"
 5043      52564544 
 5043      313000
 5044              	.LASF134:
 5045 102c 666C6173 		.ascii	"flashEraseDelay\000"
 5045      68457261 
 5045      73654465 
 5045      6C617900 
 5046              	.LASF244:
 5047 103c 636C6B44 		.ascii	"clkDivider\000"
 5047      69766964 
 5047      657200
 5048              	.LASF294:
 5049 1047 43795F53 		.ascii	"Cy_SAR_SetAnalogSwitch\000"
 5049      41525F53 
 5049      6574416E 
 5049      616C6F67 
 5049      53776974 
 5050              	.LASF260:
 5051 105e 43795F53 		.ascii	"Cy_SAR_SetInterruptMask\000"
 5051      41525F53 
 5051      6574496E 
 5051      74657272 
 5051      7570744D 
 5052              	.LASF280:
 5053 1076 656E644F 		.ascii	"endOfConversion\000"
 5053      66436F6E 
 5053      76657273 
 5053      696F6E00 
 5054              	.LASF200:
 5055 1086 43595F53 		.ascii	"CY_SAR_SWITCH_SEQ_CTRL_DISABLE\000"
 5055      41525F53 
 5055      57495443 
 5055      485F5345 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 203


 5055      515F4354 
 5056              	.LASF292:
 5057 10a5 4144435F 		.ascii	"ADC_currentConfig\000"
 5057      63757272 
 5057      656E7443 
 5057      6F6E6669 
 5057      6700
 5058              	.LASF297:
 5059 10b7 43795F53 		.ascii	"Cy_SAR_Init\000"
 5059      41525F49 
 5059      6E697400 
 5060              	.LASF128:
 5061 10c3 70726F74 		.ascii	"protBusMasterMask\000"
 5061      4275734D 
 5061      61737465 
 5061      724D6173 
 5061      6B00
 5062              	.LASF130:
 5063 10d5 666C6173 		.ascii	"flashRwwRequired\000"
 5063      68527777 
 5063      52657175 
 5063      69726564 
 5063      00
 5064              	.LASF159:
 5065 10e6 6770696F 		.ascii	"gpioPrtCfgOffset\000"
 5065      50727443 
 5065      66674F66 
 5065      66736574 
 5065      00
 5066              	.LASF125:
 5067 10f7 65704D6F 		.ascii	"epMonitorNr\000"
 5067      6E69746F 
 5067      724E7200 
 5068              	.LASF2:
 5069 1103 7369676E 		.ascii	"signed char\000"
 5069      65642063 
 5069      68617200 
 5070              	.LASF140:
 5071 110f 64774368 		.ascii	"dwChOffset\000"
 5071      4F666673 
 5071      657400
 5072              	.LASF113:
 5073 111a 63707573 		.ascii	"cpussIpcIrqNr\000"
 5073      73497063 
 5073      4972714E 
 5073      7200
 5074              	.LASF143:
 5075 1128 64774368 		.ascii	"dwChCtlPreemptablePos\000"
 5075      43746C50 
 5075      7265656D 
 5075      70746162 
 5075      6C65506F 
 5076              	.LASF84:
 5077 113e 4D55585F 		.ascii	"MUX_SWITCH_DS_CTRL\000"
 5077      53574954 
 5077      43485F44 
 5077      535F4354 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 204


 5077      524C00
 5078              	.LASF165:
 5079 1151 63707573 		.ascii	"cpussCm4StatusOffset\000"
 5079      73436D34 
 5079      53746174 
 5079      75734F66 
 5079      66736574 
 5080              	.LASF220:
 5081 1166 6368616E 		.ascii	"chanConfig\000"
 5081      436F6E66 
 5081      696700
 5082              	.LASF86:
 5083 1171 4D55585F 		.ascii	"MUX_SWITCH_STATUS\000"
 5083      53574954 
 5083      43485F53 
 5083      54415455 
 5083      5300
 5084              	.LASF26:
 5085 1183 41444452 		.ascii	"ADDR0\000"
 5085      3000
 5086              	.LASF28:
 5087 1189 41444452 		.ascii	"ADDR1\000"
 5087      3100
 5088              	.LASF110:
 5089 118f 70657269 		.ascii	"periVersion\000"
 5089      56657273 
 5089      696F6E00 
 5090              	.LASF275:
 5091 119b 6465496E 		.ascii	"deInitRouting\000"
 5091      6974526F 
 5091      7574696E 
 5091      6700
 5092              	.LASF226:
 5093 11a9 636F6E66 		.ascii	"configRouting\000"
 5093      6967526F 
 5093      7574696E 
 5093      6700
 5094              	.LASF100:
 5095 11b7 70617373 		.ascii	"passBase\000"
 5095      42617365 
 5095      00
 5096              	.LASF27:
 5097 11c0 41545430 		.ascii	"ATT0\000"
 5097      00
 5098              	.LASF29:
 5099 11c5 41545431 		.ascii	"ATT1\000"
 5099      00
 5100              	.LASF22:
 5101 11ca 52455345 		.ascii	"RESERVED1\000"
 5101      52564544 
 5101      3100
 5102              	.LASF119:
 5103 11d4 73727373 		.ascii	"srssNumClkpath\000"
 5103      4E756D43 
 5103      6C6B7061 
 5103      746800
 5104              	.LASF78:
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 205


 5105 11e3 53544154 		.ascii	"STATUS\000"
 5105      555300
 5106              	.LASF23:
 5107 11ea 50455249 		.ascii	"PERI_GR_V1_Type\000"
 5107      5F47525F 
 5107      56315F54 
 5107      79706500 
 5108              	.LASF139:
 5109 11fa 666C6173 		.ascii	"flashCtlMainWs4Freq\000"
 5109      6843746C 
 5109      4D61696E 
 5109      57733446 
 5109      72657100 
 5110              	.LASF223:
 5111 120e 72616E67 		.ascii	"rangeIntrMask\000"
 5111      65496E74 
 5111      724D6173 
 5111      6B00
 5112              	.LASF198:
 5113 121c 43595F53 		.ascii	"CY_SAR_SWITCH_CLOSE\000"
 5113      41525F53 
 5113      57495443 
 5113      485F434C 
 5113      4F534500 
 5114              	.LASF276:
 5115 1230 696E7472 		.ascii	"intrMaskReg\000"
 5115      4D61736B 
 5115      52656700 
 5116              	.LASF208:
 5117 123c 63795F65 		.ascii	"cy_en_sar_range_detect_condition_t\000"
 5117      6E5F7361 
 5117      725F7261 
 5117      6E67655F 
 5117      64657465 
 5118              	.LASF21:
 5119 125f 54494D45 		.ascii	"TIMEOUT_CTL\000"
 5119      4F55545F 
 5119      43544C00 
 5120              	.LASF192:
 5121 126b 43595F53 		.ascii	"CY_SAR_START_CONVERT_CONTINUOUS\000"
 5121      41525F53 
 5121      54415254 
 5121      5F434F4E 
 5121      56455254 
 5122              	.LASF31:
 5123 128b 50455249 		.ascii	"PERI_PPU_GR_V1_Type\000"
 5123      5F505055 
 5123      5F47525F 
 5123      56315F54 
 5123      79706500 
 5124              	.LASF109:
 5125 129f 69706356 		.ascii	"ipcVersion\000"
 5125      65727369 
 5125      6F6E00
 5126              	.LASF221:
 5127 12aa 696E7472 		.ascii	"intrMask\000"
 5127      4D61736B 
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\ccUNoGUf.s 			page 206


 5127      00
 5128              	.LASF146:
 5129 12b3 70657269 		.ascii	"periTrCmdOffset\000"
 5129      5472436D 
 5129      644F6666 
 5129      73657400 
 5130              	.LASF300:
 5131 12c3 43795F53 		.ascii	"Cy_SAR_IsEndConversion\000"
 5131      41525F49 
 5131      73456E64 
 5131      436F6E76 
 5131      65727369 
 5132              	.LASF263:
 5133 12da 4144435F 		.ascii	"ADC_Enable\000"
 5133      456E6162 
 5133      6C6500
 5134              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
