ARM GAS  C:\Users\Rolf\AppData\Local\Temp\cctB4Mmz.s 			page 1


   1              	# 1 "Generated_Source\\PSoC6\\pdl\\drivers\\peripheral\\syslib\\gcc\\cy_syslib_gcc.S"
   1              	/***************************************************************************//**
   0              	
   0              	
   0              	
   2              	* \file cy_syslib_gcc.S
   3              	* \version 2.10.1
   4              	*
   5              	* \brief Assembly routines for GNU GCC.
   6              	*
   7              	********************************************************************************
   8              	* \copyright
   9              	* Copyright 2016-2018, Cypress Semiconductor Corporation.  All rights reserved.
  10              	* You may use this file only in accordance with the license, terms, conditions,
  11              	* disclaimers, and limitations in the end user license agreement accompanying
  12              	* the software package with which this file was provided.
  13              	*******************************************************************************/
  14              	
  15              	.syntax unified
  16              	.text
  17              	.thumb
  18              	
  19              	
  20              	/*******************************************************************************
  21              	* Function Name: Cy_SysLib_DelayCycles
  22              	****************************************************************************//**
  23              	*
  24              	* Delays for the specified number of cycles.
  25              	*
  26              	* \param uint32_t cycles: The number of cycles to delay.
  27              	*
  28              	*******************************************************************************/
  29              	/* void Cy_SysLib_DelayCycles(uint32_t cycles) */
  30              	.align 3                    /* Align to 8 byte boundary (2^n) */
  31              	#ifndef __clang__
  32              	.global Cy_SysLib_DelayCycles
  33              	.func Cy_SysLib_DelayCycles, Cy_SysLib_DelayCycles
  34              	.type Cy_SysLib_DelayCycles, %function
  35              	.thumb_func
  36              	Cy_SysLib_DelayCycles:      /* cycles bytes */
  37              	
  38              	#else
  39              	.global _Cy_SysLib_DelayCycles
  40              	.thumb_func
  41              	
  42              	_Cy_SysLib_DelayCycles:      /* cycles bytes */
  43              	#endif
  44              	
  45 0000 0230     	    ADDS r0, r0, #2         /*    1    2    Round to nearest multiple of 4 */
  46 0002 8008     	    LSRS r0, r0, #2         /*    1    2    Divide by 4 and set flags */
  47 0004 03D0     	    BEQ Cy_DelayCycles_done /*    2    2    Skip if 0 */
  48              	#ifdef __clang__
  49              	    .align 2                    /* Align to 8 byte boundary (2^n) */
  50              	#endif
  51              	Cy_DelayCycles_loop:
  52 0006 0130     	    ADDS r0, r0, #1         /*    1    2    Increment counter */
  53 0008 0238     	    SUBS r0, r0, #2         /*    1    2    Decrement counter by 2 */
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\cctB4Mmz.s 			page 2


  54 000a FCD1     	    BNE Cy_DelayCycles_loop /*   (1)2  2    2 CPU cycles (if branch is taken) */
  55 000c 00BF     	    NOP                     /*    1    2    Loop alignment padding */
  56              	#ifdef __clang__
  57              	    .align 2                    /* Align to 8 byte boundary (2^n) */
  58              	#endif
  59              	Cy_DelayCycles_done:
  60 000e 00BF     	    NOP                     /*    1    2    Loop alignment padding */
  61 0010 7047     	    BX lr                   /*    3    2 */
  62              	
  63              	#ifndef __clang__    
  64              	.endfunc
  65              	#endif
  66              	
  67              	/*******************************************************************************
  68              	* Function Name: Cy_SysLib_EnterCriticalSection
  69              	****************************************************************************//**
  70              	*
  71              	* Cy_SysLib_EnterCriticalSection disables interrupts and returns a value
  72              	* indicating whether interrupts were previously enabled.
  73              	*
  74              	* Note Implementation of Cy_SysLib_EnterCriticalSection manipulates the IRQ
  75              	* enable bit with interrupts still enabled.
  76              	*
  77              	* \return Returns 0 if interrupts were previously enabled or 1 if interrupts
  78              	* were previously disabled.
  79              	*
  80              	*******************************************************************************/
  81              	/* uint8_t Cy_SysLib_EnterCriticalSection(void) */
  82              	#ifndef __clang__
  83              	.global Cy_SysLib_EnterCriticalSection
  84              	.func Cy_SysLib_EnterCriticalSection, Cy_SysLib_EnterCriticalSection
  85              	.type Cy_SysLib_EnterCriticalSection, %function
  86              	.thumb_func
  87              	
  88              	Cy_SysLib_EnterCriticalSection:
  89              	#else
  90              	.global _Cy_SysLib_EnterCriticalSection
  91              	.thumb_func
  92              	
  93              	_Cy_SysLib_EnterCriticalSection:
  94              	#endif
  95              	
  96 0012 EFF31080 	    MRS r0, PRIMASK         /* Save and return interrupt state */
  97 0016 72B6     	    cpsid i                 /* Disable interrupts */
  98 0018 7047     	    BX lr
  99              	
 100              	#ifndef __clang__
 101              	.endfunc
 102              	#endif
 103              	
 104              	
 105              	/*******************************************************************************
 106              	* Function Name: Cy_SysLib_ExitCriticalSection
 107              	****************************************************************************//**
 108              	*
 109              	*  Re-enables interrupts if they were enabled before
 110              	*  Cy_SysLib_EnterCriticalSection() was called. The argument should be the value
ARM GAS  C:\Users\Rolf\AppData\Local\Temp\cctB4Mmz.s 			page 3


 111              	*  returned from \ref Cy_SysLib_EnterCriticalSection().
 112              	*
 113              	*  \param uint8_t savedIntrStatus:
 114              	*   Saved interrupt status returned by the \ref Cy_SysLib_EnterCriticalSection().
 115              	*
 116              	*******************************************************************************/
 117              	/* void Cy_SysLib_ExitCriticalSection(uint8_t savedIntrStatus) */
 118              	#ifndef __clang__
 119              	.global Cy_SysLib_ExitCriticalSection
 120              	.func Cy_SysLib_ExitCriticalSection, Cy_SysLib_ExitCriticalSection
 121              	.type Cy_SysLib_ExitCriticalSection, %function
 122              	.thumb_func
 123              	Cy_SysLib_ExitCriticalSection:
 124              	#else
 125              	.global _Cy_SysLib_ExitCriticalSection
 126              	.thumb_func
 127              	
 128              	_Cy_SysLib_ExitCriticalSection:
 129              	#endif
 130              	
 131 001a 80F31088 	    MSR PRIMASK, r0         /* Restore interrupt state */
 132 001e 7047     	    BX lr
 133              	
 134              	#ifndef __clang__
 135              	.endfunc
 136              	#endif
 137              	
 138              	.end
